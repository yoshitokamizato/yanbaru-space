genre,title,body
Basic,Macのショートカットキー,"パソコンになれてないなら、まずはショートカットキーから使えるようにしていきましょう。ここにあげてあるショートカットキーを使えないと、プログラミングの学習効率は全く上がらないです。

プログラマーなるなら必須中の必須なので、ぜひ使いこなせるようにしてください。絶対にこれだけは覚えて！というショートカットキーは以下の通り。

上書き保存

```
command + s
```

コピー

```
command + c
```

カット

```
command + x
```

ペースト

```
command + v
```

更新

```
command + r
```

新しいウインドウを開く（ブラウザ、テキストエディタなど）

```
command + t
```

新規で開く（ブラウザ、テキストエディタなど）

```
command + n
```

アプリの切り替え

```
shift + tab
```

# まとめ
パソコンの操作スピードを上げるためにも、ショートカットキーを活用することはとても重要になってきます。特に、コピー&ペーストや上書き保存は、ショートカットキーを使用するのとそうでないのでは大きな差が出てくるので、ぜひ使えるようにしておきましょう。
"
Basic,Linuxコマンド,"Linuxコマンドは、Ruby on Railsアプリを開発するときにもよく使うコマンドです。Macでプログラミングを学ぶ際に、このLinuxコマンドの知識が必須となりますので、一つ一つ確認していきましょう。

また、Linuxコマンドにはたくさんの種類がありますが、こちらではよく使用するコマンドを抽出して載せるようにします。上に書いてあるものから順に覚えて行くと無駄なく学習することができます。

## cd
ディレクトリ間を移動するときのコマンドは以下のようになります。 `directory_name` には、自分が移動したいディレクトリの名前を入れましょう。

```
cd directory_name
```

ためしに、 `cd` コマンドを利用して `desktop` へ移動してみましょう。

```
cd desktop
```

コマンドを実行した後のターミナルの表示に `desktop` という表示が含まれていれば移動は成功です。ターミナルでは、このように `cd` コマンドを利用してパソコン内を移動します。非常によく利用するコマンドなので、是非使えるようにしておきましょう。

```
MacBook-Pro-2:desktop your_name$
```


## ls
現在操作を行なっているディレクトリにあるファイルや、他のディレクトリを一覧表示するためには`ls`コマンドを実行します。 `cd` コマンドでディレクトリ間の移動を行い、 `ls` コマンドで操作したいディレクトリやファイルが存在するかどうかを調べるというのがよくある使い方です。

```
ls
```

## pwd
ターミナル上で操作対象となっているディレクトリの場所を表示するコマンドです。これを実行すると、ディレクトリのパスが表示されます。

```
pwd
```

実行結果

```
/Users/yoshito/desktop
```

## touch
新しいファイルを作成するときには`touch`コマンドを使用します。`directory_name`には自分が作成したいファイル名を拡張子を含めて指定します。

```
touch file_name
```

例

```
touch sample.rb
```

## mkdir
新しいディレクトリを作成するときは`mkdir`コマンドを使用します。`directory_name`には自分が作成したいディレクトリ名を指定します。

```
mkdir directory_name
```

例

```
mkdir sample
```

# まとめ
Linuxコマンドは、Macの操作をする上ではとても重要なコマンドとなります。プログラミングをやるときにも、これらのコマンドはよく使用するのでぜひ使えるようにしてみてください。"
Basic,Slackを使用したいろんなマークダウン記法,"Slackを使いこなすと、プログラミング学習の効率もぐんと上がる（特に質問の仕方が上手くなる）ので、ぜひマークダウン記法を利用してみてください！


|No.|記入方法|用途|
|---|---|---|
|1|@hoge|hogeさん、あるいは hoge グループあてのコメントになる|
|2|#hoge| チャンネル　hoge へのリンクになる|
|3| \`サンプルコード \`|ボーダーで囲まれ、文字色赤、背景灰色になる|
|4| \`\`\` サンプルコード \`\`\` |ボーダーで囲まれ、 \`\`\` で発言を開始すると再び \`\`\` が来るまでは改行しても送信しない|
|5|>引用文|引用表現にする|
|6|>>>引用文|改行含めた段落全体を引用表現にする|
|7|\_slack_|文字をイタリックにする|
|8|\*slack*|文字をボールドにする|
|9|\~slack~|文字をストライク（取り消し線）にする|


No.3, 4 の記法を使用した時の表示は以下のようになります。

`No.3の書き方：1行のコードを書く場合`

```
No.4の書き方
複数行のコードを書く場合
```

# まとめ
Slackにおいてマークダウンを使用するとコミュニケーション効率が圧倒的に上がるので、ぜひ活用して見てください。"
Basic,Ruby on Rails の環境構築（Mac版）,"- 2020年3月に購入した`MacBook Air`で，初期登録を済ませただけの状態から以下の操作で動作確認ができております
  - macOS Catalina バージョン 10.15.3

- ネットワーク通信量が大きいため，ご注意下さい。

## 1. Gitの環境構築

- Progateの環境構築方法が大変分かりやすいので，こちらをご覧下さい
  - [https://prog-8.com/docs/git-env](https://prog-8.com/docs/git-env)

## 2. Rubyの環境構築

Macの場合は`Ruby`が初めからインストールされております。

ただ，Rubyファイルを扱うための「コードエディタ」を導入すべきですし，`Ruby`は`rbenv`というツールを用いてインストールした`Ruby`を使用すべきですので，この段階で環境構築を行っておきましょう。

### 2.0 アプリの開き方

- Macのアプリを開く方法はいろいろあります
  - Dock（一番下のメニュー）から開く
  - Lanchpadから開く
  - Spotlight検索から開く
  - ターミナルから開く

特に，Dockに入っていないアプリは`Spotlight検索`から起動する方法が便利です。
方法は２通りありますが，なるべくショートカットキーで覚えましょう。

- 右上の虫眼鏡マークをクリック
- `command(⌘) + Space`（`command(⌘)キー`を押しながら`Spaceキー`を押す）

`Spotlight検索`で，例えば「メモ」と入力すると，「メモ」「ボイスメモ」などのアプリが候補として出てきます。ファイル検索も可能です。

### 2.1 エディタのインストール

プログラミングをする上で必須となるのが「コードエディタ」です。参考までに現在有名なエディタを列挙します。

- [Visual Studio Code(VS Code)](https://code.visualstudio.com/download)
- [Atom](https://atom.io/)
- [Sublime Text(有料)](https://www.sublimetext.com/)
- [RubyMine(有料)](https://www.jetbrains.com/ja-jp/ruby/)

2020年3月現在において，最もお勧めできるのは，`VS Code`です。
無料でありながら，動作が軽快かつ拡張機能が豊富なエディタで，使用率も1位です。

以下，`VS Code`をインストールする前提で進めていきます。

#### 2.1.1 VS Codeのインストール

- 次のリンクから`VS Code`のMac版をダウンロード
  - [https://code.visualstudio.com/download](https://code.visualstudio.com/download)

- 右下のDockにアイコンが追加されるのでそれをクリック

- ダウンロードフォルダが表示されたら，`Visual Studio Code`を「アプリケーション」フォルダに移動し，「アプリケーション」フォルダから開いてください。

「悪質なソフトウェアかどうかをappleでは確認できないため……」のような表示が出た場合は，アプリをダブルクリックするのではなく，右クリック（トラックパッドなら2本指でクリック）で出てくるメニューの「開く」をクリックして，「開く」をクリックして下さい。

#### 2.1.2 VS Codeの日本語化

初期設定は英語です。日本語で使用されたい場合は，以下の設定を行って下さい。

- 一番左に５つあるアイコン一番下の`Extensions`をクリックし，「Japanese」で検索

- 一番上の「Japanese Language Pack for Visual Studio Code」を選択し，`Install`ボタンをクリック

- 右下に現れる`Restart Now`ボタンをクリック

- VS Codeが再起動され，日本語化されます

#### 2.1.3 パスを通す

以下の作業を行うと，`ターミナル`から`VS Code`を簡単に開くことができるようになります。
とても便利なので是非設定しておきましょう。

- 左下の歯車マークをクリックし，`コマンドパレット`をクリック

- `shell`と入力して出てくる「シェルコマンド: PATH内に 'code' コマンドをインストールします」をクリック

- パスワードを聞かれた場合は，Macのパスワード（macの初期設定で決めたパスワード）を入力してEnterキーを押して下さい
  - 入力しても表示が変わりませんが入力できています

以上で設定は終了です。動作確認をしてみましょう。

- まず，`VS Code`を閉じて下さい

- 「ターミナル」を起動して下さい
  - 「Spotlight検索」で「terminal」もしくは「たーみなる」と入力すれば出てきます

- 「ターミナル」で `code` と入力して実行（Enterキーを押す）

- `VS Code`が起動すればOKです

（`code .`を実行すると，カレントディレクトリを`VS code`で開くことができます）

#### 2.1.4 自動保存

「保存のし忘れ」でコードが反映されないケースがよくあります。
`VS Code`には，自動で保存する設定がありますので，設定をお勧めします。

- 左下の歯車ボタンをクリックし，「設定」をクリック
- 「autosave」と入力
- 「Auto Save」の項目の「Off」を「OnFocusChange」に変更

#### 2.1.5 重要なショートカットキー

- 検索・置換
  - ページ内検索は,`command(⌘) + F`
  - ページ内置換は，`option(⌥) + command(⌘) + F`
  - 全体検索は，`command(⌘) + shift(⇧) + F`
  - ファイル検索は，`command(⌘) + P`

- VS Code内のターミナルを開く
  - `shift(⇧) + control(⌃) + @`

#### 2.1.6 【おまけ】 設定のカスタマイズ方法

`VS Code`の設定を変更する方法は２種類あります。

- 「設定」から変更する
  - 左下の「歯車」マークに「設定」があります
  - ショートカットキーは，`command(⌘) + ,`

- 設定ファイルを直接編集する

追加した設定は`settings.json`に保存されており，直接このファイルを書き換えることで設定を変更することが可能です。

コマンドパレット（`command(⌘) + shift(⇧) + P`）で「json」で検索し，「基本設定: 設定（JSON）を開く」を選択すると，`settings.json`を開くことができます。

### 2.2 Rubyの環境構築

Macには最初から`Ruby`がインストールされていますが，`Rails`の学習を進める中で，いずれ複数の`Ruby`のバージョンを用いる機会が出てきます。

そのため，`rbenv`（アールビー・エンブ）というツールを用いてRubyをインストールし，複数のバージョンの`Ruby`を使用できる状態にしておきましょう。

#### 2.2.1 Homebrewのインストール

`rbenv`をインストールするには，先に`Homebrew`をインストールする必要があります。

- Homebrewの公式ページ
  - [https://brew.sh/index_ja](https://brew.sh/index_ja)

- Homebrewがインストール済みがどうか不明な場合は，ターミナルから次を実行して下さい。

```
brew -v
```

`Homebrew 2.2.6`のようなバージョン情報が表示されればインストール済みですので，`brew update`を実行した上で次に進んでOKです。（バージョンの数字は異なっていても構いません）

`command not found: brew`と表示された場合は，まだインストールできていませんので，以下を実行して下さい。

- ターミナルから，公式ページに記載されている次のコマンドを実行すればインストールが始まります。

```
/usr/bin/ruby -e ""$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)""
```

`press RETURN to continue or any other key to abort`と表示されたら，「Enterキー」を押し，Macのパスワードを入力して下さい。

インストールが完了したら，インストールできているかどうかの確認のため，ターミナルに次のコマンドを入力して下さい。

```
brew -v
```

`Homebrew 2.2.6`のようなバージョン情報が表示されればOKです。（バージョンの数字は異なっていても構いません）

#### 2.2.2 rbenvのインストール

- `rbenv`をインストールするため，ターミナルに次のコマンドを入力して下さい
  - `ruby-build`, `readline`なども自動的にインストールされます
  - すでにインストール済みの方は`brew upgrade rbenv ruby-build`を実行してから2.2.3に進んで下さい

```
brew install rbenv
```

インストールが完了したら，インストールできているかどうかの確認のため，ターミナルに次のコマンドを実行して下さい。バージョン情報が表示されればOKです

```
rbenv -v
```

この後，`rbenv`のパスを通す必要があるのですが，実行環境の`シェル`により方法が異なります。

環境を確認するため，次をターミナルから実行して下さい。

```
echo $SHELL
```

##### 2.2.2.1 実行結果が `/bin/bash` の場合

- まず，次を実行してパスを通しましょう。
  - `.bash_profile` というファイルに `eval ""$(rbenv init -)""` を書き込む操作です

```
echo 'eval ""$(rbenv init -)""' >> ~/.bash_profile
```

- 反映させるため，ターミナルを再起動するか，次を実行して下さい。

```
source ~/.bash_profile
```

##### 2.2.2.2 実行結果が `/bin/zsh` の場合

- まず，次を実行してパスを通しましょう。
  - `.zshrc` というファイルに `eval ""$(rbenv init -)""` を書き込む操作です

```
echo 'eval ""$(rbenv init -)""' >>  ~/.zshrc
```

- 反映させるため，ターミナルを再起動するか，次を実行して下さい。

```
source ~/.zshrc
```

#### 2.2.3 Rubyのインストール

`rbenv`を利用して`Ruby`のインストールを行いましょう。

まず，最新の`Ruby`の安定バージョンを確認しましょう。次のコマンドで確認できます。

```
rbenv install -l | grep -v -
```

基本的には最新のバージョンがよいですが，`2.7.0`のように，大きなアップデート後の最初のバージョンはバグが含まれる危険性があるため避けましょう。

なお，2020/4/29現在では，RailsがRuby 2.7.1 の警告に対応しきれていないため，まだお勧めできません。

バージョン `2.6.6` をインストールする場合は，次を実行します。

```
rbenv install 2.6.6
```

インストールが完了したら，インストールできているかどうかの確認のため，ターミナルに次のコマンドを入力して下さい。指定したバージョンが含まれていればOKです。

```
rbenv versions
```

バージョン `2.6.6` を使用する場合は次を実行して下さい。

```
rbenv global 2.6.6
```

ターミナルを再起動した後，次を実行して下さい。指定したバージョンが表示されればOKです。

```
ruby -v
```

## 3. Ruby on Rails の環境構築

以下は，「2.2 Rubyの環境構築」を済まされている前提で進めていきます。

念のため，ターミナルから次を実行して下さい。

```
which ruby
```

`/Users/ユーザー名/.rbenv/shims/ruby`が表示されればOKです。

`/usr/bin/ruby`と表示された場合は，Rubyが`rbenv`で管理されていませんので，先に「2.2」に記載した設定を行って下さい。

### 3.1 Google Chromeのインストール

Macには`Safari`というブラウザが用意されておりますが，現在最も使用されているブラウザは`Google Chrome`です。

この`Google Chrome`は検証ツールなどの便利機能があり，Railsアプリの開発で必須といっても過言ではありません。

まだインストールされていない方は，このタイミングで導入しておきましょう。

- Google Chrome 公式サイト
  - [https://www.google.com/intl/ja_jp/chrome/](https://www.google.com/intl/ja_jp/chrome/)

`Google Chrome`をフォルダにドラッグ＆ドロップする作業が終わりましたら，Spotlight検索で「chrome」と入力すれば候補に出ます。必要があればDockに追加しておきましょう。

### 3.2 Ruby on Railsのインストール

#### 3.2.1 Bundler,Rails,Yarnのインストール

- `Bundler`と`Rails`をインストールしましょう
  - `Rails`はバージョン5系と6系をインストールしておきましょう
  - バージョンアップ情報は[こちら](https://openstandia.jp/oss_info/rubyonrails/version/)が分かりやすいと思います

ターミナルを起動し，「ホームディレクトリ」から次を実行して下さい。

```
gem install bundler
gem install rails:5.2.4.3
gem install rails
```

- `Rails 6`のアプリを作成するには，`JavaScript`のパッケージマネージャである`Yarn`もインストールしておく必要があります

```
brew install yarn
```

- アプリを作成する際などに権限エラーが発生するのを避けるため，次も実行しておきましょう
  - `whoami`は自分のユーザー名を表示するコマンドです

```
sudo chown -R `whoami`:admin /usr/local/bin
```

- ターミナルを再起動してから次に進んで下さい

#### 3.2.2 動作確認(Rails 6)

これで最低限の準備ができました。Railsのアプリを作成できるか確認しましょう。

ターミナルで「作業ディレクトリ」まで移動した上で，次のコマンドを実行しましょう。
（「この記事では，`デスクトップ` を「作業ディレクトリ」として記載します）

```
cd ~/desktop
rails new rails6_app
```

サーバーを起動して動作確認をしてみましょう。

```
cd rails6_app
rails s
```

ブラウザから，`http://localhost:3000/`のURLにアクセスして下さい。

「Yay! You're on Rails!」が表示されればOKです。

#### 3.2.2 動作確認(Rails 5)

`Rails`のバージョン5系のアプリが作成できるかどうかも確かめましょう。

例えば，バージョン`5.2.4.3`のアプリを作成したい場合は，次のコマンドを実行しましょう。

```
cd ~/desktop
rails _5.2.4.3_ new rails5_app
```

サーバーを起動して動作確認をしてみましょう。

```
cd rails5_app
rails s
```

#### 3.2.3 PostgreSQLの導入

アプリを作成する際，特に指定しなければデータベースが`SQ Lite3`になります。

テストアプリを作成される場合は問題ありませんが，ポートフォリオを作成するような場合に使用することはお勧めできません。

データベースは`MySQL`か`PostgreSQL`を指定するべきです。

`MySQL`は環境構築難易度が高く，その後もエラーが起きやすいです。また，最初のデプロイ先として利用するHerokuのデフォルトデータベースが`PostgreSQL`であることを踏まえ，初心者の方には`PostgreSQL`をお勧めしております。

データベースに`PostgreSQL`を指定してRailsアプリを作成するには，先に`PostgreSQL`をインストールし，起動しておく必要があります。

- 次の２つのコマンドを実行すれば準備が完了します

```
brew install postgresql
brew services start postgresql
```

- データベースを`PostgreSQL`に指定してアプリを作成できるか試してみましょう
  - 最後に`-d postgresql`を追加することで，データベースを`PostgreSQL`に指定できます

```
cd ~/desktop
rails new rails6_psql_app -d postgresql
```

動作確認のため，`scaffold`コマンドでメッセージ投稿機能を付けましょう。

```
cd rails6_psql_app
rails g scaffold Message content:string
```

データベースを作成し，マイグレーションを行った上で，サーバーを起動して動作確認をしてみましょう。

```
rails db:create
rails db:migrate
rails s
```

ブラウザから，`http://localhost:3000/messages`のURLにアクセスして下さい。

メッセージ投稿機能が付いています。

新規投稿・編集・削除ができるか確かめてみて下さい。

#### 3.2.4 MySQLの導入

「数日かけてもエラーを解決できない……」という方をよく見かけます。MySQLの導入は必須ではありませんので，エラーを解決できない場合は後回しにして構いません。

- ターミナルから次を実行して下さい
  - MySQLの最新であるバージョン8系はお勧めできません。バージョン5.7を入れましょう。

```
brew install mysql@5.7
brew services start mysql@5.7
brew link mysql@5.7 --force
```

- パスを通す作業ですので，「2.2.2」同様，使用している`シェル`によって最後の部分が変わります。

```
# bashの場合
echo 'export PATH=""/usr/local/opt/mysql@5.7/bin:$PATH""' >> ~/.bash_profile
source ~/.bash_profile

# zshの場合
echo 'export PATH=""/usr/local/opt/mysql@5.7/bin:$PATH""' >> ~/.zshrc
source ~/.zshrc
```

- さらに，次を実行すれば準備が完了です

```
bundle config --global build.mysql2 ""--with-ldflags=-L/usr/local/opt/openssl/lib""
```

- データベースを`MySQL`に指定してアプリを作成できるか試してみましょう
  - 最後に`-d mysql`を追加することで，データベースを`MySQL`に指定できます

```
cd ~/desktop
rails new rails6_mysql_app -d mysql
```

動作確認のため，`scaffold`コマンドでメッセージ投稿機能を付けましょう。

```
cd rails6_mysql_app
rails g scaffold Message content:string
```

データベースを作成し，マイグレーションを行った上で，サーバーを起動して動作確認をしてみましょう。

```
rails db:create
rails db:migrate
rails s
```

ブラウザから，`http://localhost:3000/messages`のURLにアクセスして下さい。

メッセージ投稿機能が付いています。

新規投稿・編集・削除ができるか確かめてみて下さい。"
Basic,Ruby on Rails 環境構築手順（Windows版）,"WindowsではRuby on Railsの開発環境を構築する方法はいくつかあるのですが、今回はWSL（Windows Subsystem for Linux）という機能を使用してRuby on Rails 開発環境を構築してみます。

## なぜWSLを使用するのか？

最初になぜWSLというあまり聞きなれない機能を使用するのかを解説します。
それはRubyの環境として一般的に利用されるLinuxの環境に近づける為です。

逆にいうと、Webアプリの開発でMacがお勧めされる理由はMacOSがLinuxにかなり似ている環境だからなんですね。
似てるというのはどういう事かというと開発で利用するコマンド（$cd とか $ls とか）がほぼ同じなんですね。

それと引き換え、Windowsはコマンドプロンプトで使用するコマンドが少しMacOSやLinuxと違います。
なので、MacやLinux向けに解説されている書籍や記事を読むと同じコマンドがないので、同じようなことをする為のコマンドを探したりする手間がかかります、これがWebアプリ開発でWindowsが嫌われる理由です。

ということで、WSLという機能をなぜ利用するかというとWindowsでもLinuxを使えるようになるからです。
WSLを使用してLinuxが使えるようになるとMacOSとほぼ同じ手順で開発できるようになります。

今回は以下の様な環境を構築していきます。

    1. WSLを使用してWindowsでLinuxを利用できるようにする。
    2. Macの標準的なパッケージマネージャーのHomebrewをインストールする。
    3. Rubyのバージョン管理ツールのrbenvをインストールする。
    4. rbenvを利用してrubyをインストールする。
    5. Ruby On Rails環境を構築する → ここまででとりあえずOK！
    6. DatabaseのPostgreSQLをインストールする。
    7. DatabaseのMySQLをインストールする。


また、今回は前提条件として以下の環境であることが必要です。


    * OS：Windows10
    * メモリ：8G 以上
    * HDD：残り10G 以上



## 1.WSLを使用してWindowsでLinuxを利用できるようにする。

### 1.1. WSLの有効化

まずは、WSL機能を有効化します。
Windowsのメニューにある検索ボックスに『powershell』と入力すると、Windows Poershellアプリが表示されるので、『管理者として実行する』をクリックします。
※右クリックから管理者として実行でも大丈夫です。

![IMG](https://gyakuten-app.s3-ap-northeast-1.amazonaws.com/texts/env_win/rubybuildwin-01.png)


Powershellが起動するので、以下のコマンドを入力します。


```
Enable-WindowsOptionalFeature -Online -FeatureName Microsoft-Windows-Subsystem-Linux
```

これを実行するとWSLが有効になります。

実行後に「この操作を完了するために、今すぐコンピューターを再起動しますか？」と表示されますので「Y」もしくは「Yes」と入力して、再起動を行ってください。
※既に有効な場合は再起動は起きないのでそのまま進めて下さい。

![IMG](https://gyakuten-app.s3-ap-northeast-1.amazonaws.com/texts/env_win/rubybuildwin-02.png)


PCを再起動後にWSLが有効になったか確認してみましょう。
再度上記の操作でpowershellを起動したら、以下のコマンドを実行して『State』という項目が『Enabled』になっていれば有効化完了です。

```
Get-WindowsOptionalFeature -Online -FeatureName Microsoft-Windows-Subsystem-Linux
```

![IMG](https://gyakuten-app.s3-ap-northeast-1.amazonaws.com/texts/env_win/rubybuildwin-03.png)

### 1.2. Microsoft storeからUbuntuをインストールする。

WSLを有効化したら、実際に動作させるLinuxをインストールします。
今回はUbuntuというLinux系のOSを使用します。

Windowsのメニューにある検索ボックスに『microsoft store』と入力すると、Microsoft Storeアプリが表示されるのでクリックします。
そうするとMicrosoft Storeが起動します。

![IMG](https://gyakuten-app.s3-ap-northeast-1.amazonaws.com/texts/env_win/rubybuildwin-04.png)


Microsoft Storeが起動したら、検索窓に『linux』と入力してください。
そうするといくつかWSLで利用できるアプリが表示されます。
今回は『Ubuntu 18.04 LTS』※を利用しますのでクリックします。
※もし『Ubuntu 18.04 LTS』が見つからない場合は『Ubuntu』を使用しましょう。


![IMG](https://gyakuten-app.s3-ap-northeast-1.amazonaws.com/texts/env_win/rubybuildwin-05.png)


『Ubuntu 18.04 LTS』をクリックすると詳細ページに遷移するので『インストール』ボタンをクリックしてインストールしましょう。
インストールが完了すると『インストール』ボタンが『起動』ボタンに変わるのでクリックして起動しましょう。

![IMG](https://gyakuten-app.s3-ap-northeast-1.amazonaws.com/texts/env_win/rubybuildwin-06.png)


### 1.3.『Ubuntu 18.04 LTS』の初期設定

『Ubuntu 18.04 LTS』をインストールして、起動したら初期設定をしていきましょう。
暫く『Installing, this may take a few minutes...』と表示されるので待ちます。

![IMG](https://gyakuten-app.s3-ap-northeast-1.amazonaws.com/texts/env_win/rubybuildwin-07.png)

#### 1.3.1 ユーザー名とパスワード設定

暫く待っているとユーザー名とパスワードを入力する初期設定画面が表示されるので、任意のユーザー名とパスワードを入力します。

![IMG](https://gyakuten-app.s3-ap-northeast-1.amazonaws.com/texts/env_win/rubybuildwin-08.png)

```
Enter new UNIX username: user1   # ← 任意のユーザー名を入力
Enter new UNIX password:         # ← 任意のパスワードを入力
Retype new UNIX password:        # ← パスワードを再度入力
passwd: password updated successfully
Installation successful!
To run a command as administrator (user ""root""), use ""sudo <command>"".
See ""man sudo_root"" for details.
```

※私はrodとユーザー名を入れてみたので、皆さんは好きなユーザー名を入れてください。

これでインストールと初期設定完了です。
ユーザー名とパスワードはこの環境を使う上でずっと必要になるので絶対に忘れないでください。

### 1.3.2. 最新版にアップデートする

インストールしたらUbuntuを最新版にします。
以下のコマンドを実行してパッケージを最新に更新します。
『apt』はパッケージ管理コマンド、『sudo』は管理者(root)権限を利用するコマンドです。

```
sudo apt update -y && sudo apt dist-upgrade -y
```

sudoを実行しようとするとroot権限のパスワードを求められるので、最初に設定したパスワードを入力します。

### 1.3.3. 日本語環境設定をする

次に日本語の設定にしておくと扱いやすいので日本語設定をしておきましょう。

以下のコマンドでタイムゾーン（時刻設定）を変更します。
実行すると青い画面が現れてゾーンの設定ができますので 『Asia → Tokyo』と選択しましょう。

```
sudo dpkg-reconfigure tzdata
```

次にロケール（言語）を設定します。
以下のコマンドを実行してください。

```
sudo apt install locales
sudo apt install -y language-pack-ja
sudo update-locale LANG=ja_JP.UTF-8
```

最後にman(マニュアル)も日本語版を入れておきましょう。
以下のコマンドを実行してください。

```
sudo apt install -y man manpages-ja manpages-ja-dev
```

これでWSLの初期設定は完了です。

### 1.4. WSLのファイルの場所

WSLはWindows上で動作しています。
なので、WSL上のファイルはWindowsからも操作することができます。

ではそれを確認してみましょう。
まずはWSL上で今自分がどのディレクトリにいるのかを確認してみましょう。

```
pwd
```

上記のコマンドを打つと恐らく /home/[ユーザー名] と表示されると思います。これを覚えておいてください。

そして、今度はWindowsメニューからフォルダのアイコンをクリックすると『エクスプローラー』が開きます。
エクスプローラーは普段ファイルとかを探している画面です。

ここの上の窓に『\\\\wsl$』と入力してEnterボタンを押してください。
そうすると、『Ubuntu-18.04』というフォルダが見えていると思います。
これがWSLのファイルです。

![IMG](https://gyakuten-app.s3-ap-northeast-1.amazonaws.com/texts/env_win/rubybuildwin-09.png)


そこから、さきほどpwdコマンドで調べたパスに移動してみましょう。
\\\\wsl$\Ubuntu-18.04\home\\[ユーザー名] と進んでみてください。
ここが先ほどWSLの中でいた場所になります。

では、本当にそうなのかを確認してみましょう。
WSLの画面の方で、以下のコマンドを実行してみてください。

```
touch test.txt
```

そして、lsコマンドでファイルがあるかを見てみましょう。

```
ls
```

そうすると、test.txt というのが表示されると思います。

今度はWindowsのエクスプローラーで見てみましょう。
画面を更新するために更新ボタンを押すと、test.txtが表示されたと思います。

![IMG](https://gyakuten-app.s3-ap-northeast-1.amazonaws.com/texts/env_win/rubybuildwin-10.png)


今度はWindowsのエクスプローラーでtest.txtを削除してみましょう。
text.txtを右クリックして削除をします、そうするとエクスプローラーからtext.txtが消えましたね。
そして、WSLからlsコマンドを実行してみるとtext.txtが表示されなくなったはずです。
これでWSL上のファイルがWindowsでも操作できることがわかりました。

### 1.5. ショートカットを作成

このフォルダは今後作業を進める上で良く使用するのでショートカットを設置しましょう。
このフォルダの左上にあるフォルダのアイコンをそのままデスクトップにドラック&ドロップしてください。
これでいつでもこのフォルダに移動できるようになりました。

![IMG](https://gyakuten-app.s3-ap-northeast-1.amazonaws.com/texts/env_win/rubybuildwin-11.png)



### 1.6. WSLの起動と終了

最後に、WSLのUbuntuを終了する方法と、起動する方法です。
WSLの環境を終了する時は以下の終了コマンドを実行してください。

```
exit
```

WSLの環境を起動したい場合は、Windowsのメニューにある検索ボックスに『ubuntu』と入力すると、『Ubuntu 18.04 LTS』アプリが表示されるのでクリックするとWSL環境が起動します。


## 2. Macの標準的なパッケージマネージャーのHomebrewをインストールする。

つぎはMacで標準的に使用されるパッケージマネージャーのHomebrewを入れていきましょう。
HomebrewをいれることでMacの人とほぼ同じ環境で作業を進めることが出来るようになります。

インストールは以下の公式の手順に沿っていきます。

[https://docs.brew.sh/Homebrew-on-Linux](https://docs.brew.sh/Homebrew-on-Linux)

まずは最新に更新します。
パスワードを聞かれるので入力してください。

```
sudo apt-get update && sudo apt upgrade
```

次に、Homebrewをインストールするのに必要な依存関係をインストールします。
これでgitも使えるようになります。

```
sudo apt-get install -y build-essential curl file git
```

次にHomebrew本体のインストールをします。
このコマンドの時はsudoはしないように気を付けてください。

```
sh -c ""$(curl -fsSL https://raw.githubusercontent.com/Linuxbrew/install/master/install.sh)""
```

途中でEnterを押すことを求められるので押します。

次に、インストールが終わったらHomebrewをbrewコマンドとして利用できるようにPATHを通します。

```
test -d ~/.linuxbrew && eval $(~/.linuxbrew/bin/brew shellenv)
test -d /home/linuxbrew/.linuxbrew && eval $(/home/linuxbrew/.linuxbrew/bin/brew shellenv)
```

設定出来たら、このままだとWSLを再起動すると設定が消えてしますので/.profileファイルに設定を追記します。

```
echo ""eval $($(brew --prefix)/bin/brew shellenv)"" >>~/.profile
```

これで、設定完了です。
試しにbrewを使用してパッケージをインストールしてみましょう。
slコマンドという、lsのタイポジョークコマンドをインストールしてみます。

```
brew install sl
```

インストールが成功したら、以下のコマンドを実行してみて下さい。
SLが画面を駆け抜けたら成功です。

```
sl
```
![IMG](https://gyakuten-app.s3-ap-northeast-1.amazonaws.com/texts/env_win/rubybuildwin-12.png)

## 3. Rubyのバージョン管理ツールのrbenvをインストールする。

ここまで準備が出来れば、Macの開発環境構築手順とはほぼ変わらなくなってきます。
興味があったらMac版の手順と比べてみてくださいね。

[https://arcane-gorge-21903.herokuapp.com/texts/208](https://arcane-gorge-21903.herokuapp.com/texts/208)

Rubyのバージョン管理ツールのrbenvをインストールしていきます。
rbenvは、異なるバージョンのRubyの管理をしてくれます。
バージョンを簡単に変えることが出来ると、複数のプロジェクトを担当する際にRubyのバージョンを切り替えて開発が出来るので便利です。

```
brew install rbenv ruby-build
```

次に、rbenvをコマンドから使えるようにPATHを通します。

```
echo 'export PATH=""~/.rbenv/shims:/usr/local/bin:$PATH""' >> ~/.profile
echo 'eval ""$(rbenv init -)""' >> ~/.profile
source ~/.profile
```

## 4. rbenvを利用してRubyをインストールする。

### 4.1. Rubyをインストールする

ここからRubyをインストールしていきますが、先に必要な依存関係をインストールしておきます。
以下を実行してインストールしてください。

```
sudo apt-get install -y autoconf bison build-essential libssl-dev libyaml-dev libreadline-dev zlib1g-dev libncurses5-dev libffi-dev libgdbm-dev libsqlite3-dev
```

それでは、rbenvを利用してRubyのインストールを行いましょう。

最新のRubyのバージョンを確認しましょう。
次のコマンドを実行すると，バージョンの新しい方から５つ分確認できます。

```
rbenv install -l | grep -v - | tail -5
```

基本的には最新のバージョンがよいですが，2.7.0のように，大きなアップデート後の最初のバージョンはバグが含まれる危険性があるため避けましょう。
バージョン 2.6.6 をインストールする場合は，次を実行します。

```
rbenv install 2.6.6
```

インストールが完了したら，インストールできているかどうかの確認のため，WSLに次のコマンドを入力して下さい。指定したバージョンが含まれていればOKです。

```
rbenv versions
```

バージョン 2.6.6 を使用する場合は次を実行して下さい。

```
rbenv global 2.6.6
```

次を実行して下さい。指定したバージョンが表示されればOKです。

```
ruby -v
```

## 4.2 Rubyのプログラムを実行してみる

Rubyがインストールできたので、簡単なRubyのプログラムを実行してみましょう。
まずはhomeディレクトリにruby用のディレクトリを作成してプログラムファイルを設置してみましょう。

```
mkdir ruby
cd ruby
touch hello.rb
```

WSLのインストール時に作成したショートカットを利用してフォルダを見てみるとruby/hello.rb というファイルが出来ていると思います。
そのファイルをWindowsで開いて、以下のプログラムを書いて保存してみましょう。

```
puts ""Hello, world!""
```

保存ができたら、WSLの画面の方から実行してみましょう。

```
ruby hello.rb
```

『Hello, world!』と表示されたと思います。
これで、Windows側で編集したプログラムをWSL上で実行することができました。

## 5. Ruby On Rails環境を構築する

### 5.1. Bundler,Rails,Yarnのインストール

BundlerとRailsをインストールしましょう
Railsはバージョン5系と6系をインストールしておきましょう
バージョンアップ情報はこちらが分かりやすいと思います
WSLを起動し，次を実行して下さい。

```
gem install bundler
gem install rails:5.2.4.1
gem install rails
```

Rails 6のアプリを作成するには，JavaScriptのパッケージマネージャであるYarnもインストールしておく必要があります

```
brew install yarn
```

アプリを作成する際などに権限エラーが発生するのを避けるため，次も実行しておきましょう
whoamiは自分のユーザー名を表示するコマンドです

```
sudo chown -R `whoami`:admin /usr/local/bin
```

### 動作確認(Rails 6)

これで最低限の準備ができました。Railsのアプリを作成できるか確認しましょう。
ターミナルで作業ディレクトリまで移動した上で，次のコマンドを実行しましょう。

```
rails new rails6_app
```

サーバーを起動して動作確認をしてみましょう。

```
cd rails6_app
rails s
```

ブラウザから，[http://localhost:3000/](http://localhost:3000/) のURLにアクセスして下さい。
「Yay! You're on Rails!」が表示されればOKです。
停止する時は『Ctrl + C』で停止します。

![IMG](https://gyakuten-app.s3-ap-northeast-1.amazonaws.com/texts/env_win/rubybuildwin-13.png)



### 動作確認(Rails 5)

Railsのバージョン5系のアプリが作成できるかどうかも確かめましょう。
例えば，バージョン5.2.4.1のアプリを作成したい場合は，次のコマンドを実行しましょう。

```
rails _5.2.4.1_ new rails5_app
```

サーバーを起動して動作確認をしてみましょう。

```
cd rails5_app
rails s
```

ブラウザから，[http://localhost:3000/](http://localhost:3000/) のURLにアクセスして下さい。
「Yay! You're on Rails!」が表示されればOKです。
停止する時は『Ctrl + C』で停止します。

![IMG](https://gyakuten-app.s3-ap-northeast-1.amazonaws.com/texts/env_win/rubybuildwin-14.png)

## 6. DatabaseのPostgreSQLをインストールする。

アプリを作成する際，特に指定しなければデータベースがSQ Lite3になります。
テストアプリを作成される場合は問題ありませんが，ポートフォリオを作成するような場合に使用することはお勧めできません。
データベースはMySQLかPostgreSQLを指定するべきです。

MySQLは環境構築難易度が高く，その後もエラーが起きやすいです。また，最初のデプロイ先として利用するHerokuのデフォルトデータベースがPostgreSQLであることを踏まえ，初心者の方にはPostgreSQLをお勧めしております。

データベースにPostgreSQLを指定してRailsアプリを作成するには，先にPostgreSQLをインストールし，起動しておく必要があります。

次ののコマンドを実行してインストールをします。

```
brew install postgresql
```

以下のコメントが出ているので登録します。

```
echo 'export PATH=""/home/linuxbrew/.linuxbrew/opt/openssl@1.1/bin:$PATH""' >> ~/.profile
source ~/.profile
```
```
export LDFLAGS=""-L/home/linuxbrew/.linuxbrew/opt/openssl@1.1/lib""
export CPPFLAGS=""-I/home/linuxbrew/.linuxbrew/opt/openssl@1.1/include""
```

```
export PKG_CONFIG_PATH=""/home/linuxbrew/.linuxbrew/opt/openssl@1.1/lib/pkgconfig""
```

以下のコマンドを実行してpostgresを起動します。


```
pg_ctl -D /home/linuxbrew/.linuxbrew/var/postgres start
```

データベースをPostgreSQLに指定してアプリを作成できるか試してみましょう
最後に-d postgresqlを追加することで，データベースをPostgreSQLに指定できます

```
rails new rails6_psql_app -d postgresql
```

動作確認のため，scaffoldコマンドでメッセージ投稿機能を付けましょう。

```
cd rails6_psql_app
rails g scaffold Message content:string
```

データベースを作成し，マイグレーションを行った上で，サーバーを起動して動作確認をしてみましょう。

```
rails db:create
rails db:migrate
rails s
```

ブラウザから，[http://localhost:3000/messages](http://localhost:3000/messages)のURLにアクセスして下さい。

メッセージ投稿機能が付いています。
新規投稿・編集・削除ができるか確かめてみて下さい。
停止する時は『Ctrl + C』で停止します。

![IMG](https://gyakuten-app.s3-ap-northeast-1.amazonaws.com/texts/env_win/rubybuildwin-15.png)

## 6. DatabaseのMySQLの導入をインストールする。

「数日かけてもエラーを解決できない……」という方をよく見かけます。MySQLの導入は必須ではありませんので，エラーを解決できない場合は後回しにして構いません。

WSLから次を実行して下さい
MySQLの最新であるバージョン8系はお勧めできません。バージョン5.7を入れましょう。

```
brew install mysql@5.7
brew link mysql@5.7 --force
```

PATHを通します。

```
echo 'export PATH=""/home/linuxbrew/.linuxbrew/opt/mysql@5.7/bin:$PATH""' >> ~/.profile
source ~/.profile
```
```
export LDFLAGS=""-L/home/linuxbrew/.linuxbrew/opt/mysql@5.7/lib""
export CPPFLAGS=""-I/home/linuxbrew/.linuxbrew/opt/mysql@5.7/include""
```

以下コマンドでMySQLを起動してみましよう。


```
mysql.server start
```

さらに，次を実行すれば準備が完了です

```
bundle config --global build.mysql2 ""--with-ldflags=-L/usr/local/opt/openssl/lib""
```

データベースをMySQLに指定してアプリを作成できるか試してみましょう
最後に-d mysqlを追加することで，データベースをMySQLに指定できます

```
rails new rails6_mysql_app -d mysql
```

動作確認のため，scaffoldコマンドでメッセージ投稿機能を付けましょう。


```
cd rails6_mysql_app
rails g scaffold Message content:string
```

データベースを作成し，マイグレーションを行った上で，サーバーを起動して動作確認をしてみましょう。

```
rails db:create
rails db:migrate
rails s
```

ブラウザから，[http://localhost:3000/messages](http://localhost:3000/messages) のURLにアクセスして下さい。
停止する時は『Ctrl + C』で停止します。

![IMG](https://gyakuten-app.s3-ap-northeast-1.amazonaws.com/texts/env_win/rubybuildwin-16.png)

## 補足

本手順で環境構築された方から受けた質問の対策についてまとめています。
以下の症状が出た場合にはまずはこちらの対処をしてみてください。

```
rails new や migrate をした際に LoadError: libffi.so.7: とエラーが出る
```

こちらは Homebrew のパスが通っていないことが原因です。
以下のコマンドで起動時に共有ライブラリのパスを追加するようにしましょう。

```
echo 'export LD_LIBRARY_PATH=""$LD_LIBRARY_PATH:/home/linuxbrew/.linuxbrew/lib""' >> ~/.profile
source ~/.profile
```"
Basic,環境構築（VSCode）,"プログラミングをする上で必須となるのが「コードエディタ」です。参考までに現在有名なエディタを列挙します。

- [Visual Studio Code(VS Code)](https://code.visualstudio.com/download)
- [Atom](https://atom.io/)
- [Sublime Text(有料)](https://www.sublimetext.com/)
- [RubyMine(有料)](https://www.jetbrains.com/ja-jp/ruby/)

2020年5月現在において，最もお勧めできるのは，`VS Code`です。
無料でありながら，動作が軽快かつ拡張機能が豊富なエディタで，使用率も1位です。

以下，`VS Code`をインストールする前提で進めていきます。

## 1. VS Codeのインストール・初期設定

### 1.1 VS Codeのインストール

- 次のリンクから`VS Code`のMac版をダウンロード
  - [https://code.visualstudio.com/download](https://code.visualstudio.com/download)

- 右下のDockにアイコンが追加されるのでそれをクリック

- ダウンロードフォルダが表示されたら，`Visual Studio Code`を「アプリケーション」フォルダに移動し，「アプリケーション」フォルダから開いてください。

「悪質なソフトウェアかどうかをappleでは確認できないため……」のような表示が出た場合は，アプリをダブルクリックするのではなく，右クリック（トラックパッドなら2本指でクリック）で出てくるメニューの「開く」をクリックして，「開く」をクリックして下さい。

### 1.2 VS Codeの日本語化

初期設定は英語です。日本語で使用されたい場合は，以下の設定を行って下さい。

- 一番左に５つあるアイコン一番下の`Extensions`をクリックし，「Japanese」で検索

- 一番上の「Japanese Language Pack for Visual Studio Code」を選択し，`Install`ボタンをクリック

- 右下に現れる`Restart Now`ボタンをクリック

- VS Codeが再起動され，日本語化されます

### 1.3 パスを通す

以下の作業を行うと，`ターミナル`から`VS Code`を簡単に開くことができるようになります。
とても便利なので是非設定しておきましょう。

- 左下の歯車マークをクリックし，`コマンドパレット`をクリック

- `shell`と入力して出てくる「シェルコマンド: PATH内に 'code' コマンドをインストールします」をクリック

- パスワードを聞かれた場合は，Macのパスワード（macの初期設定で決めたパスワード）を入力してEnterキーを押して下さい
  - 入力しても表示が変わりませんが入力できています

以上で設定は終了です。動作確認をしてみましょう。

- まず，`VS Code`を閉じて下さい

- 「ターミナル」を起動して下さい
  - 「Spotlight検索」で「terminal」もしくは「たーみなる」と入力すれば出てきます

- 「ターミナル」で `code` と入力して実行（Enterキーを押す）

- `VS Code`が起動すればOKです

（`code .`を実行すると，カレントディレクトリを `VS code` で開くことができます）

### 1.4 自動保存・インデント幅の変更

「保存のし忘れ」でコードが反映されないケースがよくあります。
`VS Code`には，自動で保存する設定がありますので，設定をお勧めします。

また，今後の学習で使用するRubyファイルなどのインデント幅は半角2マスが一般的ですので，こちらも変更しておきましょう。

まず，`command(⌘) + ,` で設定ページを開いて下さい。
（左下の歯車ボタンをクリックし，「設定」をクリックしてもOKです）

- 検索窓で「autosave」と入力
- 「Auto Save」の項目の「Off」を「OnFocusChange」に変更

- 検索窓で「tabsize」と入力
- 「Tab Size」の項目を「2」に変更

### 1.5 【参考】設定のカスタマイズ方法

`VS Code`の設定を変更する方法は２種類あります。

- 「設定」から変更する
  - 左下の「歯車」マークに「設定」があります
  - ショートカットキーは，`command(⌘) + ,`

- 設定ファイルを直接編集する

追加した設定は`settings.json`に保存されており，直接このファイルを書き換えることで設定を変更することが可能です。

コマンドパレット（`command(⌘) + shift(⇧) + P`）で「json」で検索し，「基本設定: 設定（JSON）を開く」を選択すると，`settings.json`を開くことができます。

（一番下の行を除き）各設定の末尾に`,`が抜けているとエラーが出ますので注意して下さい。

## 2. VS Codeの機能追加

### 2.1. 拡張機能の追加

VSCodeには，`1.2` で使用した日本語化の拡張機能以外にも，入力支援機能，入力補完機能，エラーチェック機能など，様々なものがあります。

一番左に５つあるアイコン一番下の`Extensions`をクリックし，必要な拡張機能を検索してインストールしましょう。

こだわりがなければ，以下をインストールしておくことをお勧めします。

#### HTML&CSS

- [HTML Snippets](https://marketplace.visualstudio.com/items?itemName=abusaidm.html-snippets)
  - HTMLタグの補完機能

- [HTMLHint](https://marketplace.visualstudio.com/items?itemName=mkaufman.HTMLHint)
  - HTML構文チェッカー

- [Auto Complete Tag](https://marketplace.visualstudio.com/items?itemName=formulahendry.auto-complete-tag)
  - `Auto Rename Tag` と `Auto Close Tag` のセット
  - (Auto Rename Tag) 開始タグを変更すると終了タグも編集
  - (Auto Close Tag) 閉じタグの補完

- [Bracket Pair Colorizer 2](https://marketplace.visualstudio.com/items?itemName=CoenraadS.bracket-pair-colorizer-2)
  - 括弧の種類や階層ごとに色が変化

- [HTML CSS Support](https://marketplace.visualstudio.com/items?itemName=ecmel.vscode-html-css)
  - CSS側で作ったクラス名の補完機能

- [CSS Peek](https://marketplace.visualstudio.com/items?itemName=pranaygp.vscode-css-peek)
  - CSS の class の定義元へジャンプできる機能
  - class 上で `F12` もしくは `command` キーを押しながら class をクリック

- [open in browser](https://marketplace.visualstudio.com/items?itemName=techer.open-in-browser)
  - HTMLファイルを開いているとき `option(⌥) + B` でそのファイルをブラウザで開けるようになります

- [Live Server](https://marketplace.visualstudio.com/items?itemName=ritwickdey.LiveServer)
  - HTMLファイルを開いている状態で，下にあるステータスバーの「Go Live」をクリックすると，ブラウザでそのファイルを開き，しかもファイルの更新時に自動反映されるようになります

#### Sass

- [Live Sass Compiler](https://marketplace.visualstudio.com/items?itemName=ritwickdey.live-sass)
  - 下にあるステータスバーの「Watch Sass」をクリックしておくと，Sassファイルを保存した際に自動的にCSSファイルが作成・更新されるようになります

#### Git

- [GitLens](https://marketplace.visualstudio.com/items?itemName=eamodio.gitlens)
  - コミット履歴・ブランチ間の差分などを確認できる便利なツールです

#### Ruby, Ruby on Rails

事前に `Ruby on Rails` の環境構築までを済ませて下さい

- [Ruby](https://marketplace.visualstudio.com/items?itemName=rebornix.Ruby)

- [VSCode Ruby](https://marketplace.visualstudio.com/items?itemName=wingrunr21.vscode-ruby)
  - シンタックスハイライト

- [Rails](https://marketplace.visualstudio.com/items?itemName=bung87.rails)

- [Ruby Solargraph](https://marketplace.visualstudio.com/items?itemName=castwide.solargraph)
  - Rubyの補完機能

有効化するには，「ホームディレクトリ」で，次をターミナルから実行する必要があります。

```
gem install solargraph
```

- [zenkaku](https://marketplace.visualstudio.com/items?itemName=mosapride.zenkaku)
  - 全角スペースを「灰色」で表示するようになります

有効化するため，次をターミナルから実行して下さい。

```
code ~/.vscode/extensions/mosapride.zenkaku-0.0.3/extension.js
```
開かれたファイルを次のように修正して，VSCodeを再起動してください。

```js
// 5行目の false を true に修正
var enabled = true;

// 色も変更したい場合は11〜18行目を修正。緑色にしておくと分かりやすいでしょう。
    light: {
        backgroundColor: 'rgba(100, 200, 100, 0.7)',
        borderColor: 'rgba(100, 100, 200, 1)'
    },
    dark: {
        backgroundColor: 'rgba(100, 200, 100, 0.7)',
        borderColor: 'rgba(100, 200, 100, 1)'
    }
```

- [endwise](https://marketplace.visualstudio.com/items?itemName=kaiwood.endwise)
  - `end` が自動補完されます

### 2.2. フォーマッタの追加

#### HTML, js など

次のいずれかをインストールするとよいでしょう。（両方インストールしても問題はありません）

- [Prettier](https://marketplace.visualstudio.com/items?itemName=esbenp.prettier-vscode)

- [Beautify](https://marketplace.visualstudio.com/items?itemName=HookyQR.beautify)

インストール後に，`shift(⇧) + option(⌥) + F` でコード整形ができます。
（一部の各拡張子は初回のみ，使用するフォーマッタを選択する必要があります）

#### erb

- [ERB Formatter/Beautify](https://marketplace.visualstudio.com/items?itemName=aliariff.vscode-erb-beautify)

まずは「ホームディレクトリ」で，次をターミナルから実行しましょう。

```
gem install htmlbeautifier
```

- `settings.json` に次を追加（`1.5 【参考】設定のカスタマイズ方法` を参照）
    - ついでに，HTMLで使用できる補完機能も付けておきます

```settings.json
  ""emmet.includeLanguages"": {
    ""erb"": ""html""
  },
  ""files.associations"": {
    ""*.erb"": ""erb""
  },
```

#### Ruby

`.rb` ファイルでフォーマッタが使えるようにしましょう。

初心者には無設定でも無難なフォーマットができる `rufo` がお勧めです。

`RuboCop` は機能が豊富ですが，初期設定では「配列を%記法に変えてしまう」など，何かと混乱を招く恐れがあります。自分で設定を変更できるレベルに至ってからの使用をお勧めします。

拡張機能 `ruby` が入っているならば，以下の設定で `rufo` を導入できます。

- 「ホームディレクトリ」で，次をターミナルから実行

```
gem install rufo
```

- `settings.json` に次を追加（`1.6 【参考】設定のカスタマイズ方法` を参照）

```settings.json
  ""ruby.intellisense"": ""rubyLocate"",
  ""ruby.useLanguageServer"": true,
  ""ruby.lint"": {
    ""rufo"": true
  },
  ""ruby.format"": ""rufo"",
```

#### 自動フォーマット

最後に，保存時に自動でフォーマットされるようにしておきましょう。

まず，`command(⌘) + ,` で設定ページを開いて下さい。

- 検索窓で「format」と入力
- 「Format On Save」の項目にチェックを入れる
- 「Format On Paste」の項目にもチェックを入れておくことをお勧めします
    - ペースト時にも自動フォーマットされます

### 参考

デフォルト状態から上記設定を行った場合の `settings.json` を記載します。

エラーが発生して解消方法が分からない場合は，以下に置き換えた上で各自の設定を追加して下さい。

```settings.json
{
    ""files.encoding"": ""utf8"",
    ""files.autoSave"": ""onFocusChange"",
    ""editor.tabSize"": 2,
    ""cSpell.enableFiletypes"": [
        ""css"",
        ""erb"",
        ""html"",
        ""javascript"",
        ""javascriptreact"",
        ""json"",
        ""less"",
        ""markdown"",
        ""plaintext"",
        ""scss"",
        ""text"",
        ""typescript"",
        ""typescriptreact"",
        ""ruby"",
        ""yaml"",
        ""yml""
    ],
    ""emmet.includeLanguages"": {
        ""erb"": ""html""
    },
    ""files.associations"": {
        ""*.erb"": ""erb""
    },
    ""ruby.intellisense"": ""rubyLocate"",
    ""ruby.useLanguageServer"": true,
    ""ruby.lint"": {
        ""rufo"": true
    },
    ""ruby.format"": ""rufo"",
    ""editor.formatOnSave"": true,
    ""editor.formatOnPaste"": true,
}
```

### 重要ショートカットキー

基本操作 | ショートカットキー
--- | ---
切り取り | command(⌘) + X
コピー | command(⌘) + C
貼り付け | command(⌘) + V
元に戻す | command(⌘) + Z
やり直し | shift(⇧) + command(⌘) + Z
すべて選択 | command(⌘) + A
行コメントの切り替え | command(⌘) + /
カーソル行を上下に移動 | option(⌥) + ↑ or ↓
カーソル行を削除 | shift(⇧) + command(⌘) + K

検索・置換 | ショートカットキー
--- | ---
ページ内検索 | command(⌘) + F
ページ内置換 | option(⌥) + command(⌘) + F
全体検索 | command(⌘) + shift(⇧) + F
ファイル検索 | command(⌘) + P

設定関連 | ショートカットキー
--- | ---
設定 | command(⌘) + ,
コマンドパレット | shift(⇧) + command(⌘) + P

- 以下は，「英数モード」にしてからショートカットキーを使用して下さい
  - コード整形はその拡張子の「コードフォーマッタ」をインストールする必要があります

他 | ショートカットキー
--- | ---
VS Code内のターミナルを開く | shift(⇧) + control(⌃) + @
コード整形 | shift(⇧) + option(⌥) + F"
Basic,Atomの便利な使い方,"`Atom`とは、フリーで使えるテキストエディタのことで、初心者向けのエディタの1つとして利用されます。

様々なパッケージが用意され、カスタマイズも簡単に行えます。

### Atomのインストール方法

「Atom」をダウンロード公式サイト [https://atom.io/](https://atom.io/) にアクセスします。

![img-atom01](https://gyakuten-app.s3-ap-northeast-1.amazonaws.com/texts/css_ad/img-atom/img-atom01.png)

「DownLoad for Mac」をクリックして、ダウンロードが始まります。

![img-atom02](https://gyakuten-app.s3-ap-northeast-1.amazonaws.com/texts/css_ad/img-atom/img-atom02.png)

zipファイルをダウンロードしたら、 解凍してAtomのアイコンが表示します。

![img-atom03](https://gyakuten-app.s3-ap-northeast-1.amazonaws.com/texts/css_ad/img-atom/img-atom03.png)

そのアイコンをアプリケーションフォルダ（またはツールバー）にドラッグ＆ドロップします。

![img-atom04](https://gyakuten-app.s3-ap-northeast-1.amazonaws.com/texts/css_ad/img-atom/img-atom04.png)

これでインストール完了です。





### Atomエディターを日本語化する方法

先ほどドラッグ&ドロップしたAtomをクリックして起動します。

起動したら、起動画面から
メニューバーにあるHelp→WelComeGuideをクリックします。

![img-atom05](https://gyakuten-app.s3-ap-northeast-1.amazonaws.com/texts/css_ad/img-atom/img-atom05.png)

すると、下記画面が出てきます。

![img-atom06](https://gyakuten-app.s3-ap-northeast-1.amazonaws.com/texts/css_ad/img-atom/img-atom06.png)

「Install a Package」をクリックします。

![img-atom07](https://gyakuten-app.s3-ap-northeast-1.amazonaws.com/texts/css_ad/img-atom/img-atom07.png)

「Open Installer」をクリックします。

![img-atom08](https://gyakuten-app.s3-ap-northeast-1.amazonaws.com/texts/css_ad/img-atom/img-atom08.png)

左側の上の方にフォームがあるのでそこに「japanese」と入力し、「Packages」をクリックします。

![img-atom09](https://gyakuten-app.s3-ap-northeast-1.amazonaws.com/texts/css_ad/img-atom/img-atom09.png)

パッケージが表示されるので、「japanese-menu」の「Install」をクリックしましょう。

![img-atom10](https://gyakuten-app.s3-ap-northeast-1.amazonaws.com/texts/css_ad/img-atom/img-atom10.png)

これで日本語化完了していますね。

## 全角、半角スペースやタブの可視化

1. ウィンドウ左上のFileを選択
2. Preferences->Editor->Show Invisiblesのチェックボックスをオン
3. 半角スペースやタブが可視化

## 便利なショートカットキー

|キー|用途|
|---|---|
|command + f|ファイル内の文字列検索・置換|
|command + shift + f|プロジェクト内の文字列検索・置換|
|commad + p|プロジェクト内のファイル検索|
|command + n|新しくファイルを開く|
|command + w|アクティブなタブを閉じる|
|command + k + w|開いているタブを全部閉じる|
|command + shift + t|閉じたタブを復活する|

# まとめ
テキストエディタの便利なパッケージやショートカットキーを使いこなすと作業が早くなります。

プログラマーとしての作業スピードを高めるためにも、テキストエディタの基本的な機能を確認してみてください。知れば知るほど、自分が楽になります。"
Basic,超便利なMarkdownの基本,"Markdownは、プログラミングのコードをまとめる上でとても役に立つものです。

普通、プログラミングを学んでいるときにノウハウをまとめるのはプログラマーなら常識なのですが、それをただテキストでまとめるだけだとめちゃくちゃ効率が悪いです。

なぜなら、コードと、そのコードに対応する説明の区別ができなくなってしまい、かえって理解するのが難しくなってしまうためです。これでは、せっかくノウハウをまとめても無駄に終わってしまいます。

例えば、Rubyのコードを以下のようにMarkdownを使わず普通にまとめてみたとしましょう。

---

ターミナルに「Hello World」を出力する

puts ""hello world""

putsは右側に書かれたもの（引数）をターミナルに出力させるためのメソッドです

---

上記のようにまとめても、どこがRubyのコードで、どこがそのコードに対する説明なのかがかなりわかりづらいです。しかし、それがMarkdownを使用すると以下のようにまとめることができます。

---
ターミナルに`Hello World`を出力する

```ruby
# puts : ターミナルに文字や数字などの情報を出力する
puts ""hello world""
```

`puts`は右側に書かれたもの（引数）をターミナルに出力させるためのメソッドです

---

どうでしょう？

かなりコードが見やすくなったのではないでしょうか？？

上記のようにプログラミングのコードを色付き（シンタックスハイライト）でまとめるには、以下のような記述をします。

---

ターミナルに\`Hello World\`を出力する

\```ruby

\# puts : ターミナルに文字や数字などの情報を出力する

puts ""hello world""

\```

\`puts\`は右側に書かれたもの（引数）をターミナルに出力させるためのメソッドです

---

このように、Markdownは特定の記号を使用することによって、プログラミングのコードを綺麗にまとめることができます。これを使用すると、爆速でノウハウをまとめられるようになるので、ぜひご活用ください。ちなみに、当サロンの教材もMarkdownを利用してまとめています。

以下に、具体的なMarkdownの記法をまとめておきます。

|記入方法|用途|
|---|---|
|#|大見出し（HTMLのH1に相当する）|
|##|中見出し（HTMLのH2に相当する）|
|###|小見出し（HTMLのH3に相当する）|
|\---|水平線（HTMLのhrに相当）|
|>引用文|引用表現にする|
|>>>引用文|改行含めた段落全体を引用表現にする|
|\`サンプルコード`|1行のコードをボーダーで囲み、背景を灰色にする|
|\`\`\` サンプルコード \`\`\`|複数行のコードをボーダーで囲み、背景を灰色にする|
|\_hoge_|文字（hogeの部分）をイタリックにする|
|\*hoge*|文字（hogeの部分）をボールドにする|
|\~hoge~|文字（hogeの部分）をストライク（取り消し線）にする|

また、上のテーブルもMarkdownで作ることができます。こちらもノウハウをまとめるためにはとても便利な記述です。上のようなテーブルを表示するときは以下のように記述します。

---

\|記入方法\|用途\|
\|\---\|---\|
\|#\|大見出し（HTMLのH1に相当する）\|
\|##\|中見出し（HTMLのH2に相当する）\|
\|###\|小見出し（HTMLのH3に相当する）\|

---

これだけでHTMLのtableタグが生成されるので、あとはそれにCSSを適用すれば自分の好きなデザインのテーブルを作成することができます。

# まとめ
テキストでプログラミングのノウハウをまとめる上で、Markdownは本当に最強です。また、Markdown で作成したコンテンツに関しては、HTML、ワードファイル、PDFに変換することができ、コンテンツの横展開につながります。

これを利用して独自のコンテンツを作成すれば、自身が復習をする際にも役立ちますし、独自教材を作るのもかなり楽になります。生産性がめちゃくちゃ高くなるので、ぜひ活用してみてください。"
Basic,現場でやったらあかんこと,"こちらは、現場でやったらあかんことをどんどん追加していきます。神里の失敗経験も書きますのでどんどん踏み台にしてください。

# Githubリポジトリのmasterにプッシュ
Githubのリポジトリであるリモートリポジトリの`master`にプッシュすると、プルリクやコードレビューをすっとばして`master`に反映させることになります。つまり、大事なプロダクトのソースコードが一瞬で書き換えられてしまうということなのでやめましょう。

これを防ぐためにも、普段のプログラミング学習から、GitとGithubを利用したバージョン管理の練習はしておいたほうがいいです。現役のプログラマーも、自身が学習した際のソースコードに関してはGithubにプッシュして管理しているので、その習慣は初心者の時から身につけているといいかと思います。

# bundle update ダメゼッタイ
gemをインストールする際、`bundle install`と`bundle update`があるのですが、`bundle update`は`Gemfile.lock`に書かれている全てのgemのバージョンを書き換えてしまいます。

そのため、バージョンによる不具合が発生してしまい、サービスが動かなくなってしまう可能性が高くなります。影響範囲がものすごく大きく、かつ、深刻なエラーにつながるので、現場では絶対にやめましょう！めっちゃ怒られます！

# わからなくても質問をしない
現場では、求められている結果を出すことが最優先です。つまり、自分が恥をかくからといって質問せず、何１つ進捗を生まないことは悪でしかありません。

確かに自分の頭で考えて動くことはとても大切です。だからと言って、それにこだわるあまり仕事が遅れてしまっては何の意味もありません。

もしかしたら質問をすることによって実際に恥をかくこともあるかもしれません。しかし、質問しなければ自分自身がまったく成長せず、進捗も遅れて現場からの信頼も失い、今よりもさらに悪い結果を招くことになります。将来リモートで働きたい人にとって、信頼を失うことは死に等しいと考えたほうがいいでしょう。

「自分で悩んで苦しい思いをするより、恥を気にせず質問したほうがよっぽどいい方向に物事が進む」ということはプログラマーにかかわらず、どの職業でも共通して言えることなので強く意識しておきましょう。プログラマーであるまえに、いちビジネスマンとして優秀であれ、ということです。"
HTML&CSS,HTML基礎,"## 初心者向けvscode拡張機能

vscodeには拡張機能といって後付けできる便利機能がたくさんあります

そこでまず本題のHTMLの各種タグの説明をする前に、拡張機能を使ってvscodeを使いやすくしておきましょう

拡張機能はネット上の[Visual Studio MarketplaceのVisual Studio Code向けの拡張機能一覧ページ](https://marketplace.visualstudio.com/)から検索をかけて選び、インストールして使うことができます

なお、拡張機能を有効化するためには、インストール後にvscodeを再起動する必要がありますのでご注意ください

初心者の方で「どんな拡張機能を入れたら良いか分からないよ」という方には以下の拡張機能を入れることをお勧めします

- 日本語化：[Japanese Language Pack](https://marketplace.visualstudio.com/items?itemName=MS-CEINTL.vscode-language-pack-ja)

vscodeの表示が日本語になります

- 括弧に色付け：[Bracket Pair Colorizer 2](https://marketplace.visualstudio.com/items?itemName=CoenraadS.bracket-pair-colorizer-2)

括弧の種類や階層ごとに色を変えられます
コード可読性が上がります

- HTMLタグ補完機能：[HTML Snippets](https://marketplace.visualstudio.com/items?itemName=abusaidm.html-snippets)

補完機能により、HTMLタグの入力が非常に簡単になります

- HTML構文チェッカー：[HTMLHint](https://marketplace.visualstudio.com/items?itemName=mkaufman.HTMLHint)

HTMLの構文に不備が生じると自動的に指摘してくれるので、エラー解消が早まります

- HTMLプレビュー：[open in browser](https://marketplace.visualstudio.com/items?itemName=techer.open-in-browser)

選択中のHTMLファイルをコマンド一つ（[mac] option + B,  [windows] Alt + B）でブラウザで開くことできます
ただしインストール後、デフォルトブラウザを設定する必要があります

### 拡張機能インストール手順

拡張機能のひとつである`open in browser`を例に、拡張機能のインストール手順を紹介します

なお、どの拡張機能も手順は同じです

１．上記の`open in browser`へのリンクからインストールページへ行き、赤矢印で示された緑の「 **install** 」をクリックします

（インストールページへは[vscode拡張機能一覧ページ](https://marketplace.visualstudio.com/)から名前を検索して行くこともできます）

![インストールページ](https://gyakuten-app.s3-ap-northeast-1.amazonaws.com/texts/html/install.png)

２．画像のように問われるので、「Visual Studio Code を開く」を選択します

![vscode起動確認](https://gyakuten-app.s3-ap-northeast-1.amazonaws.com/texts/html/confirmation.JPG)

３．画面左上の緑の「 **インストール** 」をクリックします

![インストール](https://gyakuten-app.s3-ap-northeast-1.amazonaws.com/texts/html/install2.JPG)

４．インストールが終わると緑の「 **インストール** 」ボタンが青の「 **アンインストール** 」ボタンに変わりますので、ウィンドウを閉じて再度開けばインストールと有効化が完了します

![インストール後](https://gyakuten-app.s3-ap-northeast-1.amazonaws.com/texts/html/after_install.JPG)

５．インストールされ有効化された拡張機能の状況はウィンドウ左の縦に並んだアイコンの一番下の四角いアイコンをクリックすると確認できます
「有効」の下に入っていればOKです

![インストール確認](https://gyakuten-app.s3-ap-northeast-1.amazonaws.com/texts/html/install_confirmation.JPG)

注：`open in browser`はインストール後にデフォルトブラウザを設定する必要があります
このように拡張機能によってはインストール後に設定する必要があるので注意してください

<dl>
    <dt>デフォルトブラウザの設定手順</dt>
        <dd>1.ウィンドウ左上の「ファイル」をクリック</dd>
        <dd>2.開いたタブの中の「基本設定」をクリック</dd>
        <dd>3.開いたタブの中の「設定」をクリック</dd>
        <dd>4.「設定」が開くので下の方の「拡張機能」をクリック</dd>
        <dd>5.使用可能な拡張機能一覧が開くので「plugin open-in-browser」をクリック</dd>
        <dd>6「Set default browser」の下の欄に使いたいブラウザ名を入力</br>
        色んな表現を拾って認識してくれる仕様になっており、例えばGoogle Chromeなら「chrome」で通じる↓</dd>
</dl>

![ブラウザ設定](https://gyakuten-app.s3-ap-northeast-1.amazonaws.com/texts/html/openinbrowser_setting.JPG)

## HTMLタグとは

それでは「HTMLのタグとは？」という所からから学んでいきましょう

HTMLにはたくさんの種類のタグが用意されており、タグを用いてHTML構文を作ることで様々な表現をすることができます

HTMLの構文は基本的に **開始タグと閉じタグ** が対になっており、開始タグは`<タグ名>`、閉じタグは`</タグ名>`で表します

開始タグと閉じタグの間には **表示したい文字** を入力します

例えば

h1タグなら　　　　`<h1>１．大見出し</h1>`
aタグなら　　　　　`<a href=""#"">２．ページ先頭へ行くリンク</a>`
strongタグなら　　`<strong>３．強調</strong>`

と書くことができます

これらのHTML構文はウェブブラウザでは以下のように表現されます

---

![ブラウザ設定](https://gyakuten-app.s3-ap-northeast-1.amazonaws.com/texts/html/html_0.png)

---

HTMLではこのようにタグで囲むことでその間の文字の表現を変えることができます

ただし、いくつか閉じタグが必要ないタグも存在します

代表的なのは`<img>`です

これは画像を表示するためのタグです

## 見出し：`<h1>~<h6>`

HTMLには大きさの異なる6種類の見出しを表すタグがあります

それらのタグは`h[１～６の数字]`で表現されます

数字が大きくなるほど見出しは小さくなっていきます

**h** は英語で言う見出しの意味のHeadingの頭文字に由来します

### 【HTML構文】

```
<h1>見出し１</h1>
<h2>見出し２</h2>
<h3>見出し３</h3>
<h4>見出し４</h4>
<h5>見出し５</h5>
<h6>見出し６</h6>
```

### 【ブラウザでの表示】

---

![ブラウザ設定](https://gyakuten-app.s3-ap-northeast-1.amazonaws.com/texts/html/html_1.png)

---

## 段落：`<p>`

段落を作る際には`<p>`を用います

**p** は英語で言う見出しの意味のParagraphの頭文字に由来します

文章を`<p>`と`</p>`で囲むことで、ひとつの段落として表現できます

### 【HTML構文】

```
<p>当サロンは、「アラサーが人生を大逆転する」ということを目的として設立したサロンです。</p>
<p>その目的があれば基本は誰でも入会可能。</p>
<p>プログラミング、デザイン、ブログ、YouTube、その他SNSなど、様々な手段を使って人生を大逆転する方法を研究していきましょう。</p>
```

### 【ブラウザでの表示】

---

![ブラウザ設定](https://gyakuten-app.s3-ap-northeast-1.amazonaws.com/texts/html/html_2.png)

---

## スパン：`<span>`

`<span>`は少し変わっていて単体では意味を持たないタグです

`<span>`と`</span>`で囲われた範囲の文字列は「`<span>`に要求された装飾の対象」とすることができます

例えば段落中の一部の文字を赤い太字にしたい場合、以下のように使うことができます

### 【HTML構文】

```
<p>当サロンは、<span style=""color: red; font-weight: bold;"">「アラサーが人生を大逆転する」</span>ということを目的として設立したサロンです。</p>
```

### 【ブラウザでの表示】

---

![ブラウザ設定](https://gyakuten-app.s3-ap-northeast-1.amazonaws.com/texts/html/html_3.png)

---

### コメント：`<!--コメント-->`

HTMLに限りませんがコードを書く時には **作業性を上げるためにコメントを入れる** のが一般的です

コメントというのは **コードとして反映されない表記** のことで、主な使い方は以下のようなものがあります

- コードの意味を補足して分かりやすくする
- これから足さなければならないコードの位置を示す
- エラーが出るときに原因と思われる部分をコメントとしてコードから除外して検証する

HTMLではコメントとしたい部分を`<!--`と`-->`で囲みます

コメントは複数行にまたがることも可能です

### 【HTML構文】

```
<p>あいうえお</p>
<!-- コメント１ -->
<p>かきくけこ</p> <!-- コメント２－１
コメント２－２ -->
<!-- <p>さしすせそ</p> -->
```

## リンク：`<a>`

`<a>`と`</a>`で囲んだ部分がリンクとして機能するようになります

```
<a href=""リンク先のURL"">リンクとして表示する文字<a>
```

リンク先はこのようにhref **属性** を用いて`href=""リンク先のURL""`として指定します

HTMLのタグにはこのような **属性** と言われるオプションのようなものがたくさんあります

`<a>`タグを用いてリンクを作る場合、デフォルトでは同しページにリンク先のページを開いてしまいます

新たなページ（タブ）でリンク先のページを開きたい時は以下のようにtarget属性とrel属性を追加で指定します

```
<a href=""リンク先のURL"" target=""_blank"" rel=""noopener"">リンクとして表示する文字</a>
```

`target=""_blank""`は新しいタブでページを開くという意味で、`rel=""noopener""`は開いた新たなページから元のページを操作できないようにするセキュリティ上の対策です

### 【HTML構文】

```
<a href=""https://www.google.com/maps"">グーグルマップ</a><br>
<a href=""https://www.google.com/maps"" target=""_blank"">グーグルマップ（別タブ）</a>
```

## 画像：`<img>`

`<img>`は画像を表示するために使うタグです

閉じタグはなく、src属性で画像ファイルのURLを指定します

画像ファイルはネット上のものでもローカル環境内のものでも表示可能です

ローカルのファイルを指定する際は「記述するHTMLファイルから見た相対パス」を入力します

```
<img src=""画像ファイルのURL"" width=""幅[px]"" height=""高さ[px]"" alt=""画像内容の分かるの説明"">
```

`width`と`height`はオプションの属性なので、付けない場合は元のサイズになります

alt属性は画像をテキストで説明するための属性で、これもオプションです

以下のような目的で使用されます

- 目が不自由な人などが音声でHTMLファイルを聞くため
- 画像データをロードしないように設定している人でも内容が分かるようにするため

alt属性の説明は画像が伝えたいことが伝わるように書くべきです

例えば会社ロゴの場合、説明が""会社のロゴ""では不親切です

ロゴに文字が入っているならその文字を説明に含めて、どんなロゴなのか分かるようにするべきです

ちなみに、srcはsource（画像読み込み元）、altはalternative（代替物）から来ています

### 【HTML構文】

```
<!-- ネット上の画像を読み込む場合、画像は「HTML5」 -->

<img src=""https://upload.wikimedia.org/wikipedia/commons/thumb/6/61/HTML5_logo_and_wordmark.svg/1200px-HTML5_logo_and_wordmark.svg.png"" width=""200"" height=""200"" alt=""ネット上画像を表示する例としてのHTML5のロゴ"">

<!-- ローカルのファイル（imagesフォルダ内のruby.png）を読み込む場合、画像は「Ruby」 -->

<img src=""https://gyakuten-app.s3-ap-northeast-1.amazonaws.com/texts/html/ruby.png"" width=""200"" height=""200"" alt=""ローカル画像を表示する例としての宝石のRubyのイラスト"">
```

## リスト：`<ul>,<ol>,<li>`

`<ul>`は順序のないリスト（unsorted list）を、`<ol>`は順序のあるリスト（ordered list）を作ります

`<li>`は個々のリストの項目を指定するためのタグです

`<li>`には閉じタグが必要ありません（付けても良いです）

### 【HTML構文】

```
<p>順序のないリスト</p>
<ul>
    <li>HTML
    <li>CSS
    <li>Ruby
    <li>Ruby on Rails
    <li>Git
    <li>SQL
</ul>

<p>順序のあるリスト</p>
<ol>
    <li>HTML
    <li>CSS
    <li>Ruby
    <li>Ruby on Rails
    <li>Git
    <li>SQL
</ol>
```

### 【ブラウザでの表示】

---

![ブラウザ設定](https://gyakuten-app.s3-ap-northeast-1.amazonaws.com/texts/html/html_4.png)

---

## テーブル：`<table>`

`<table>`は表を作るために使用するタグです

`<table>`タグの中でいくつかのタグ（`<caption>`,`<tr>`,`<th>`,`<td>`など）を使うことで表を調整することができます

表記述の決まり事を羅列します

- `<table>`タグで囲まれた範囲が表になる
- `<caption>`タグで囲まれた範囲が表のタイトルになる
- `<tr>`タグで囲まれた範囲が表の一行になる
- `<th>`タグで囲まれた範囲は太字（見出しとして）表の一列になる
- `<td>`タグで囲まれた範囲が表の一列になる

少し複雑なので下のHTML構文とブラウザでの表示を見比べて、合っているか確認してみてください

表はどうしてもコードが読みづらくなるので、インデントをしっかりとって分かりやすく記述することがエラー回避につながります

表では他にも`<thead>`,`<tbody>`,`<tfoot>`といったタグも使うことができます

必要に応じて調べるようにしましょう

### 【HTML構文】

```
<table>
    <caption>囚人のジレンマ</caption>
    <tr>
        <th>A\B</th>
        <td>自白</td>
        <td>黙秘</td>
    </tr>
    <tr>
        <td>自白</td>
        <td>A: -5, B: -5</td>
        <td>A: 0, B: -10</td>
    </tr>
    <tr>
        <td>黙秘</td>
        <td>A: -10, B: 0</td>
        <td>A: -2, B: -2</td>
    </tr>
</table>
```

### 【ブラウザでの表示】

---

![ブラウザ設定](https://gyakuten-app.s3-ap-northeast-1.amazonaws.com/texts/html/html_5.png)

---

## フォーム：`<form>`

「ユーザーがウェブページから何かしらの値を入力・送信するためのフォーム」を作るために`<form>`タグを使います

`<form>`では値の送信先、値の送信方法、値（データ）の形式などを指定することができます

そのために以下の属性を使用します

`<form>`の主な属性

- action：値の送信先
- method：値の送信方法

`action`属性の使い方

フォームの入力値の送信先URLを指定します

```
<form action=""sample.php""> ～フォーム部品～ </form>
```

`method`属性の使い方

フォームの入力値の送信方法（HTTPメソッド）を指定します

`method`属性が取れる値（送信方法）には`get`と`post`という２種類があります

どちらも値を送信する点では同じですが、その方法が異なります

`get`メソッドでは入力値をURLに載せて送りますが、`post`メソッドでは入力値をHTTPリクエストに載せて送ります

```
<form action=""sample.php"" method=""get""> ～フォーム部品～ </form>
<form action=""sample.php"" method=""post""> ～フォーム部品～ </form>
```

### 【HTML構文】

```
<form action=""sample.php"" method=""post"">
    [フォーム部品１]<br>
    [フォーム部品２]<br>
    [フォーム部品３]<br>
    [...]<br>
    [送信ボタン]
</form>
```

ユーザーの入力を受けるためには、`<form>`の開始タグと閉じタグの間に必要な **フォーム部品** （入力欄、プルダウン、チェックボックス、送信ボタンなど）を設置します

なお、送信ボタンは入力データを送るために必須になります

フォーム部品は様々な種類があり、しかも本当に様々な使い方があるので全ては紹介できませんが、主要なものをピックアップして紹介します

### フォーム部品１：`<input>`

`<input>`はユーザーが入力するフォーム部品を作るためのタグです

`<input>`の主な属性（これ以外もたくさんあります）

- type：様々なフォーム部品の種類
    - maxlength：入力可能な最大文字数を指定（`type=""text"" or ""password""`のとき）
    - minlength：入力すべき最小文字数を指定（`type=""text"" or ""password""`のとき）
    - accept：選択できるファイルの拡張子を指定（`type=""file""`のとき）
- name：フォーム部品の名前or呼び名（表示されない、入力値の受け渡し時の **ID** となる）
- value：フォーム部品の初期値
- size：フォーム部品の幅
- require：入力必須を指定

`type`属性が取る主な値

- text：一行の文字列入力欄
- password：パスワード用の一行の文字列入力欄
- radio：ラジオボタン（複数のうち一つだけにチェックできる）
- checkbox：チェックボックス（いくつでもチェックできる）
- file：ファイルを選択
- reset：フォーム内のすべての入力をリセットするボタン
- submit：フォームに入力された値を送信するボタン
- button：汎用的なボタン

補足

- `type=""radio""`の時は`name=""グループ名""`として複数のラジオボタンがひとつのグループであることを示す必要があります
- `type=""button""`の時は`value=""ボタンに表示する文字""`としてボタンの文字を設定します（デフォルトで`submit`は「送信」、`reset`は「リセット」になっているが同様の手順で変更可能）

`maxlength`属性が取る値：任意の数値

`minlength`属性が取る値：任意の数値

`accept`属性が取る値：固有ファイル型指定子、複数種類指定可能<br>
固有ファイル型指定子=>`audio/*`：任意の音声ファイル、`video/*`：任意の動画ファイル、`image/*`：任意の画像ファイル、`.jpg`：jpg、`.pdf`：pdfなど

`name`属性が取る値：任意の文字列

`value`属性が取る値：任意の文字列

`size`属性が取る値：任意の数値

`required`属性が取る値：なし（`required`単体で使う）

#### 【HTML構文】

```
<form>
    <input name=""text1"" type=""text"" required>＊入力必須<br>
    <input name=""text2"" type=""text"" minlength=""6"">＊最低6文字<br>
    <input name=""text3"" type=""text"" value=""初期値""><br>
    <input name=""text4"" type=""text"" size=40><br>
    <input name=""password1"" type=""password""><br>
    <input name=""group1"" type=""radio"" value=""g1-1"">
    <input name=""group1"" type=""radio"" value=""g1-2"">
    <input name=""group1"" type=""radio"" value=""g1-3"">
    <input name=""group2"" type=""radio"" value=""g2""><br>
    <input name=""checkbox1"" type=""checkbox""><br>
    <input name=""file1"" type=""file"" accept="".png,.jpg""><br>
    <input type=""reset""><br>
    <input type=""reset"" value=""入力値消去""><br>
    <input type=""submit""><br>
    <input type=""button"" value=""ボタン"">
</form>
```

#### 【ブラウザでの表示】

---

![ブラウザ設定](https://gyakuten-app.s3-ap-northeast-1.amazonaws.com/texts/html/html_6.png)

---

### フォーム部品２：`<select>`&`<option>`

`<select>`はユーザーが選択肢から選ぶフォームを作るためのタグです

`<select>`と`</select>`の間に`<option>`タグを設置して選択肢を作ります

`<select>`の主な属性

- name：フォーム部品の名前or呼び名（表示されない、入力値の受け渡し時の **ID** となる）
- size：画面に一度に表示する行数を指定します。デフォルトは1です

`name`が取る値：任意の文字列

`size`属性が取る値：任意の数値

`<option>`の主な属性

- value：受け渡し用の選択項目の値
- selected：デフォルトで選択された状態にする

`value`属性が取る値：任意の文字列

`selected`が取る値：なし（`selected`単体で使う）

#### 【HTML構文】

```
<form>
    <select name=""select1"">
      <option value=""sample11"">サンプル1-1</option>
      <option value=""sample12"">サンプル1-2</option>
      <option value=""sample13"">サンプル1-3</option>
    </select>
    <select size=""3"" name=""select2"">
      <option value=""sample21"">サンプル2-1</option>
      <option value=""sample22"">サンプル2-2</option>
      <option value=""sample23"" selected>サンプル2-3</option>
      <option value=""sample24"">サンプル2-4</option>
      <option value=""sample25"">サンプル2-5</option>
    </select>
</form>
```

#### 【ブラウザでの表示】

---

![ブラウザ設定](https://gyakuten-app.s3-ap-northeast-1.amazonaws.com/texts/html/html_7.png)

---

### フォーム部品３：`<textarea>`

`<textarea>`は複数行の入力欄を作るために使うタグです

`<textarea>`で作った入力欄は **右下隅をドラッグすることで** 自在に大きさを変えられます

`<textarea>`の主な属性

- cols：入力欄の幅を指定する=>任意の数値を取る
- rows：入力欄の高さを指定する=>任意の数値を取る
- name：フォーム部品の名前or呼び名（表示されない、入力値の受け渡し時の **ID** となる）=>任意の文字列を取る
- maxlength：入力可能な最大文字数を指定
- minlength：入力すべき最小文字数を指定



#### 【HTML構文】

```
<form>
  <textarea name=""textarea1"" rows=""2"" cols=""30"">2×30</textarea><br>
    <textarea name=""textarea1"" rows=""6"" cols=""50"" maxlength=""300"">6×50</textarea>
</form>
```

#### 【ブラウザでの表示】

---

![ブラウザ設定](https://gyakuten-app.s3-ap-northeast-1.amazonaws.com/texts/html/html_8.png)

---

## ボタン：`<button>`

`<button>`はボタンを設置するときに使用します

開始タグと閉じタグの間にボタン上に表示したい文字列を書きます

コード：`<button>押してみてね</button>`

表示：<img src=""https://gyakuten-app.s3-ap-northeast-1.amazonaws.com/texts/html/04_button1.png"" width=""15%"">

基本的な使い方はこれだけです

ただし、`<button>`には以下の4つの属性があり、これらを使いこなすことで様々な用途に適用できます

`<button>`の主な属性

- type：３つあるボタンの種類のいずれかを指定
- name：フォーム部品の名前or呼び名（表示されない、入力値の受け渡し時の **ID** となる）=>任意の文字列を取る
- value：送信する値
- disabled：動作を無効化する
- onclick：クリック時に作動する挙動を設定

`type`属性が取る値

- submit：フォームの入力内容を送信するボタン
- reset：フォームの入力内容を一掃するボタン
- button：何もしないただのボタン

デフォルトでは暗黙に`type=""submit""`となっています

`<input>`でも同じ機能を持つフォームの送信ボタンは作れますが、`<button>`は閉じタグがあるので子要素を使ってデザインに幅を持たせることができます

`name`属性が取る値：任意の文字列

`value`属性が取る値：任意の文字列

`disabled`属性が取る値：なし（`disabled`単体で使う）

`onclick`属性が取る値：

- `""location.href='遷移先URL'""`（ボタンをウェブページへのリンクとして使うときに有効です）
- JavaScriptで定義した処理（HTML教材の範囲から外れるので詳細は割愛します）

### 【HTML構文】

```
<!--フォームの送信ボタン-->
<form>
お名前：<input type=""text"">
<button name=""name"" value=""value"">送信</button>
</form>

<!--RubyInstallerへのリンクボタン-->
<button type=""button"" onclick=""location.href='https://rubyinstaller.org/'"">RubyInstaller</button>
```

### 【ブラウザでの表示】

---

![ブラウザ設定](https://gyakuten-app.s3-ap-northeast-1.amazonaws.com/texts/html/html_9.png)

---

## HTMLの定型

これまでは個別のタグについて見てきましたが、HTMLにはどのファイルにも共通する基本的なタグが存在します

以下のタグが代表的です

- `<!DOCTYPE>`
- `<html>`
- `<head>`
- `<meta>`
- `<title>`
- `<link>`
- `<body>`

HTMLファイルの基本形は以下のようになります

```
<!DOCTYPE [htmlバージョン指定文]>
<html>
  <head>
    <meta charset=""[文字コード]"">
    <title>[タイトル]</title>
    <link rel=""stylesheet"" href=""[スタイルシートのパス]"">
  </head>
  <body>
    [ページ内容を構成する個別のタグ]
  </body>
</html>
```

## HTMLのバージョンを宣言：`<!DOCTYPE>`

HTMLファイルの先頭に書くことで（`<html>`タグより前に）、そのファイルで用いるHTMLのバージョンを宣言するものです

HTMLにはバージョンがあり、バージョンごとに書き方や属性の内容が異なることがあるため、宣言しておく必要があります

```
<!--HTML4の場合（注：HTML4の中にも3種類あります）-->
<!DOCTYPE HTML PUBLIC ""-//W3C//DTD HTML 4.01 Transitional//EN"" ""http://www.w3.org/TR/html4/loose.dtd"">

<!--HTML5の場合-->
<!DOCTYPE html>
```

## ファイルのタイプを指定：`<html>`

HTML文書であることを示す働きがあり、`<html>`タグの範囲内ではHTML構文が使えます

なお、`<html>`タグで囲まれた範囲の直下に`<head>`タグと`<body>`タグがそれぞれ必要になります

`<html>`はドキュメントの言語を指定する属性として`lang`を取れます

```
<!--日本語の場合-->
<html lang=""ja"">

<!--英語の場合-->
<html lang=""en"">
```

## HTML文書のメタ情報をまとめる：`<head>`

`<head>`タグは文書のメタ情報をまとめるタグです

メタ情報というのは、個別の内容ではなくて特徴や仕様を表した情報のことです

`<head>`で囲まれた範囲はブラウザでは表示されません

例えば、ページのタイトル、リンク情報、スタイルシート、筆者などなどを記載します

## タイトル：`<title>`

ページのタイトルを指定するためには`<title>`タグを使います

開始タグと閉じタグの間にタイトルを書きます

ここで記述したタイトルはブラウザのタブに表示されます

```
<title>ページタイトル</title>
```

## リンク情報：`<link>`

`<link>`タグはHTML文章が連携している外部ファイルを指定するために必要なタグです

使う場合には`rel`属性と`href`属性を必ず指定する必要があります

実際にはHTML文書を視覚的に装飾をするCSSファイルを読み込むために使われることがほとんどです

`<link>`の主な属性

- `rel`：この文書から見た参照先の文書との関係を指定
- `href`：参照先の文書のURLを指定、相対パスを使用

`rel`が取る値：リンクタイプ、以下例

- alternate：文書の代替ページを指定（例：スマホサイトでPCサイトを指定する）
- icon：文書のアイコンを読み込む
- stylesheet：スタイルシートを読み込む

`href`が取る値：URL

```
<!--stylesheet.cssという同フォルダの外部ファイルを読み込む-->
<link rel=""stylesheet"" href=""stylesheet.css"">
```

## 文字コードなどのHTML文書のメタ情報を指定：`<meta>`

`<meta>`タグは`<title>`タグなどで表せない文書のメタ情報を指定するためのタグです

文字コードを指定するために`charset`属性を使うケースが一般的です

こうすることで文字化けを防げます

```
<!--utf-8を指定-->
<meta charset=""UTF-8"">

<!--shift-jisを指定-->
<meta charset=""shift-jis"">
```

他には`name`属性と`content`属性を組み合わせることで以下のようなことができます

- 文書のキーワードを検索エンジンに知らせる=>１
- 文書の内容を検索エンジンに知らせる=>２
- 文書の作成者を記載しておく=>３

```
<!--1-->
<meta name=""keywords"" content=""ruby,rubyonrails,git"">
<!--2-->
<meta name=""description"" content=""This text encourages students to understand what HTML is and how to use HTML tags."">
<!--3-->
<meta name=""author"" content=""Who waits a prince"">
```

## ページになる部分を指定：`<body>`

`<head>`では文書のメタ情報について記載しましたが、`<body>`では実際にページとして表示される部分を書きます

HTML4ではデザインに関わる属性がありましたが、HTML5からは廃止され裸で使うことが一般的です

`<head>`も`<body>`もひとつのHTMLファイルにひとつだけ使用します

```
<body>
    [ページ内容を構成する個別のタグ]
</body>
```
## `<body>`の要素：`<header>`, `<main>`, `<footer>`

`<body>`の中身にはおおよそ決まった書き方が存在します

どんなものかというと作成するウェブページのセクションごとに特定のタグで分割する書き方です

それらのセクションを分けるためのタグが以下の3つのタグです

- `<header>`：導入部やナビゲーションエリアを束ねる
- `<main>`：本体部分を束ねる
- `<footer>`：直前のセクションのフッター内容を束ねる

セクション分割が目的なので、`<h1>`や`<a>`のような機能はありません

ただ、囲まれた範囲がどんな役割を担っているのか分かりやすくなる利点があります

これらのタグを用いたHTMLファイルの一例は以下のようになります

```
<!DOCTYPE [htmlバージョン指定文]>
<html>
  <head>
    [メタ情報を記載するタグ]
  </head>
  <body>
    <header>
        [導入やナビを構成するタグ]
    </header>
    <main>
        [ページ本体を構成するタグ]
    </main>
    <footer>
        [ページや作者の情報を構成するタグ]
    </footer>
  </body>
</html>
```
## その他のセクション分割タグ：`<article>`, `<aside>`, `<nav>`, `<section>`, `<div>`

`<header>`, `<main>`, `<footer>`以外にもセクションを役割ごとに分けて括るためのタグに以下のようなものがあります

- `<article>`
- `<aside>`
- `<nav>`
- `<section>`
- `<div>`

ひとつずつ見ていきます

## 投稿や記事などを括る：`<article>`

`<article>`は投稿や記事といった自己完結する意味のまとまりを括るためのタグです

入れ子構造にする際は、内側の`<article>`タグで括った要素は外側の`<article>`タグで括った要素に関する情報にするようにします

```
<article>
    [記事や投稿を構成する範囲]
</article>
```

## 補足情報を括る：`<aside>`

`<aside>`は補足情報を示すセクションを括るために使います

```
<aside>
    [補足情報を示す範囲]
</aside>
```

## ナビゲーションを括る：`<nav>`

`<nav>`はナビゲーションを括るために使います
`<header>`は導入部やナビゲーションエリア全体をまとめるのに対して、`<nav>`は部分的なナビゲーションを括るのに使われます

## 役割やテーマごとにセクションを作る：`<section>`

`<section>`は上記のセクションを作るタグに当てはまらないようなセクション（意味の塊）を括るために使います

なんでもかんでも`<section>`を使うと意味が分かりづらくなるので、他のセクションをまとめるタグが使えるときはそちらを優先します

```
<section>
    [何かしらの役割やテーマを持つ範囲]
</section>
```

## 任意の範囲を分割：`<div>`

`<div>`タグはHTMLを任意の範囲で分割する（divide）ためのタグです

開始タグと閉じタグで任意の範囲を囲い、その範囲を一つのまとまりとすることができます

入れ子構造にすることも可能です

なお、`<div>`タグ自体に特に意味はありませんので、分割する範囲に意味合い的に適した他のタグがあれば、可読性の観点からそちらを優先するべきです

`<div>`ごとに`class`を指定して、CSSファイルでスタイルを割り当てるといった使い方をするので、CSSを学んでいないといまいち使い方が想像できないかと思います

単純化した具体例を考えると、`<div>`で範囲を分割しておくと、「この範囲のフォントサイズは20px、あの範囲の背景色は水色」などと`<div>`で分けた範囲ごとに見た目の仕様を簡単に変えることができます

```
<!--<div>タグ使用例-->

<div class=""container"">
    <div class=""image-holder"">
        [画像を表示に関する範囲]
    </div>
    <div class=""text-holder"">
        [文章を表示に関する範囲]
    </div>
</div>
```"
HTML&CSS,CSS基礎（その1）,"## CSS とは

CSS は HTML に装飾を加えてWebページの見た目を整えるための言語です。
まず，HTML ファイルに CSS ファイルを読み込む方法から見ていきましょう。

## CSS ファイルの読み込み方法

次のコマンドを実行して，サンプル用のファイルとディレクトリを作成していきましょう。

```Bash
mkdir css_sample
cd css_sample
touch sample.html boxmodel.html
mkdir css
touch css/stylesheet.css
```

ディレクトリ構造が次のようになっていることを確認して下さい。

```
css_sample
├── boxmodel.html
├── css
│   └── stylesheet.css
└── sample.html
```

ファイル類の確認ができたら，`sample.html` に下記のコードを貼り付けて下さい。

```sample.html
<!DOCTYPE html>
<html lang=""jp"">
  <head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>CSSの基本</title>
    <!-- 以下に注目 -->
    <link rel=""stylesheet"" href=""css/stylesheet.css"">
  </head>

  <body>
    <h1>Hello World!</h1>
  </body>
</html>
```

![Helloworld（黒）の写真](https://gyakuten-app.s3-ap-northeast-1.amazonaws.com/texts/css/helloworld.png)

HTML ファイルへの CSS ファイルの読み込みは link タグを用いて行います。下の例では `sample.html` を起点とした相対パスで `stylesheet.css` ファイルを指定していますが，絶対パスでも OK です。

## CSS の書き方

続いて CSS の書き方について学習していきましょう。
`css/stylesheet.css` を開いて下さい。

## セレクタとプロパティ

CSS は，スタイルを整える対象を指定するための`セレクタ`と具体的にスタイルを記述する`プロパティ`からなります。
次の例を見て下さい。{} の前に書かれている `h1` が`セレクタ`で，{} の中に書かれている `color` の部分が`プロパティ`です。

下の例は，h1 タグに対して文字色を青色にするように指示しています。

```stylesheet.css
h1 {
  color: blue;
}
```

上記の CSS を追加し，保存した後にブラウザを更新して文字色が「青色」になっていることを確認して下さい。

![Helloworld（青）](https://gyakuten-app.s3-ap-northeast-1.amazonaws.com/texts/css/helloworld_2.png)

## セレクタの書き方

セレクタの書き方について，詳しくみていきましょう。

セレクタはHTML タグ，class，id を指定することができますが，それぞれ記述方法が違います。
詳細は下の表で確認して下さい。

|記入方法|用途|
|---|---|
|h1|HTML タグを指定（指定したタグ全てに記述したプロパティを適用する）|
|.font-style|`.` + `class名`で class を指定（指定した class を持つ要素全てに対してプロパティを適用）|
|#top|`#` + `id名`で id を指定（指定した id を持つ要素に対してプロパティを適用）|
|.|全体を指定（HTML 全体に対してプロパティを適用）|


最も使用する機会が多い class 指定のセレクタについて実際に確認してみましょう。
それぞれのファイルに次のコードを追加して，CSS を適用した h2 要素の文字色が赤色になっていることを確認して下さい。

```sample.html
  <body>
    <h1>Hello World!</h1>
    <!-- 以下を追加 -->
    <h2>文字色指定なし</h2>
    <h2 class=""font-style"">文字色指定あり</h2>
    <!-- 以上を追加 -->
  </body>
```

```stylesheet.css
.font-style {
  color: red;
}
```

基本的なセレクタの使い方は以上です。自身で色々試して使い方を覚えて下さい。



## プロパティの書き方

具体的に画面をどのように装飾するか指示するのが`プロパティ`です。
プロパティの書き方は下記の通りで，プロパティの後ろには「 : 」を行末には「 ; 」を置く必要があるので注意して下さい。

```
プロパティ: プロパティの値;
```



## 文字を装飾するプロパティ

ここからは，代表的なプロパティについてみていきましょう。



## 文字色（color）

先ほどから出てきていますが，文字色を指定するためのプロパティです。
カラーコードの指定方法にはキーワード名の他に，16進数を使ったカラーコードの指定方法やRGB（光の3原色であるRed，Green，Blueのカラーコードを指定）などがあります。

次のコードを追加してみましょう。全てオレンジ色になることを確認して下さい。

```sample.html
    <p class=""keyword"">キーワード</p>
    <p class=""hexadecimal"">16進数</p>
    <p class=""rgb"">RGB</p>
```

```stylesheet.css
/* キーワードによる色の指定 */
.keyword {
  color: orange;
}

/* 16進数による色の指定 */
.hexadecimal {
  color: #ffa500;
}

/* RGBによる色の指定 */
.rgb {
  color: rgb(255, 165, 0);
}
```

---

※CSS では `/* */` で囲んでコメントアウトします。

---



## 文字の大きさ（font-size）

`font-size` は文字サイズを指定するためのプロパティです。
値は `10px` のように数字と単位で指定します。
次のコードを追加して，文字サイズが大きくなることを確認してみましょう。

```stylesheet.css
.keyword {
  color: orange;
  /* 以下を追加 */
  font-size: 30px;
  /* 以上を追加 */
}
```

CSS で一般的に良く使われる単位を表に示します。

|単位|意味|
|---|---|
|px|pxのサイズで指定する。（フォントにより文字の大きさが変わるため，画面のピクセル数と必ずしも一致しない）|
|%|親要素のサイズに対しての割合を指定する。|
|em|親要素のサイズに対しての割合を指定する。親要素の文字サイズを 1em として計算する。|
|rem|ルートのサイズ（htmlタグに指定したサイズ）に対しての割合を指定する。html のサイズを 1rem として計算する。|

※親要素やルートの説明については後述します。

これらの単位は文字サイズだけで無く線の太さや幅の指定など，随所で使える単位なので色々試して使えるようにしておきましょう。



## フォント名（font-family）

次にフォントの種類を指定するプロパティである `font-family` についてみていきましょう。

```
セレクタ {font-family: フォント名;}
```

という形でフォントの種類を指定します。
使用するブラウザによって使えるフォントが違うため，基本的に複数のフォントを指定します。
複数のフォントを記述する場合は「 , 」で区切ります。また，スペースを含むフォント名は「`"" ""`」で囲む必要があります。

次のコードをそれぞれ追加して，フォントの種類が変わっていることを確かめて下さい。

```sample.html
    <h3 class=""gothic"">フォントファミリーABC123</h3>
    <h3 class=""mincho"">フォントファミリーABC123</h3>
```

```stylesheet.css
/* ゴシック体 */
.gothic {
  font-family: ""Hiragino Sans W3"", ""Hiragino Kaku Gothic ProN"", ""ヒラギノ角ゴ ProN W3"", ""メイリオ"", Meiryo, ""ＭＳ Ｐゴシック"", ""MS PGothic"", sans-serif;
}

/* 明朝体 */
.mincho {
  font-family:  ""游明朝"", YuMincho, ""Hiragino Mincho ProN W3"", ""ヒラギノ明朝 ProN W3"", ""Hiragino Mincho ProN"", ""HG明朝E"", ""ＭＳ Ｐ明朝"", ""ＭＳ 明朝"", serif;
}
```


## その他の文字の装飾に関わるプロパティ

文字の装飾に関する CSS の中で良く使うものをまとめます。

|プロパティ|用途|例|
|---|---|---|
|font-weight|文字の太さを変える。（太字: bold, 細字: lighter, 普通: normal）|font-weight: bold;|
|font-style|文字を斜体・イタリック体に変える。|font-style: italic;|
|letter-spacing|文字間のスペースを指定する。|letter-spacing: 1px;|
|text-decoration|取り消し線を引く。（値: line-through）|text-decoration: line-through;|



## 背景を装飾するプロパティ

これまでは文字を装飾するためのプロパティをみてきました。
次は背景を装飾するプロパティを学習していきましょう。


## 背景色（background-color）

背景色を設定するためのプロパティが `background-color` です。
色の指定方法は `color` と同じです。
早速，次のコードを追加して確認してみましょう。

```stylesheet.css
.keyword {
  color: orange;
  font-size: 30px;
  /* 以下を追加 */
  background-color: green;
  /* 以上を追加 */
}
```

「キーワード」の文字の背景色が「緑色」になる事を確認して下さい。


## 背景画像 （background-image）

続いては背景に写真やイラストを配置するための方法をみていきましょう。

背景に画像を指定するプロパティは `background-image` です。
記述方法は

```
セレクタ {background-image: url(""画像のパスまたはURL"");}
```

のようにします。相対パスで記述する場合は，CSS ファイルがあるディレクトリからのパスになりますので気をつけて下さい。

また，今回の例のように外部リンクでも画像を表示することができます。

コードを追加してみましょう。

```sample.html
    <div class=""bg-image"">Good Puppy!</div>
```

```stylesheet.css
.bg-image {
  background-image: url(""https://picsum.photos/id/237/300/200"");
}
```

文字の高さに合わせて画像が背景に設定されたことを確認して下さい。このままでは見た目が悪いので，CSS を追加して整えましょう。

```stylesheet.css
.bg-image {
  background-image: url(""https://picsum.photos/id/237/300/200"");
  /* 以下を追加 */
  background-size: cover;
  width: 300px;
  height: 200px;
  text-align: center;
  line-height: 200px;
  font-size: 30px;
  color: white;
  /* 以上を追加 */
}
```

このようにして見た目を整えていきます。
次からは，CSS で見た目を整えていくうえで非常に重要なボックスモデルについて学習していきましょう。



## ボックスモデル

HTML/CSS のデザインは文字などを表示する内容領域（content）・境界線（border）・ border 内の余白（padding）・ border 外の余白（margin）の4つの組み合わせでできています。これを`ボックスモデル`といいます。

![ボックスモデルの画像](https://gyakuten-app.s3-ap-northeast-1.amazonaws.com/texts/css/boxmodel.jpg)

抽象的な内容なので，順にみていきましょう。



## 横幅・高さ(width, height)

まず内容領域（content）の横幅・高さの指定方法について説明します。
content の横幅を指定するプロパティが `width` で，高さを指定するプロパティが `height` です。両プロパティとも

```
セレクタ {プロパティ: 1000px;}
```

の様に記述します。

実際にコードを書いて確認してみましょう。

ここからは `boxmodel.html` をしていきましょう。次のコードを貼り付けて下さい。

```boxmodel.html
<!DOCTYPE html>
<html lang=""jp"">
  <head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>ボックスモデル</title>
    <link rel=""stylesheet"" href=""css/stylesheet.css"">
  </head>
  <body>
    <div class=""container"">
    </div>
  </body>
</html>
```

CSS ファイルは `stylesheet.css` を共通で使用していきます。

現時点で，`boxmodel.html` の body タグ内には `container` というクラスを持った div タグが存在します。
分かりやすくするために背景色をつけて， `width` と `height` を指定しましょう。

```stylesheet.css
.container {
  background-color: tomato;
  width: 600px;
  height: 400px;
}
```

ブラウザで `boxmodel.html` を開いて，オレンジ色の長方形が表示されることを確認して下さい。
このオレンジ色の領域が content の領域です。文字を入力して確認してみましょう。

```boxmodel.html
    <div class=""container"">
      吾輩は猫である。名前はまだ無い。どこで生れたかとんと見当がつかぬ。何でも薄暗いじめじめした所でニャーニャー泣いていた事だけは記憶している。吾輩はここで始めて人間というものを見た。しかもあとで聞くとそれは書生という人間中で一番獰悪な種族であったそうだ。この書生というのは時々我々を捕つかまえて煮にて食うという話である。しかしその当時は何という考もなかったから別段恐しいとも思わなかった。
    </div>
```

ブラウザで確認して，オレンジの領域内に文字が余白が無く表示されるのを確認して下さい。
なお border, padding, margin はまだ設定されていません。



## 境界線（border）

次に，先ほど作成した content に境界線（border）を設定していきましょう。

境界線を設定するプロパティは `border` です。記述方法は

```
セレクタ {border: 線の種類 幅 色;}
```

のようにします。

次のコードを追加してグレーの枠線（border）が表示されることを確認して下さい。

```stylesheet.css
.container {
  /* 以下を追加 */
  border: solid 10px gray;
  /* 以上を追加 */
}
```

また，border は表示する方向を指定することができます。
次の表のプロパティを試してみて下さい。

|プロパティ|用途|
|---|---|
|border-top|上側の枠線|
|border-right|右側の枠線|
|border-bottom|下側の枠線|
|border-left|左側の枠線|

また，線の種類も他に沢山あるので，検索して試してみてください。



## border 内の余白（padding）

次は border の内側の余白（`padding`）について説明します。現段階で文字が border に隣接しているので読みづらいです。padding を設定して改善してみましょう。

padding の記述方法は

```
セレクタ {padding: 幅;}
```

のようにします。例を見ていきましょう。
次のコードを記述して下さい。

```stylesheet.css
.container {
  /* 以下を追加 */
  padding: 30px;
  /* 以上を追加 */
}
```

border の内側の上下左右に余白が追加されたことを確認して下さい。

さて，先ほどの padding の記述方法は上下左右に同じ幅の余白を設定しました。
padding の記述方法は何通りかあるので表にまとめます。

|指定する値の数|用途|記述例|
|---|---|---|
|値を1つ指定|[上下左右]に同じ幅の余白を指定|padding: 10px;|
|値を2つ指定|[上下][左右]の順にそれぞれの余白を指定|padding: 10px 20px;|
|値を3つ指定|[上][左右][下]の順にそれぞれの余白を指定|padding: 10px 20px 30px;|
|値を4つ指定|[上][右][下][左]の順にそれぞれの余白を指定|padding: 10px 20px 20px 30px;|

実際にコードを書いて確かめてみましょう。

```stylesheet.css
.container {
  /* 以下を修正 */
  padding: 50px 20px 30px 40px;
  /* 以上を修正 */
}
```

上下左右に幅の違う padding が設定されたことを確認して下さい。

また，padding を設定する位置を指定することもできます。
下の表にまとめたので試してみて下さい。

|プロパティ|用途|記述例|
|---|---|---|
|padding-top|[上]に余白を指定|padding-top: 10px;|
|padding-left|[左]に余白を指定|padding-left: 10px;|
|padding-right|[右]に余白を指定|padding-right: 10px;|
|padding-bottom|[下]に余白を指定|padding-bottom: 10px;|



## border 外の余白（margin）

次に border の外の余白（`margin`）について説明していきます。
margin は border の外に対する余白なので，要素間の位置を考えると分かりやすいです。
まず，`boxmodel.html` の div 要素をコピーして2つに増やしましょう。

```boxmodel.html
  <div class=""container"">
    <!-- 略 -->
  </div>
  <div class=""container"">
    <!-- 略 -->
  </div>
```

ブラウザで確認して2つの要素が上下に隣接していることを確認して下さい。このように，margin を設定しないと要素同士がくっついてしまいます。`margin` を設定していきましょう。

`margin` の記述のルールは padding と同じで, 指定した値の数によって上下左右の margin の位置と幅を指定することができます。また，border と同様にプロパティに位置を追加して，位置指定で margin を設定できます。

次のコードを追加してみましょう。

```stylesheet.css
.container {
  /* 以下を追加 */
  margin-bottom: 50px;
  /* 以上を追加 */
}
```

2つの div 要素の下に余白ができたので間隔を開けることができました。
このように margin は他の要素との位置を調整したい時に用います。



## box-sizing: border-box;

ここまで，content の領域を `width` と `height` を設定したのに， border と padding を追加する度に要素の表示領域が広がっていきました。領域の広さを固定して padding と border を設定したいときに `box-sizing: border-box;` を使うと便利です。`box-sizing: border-box;` を設定すると，要素の width と height の中に padding と border が含まれるようになります。

コードを追加して確認してみましょう。

```stylesheet.css
.container {
  /* 以下を追加 */
  box-sizing: border-box;
  /* 以上を追加 */
}
```

box-sizing: border-box; を全体に設定しておくと画面のデザインがしやすくなります。



## 要素の配置

これまで一つの要素に着目してきましたが，ここからは要素間の配置について学習していきます。
理解を深めるためにまず要素の種類について学習しましょう。



## 要素の種類（display）

HTML 要素はタグにより，大きくブロックレベル要素とインライン要素のどちらかに分類することができます。
div や p など，改行が入るのがブロックレベル要素で，a や span など改行が入らないものがインライン要素です。

実際に確認してみましょう。`boxmodel.html` に次のコードを追記して下さい。

ブロックレベル要素は改行され，インライン要素は横並びになる事を確認して下さい。

```boxmodel.html
    <h2>ブロックレベル要素</h2>
    <p>ブロックレベル要素</p>
    <a>インライン要素</a>
    <span>インライン要素</span>
    <span>インライン要素</span>
```

これら2種類の要素は次のように定義されています。

ブロックレベル要素は，見出し・段落・表など，文書を構成する基本となる要素で，一つのブロック（かたまり）として認識されます。

インライン要素は，主にブロックレベル要素の内容として用いられる要素で，文章の一部として扱われます。

改行の有無の他に，インライン要素は文章の一部なので width や height を設定することができません。
また，インライン要素は padding と margin を左右にのみ設定する事しかできません。

ブロック要素を横並びにしたいときはどのようにすればいいのでしょうか？
そのときはインラインブロック要素というブロック要素とインライン要素の両方の特徴を持った要素を指定してやる事ができます。

コードを書いて確認する前にそれぞれの特徴を下の表に記載します。

|　|ブロック|インラインブロック|インライン|
|---|---|---|---|
|width, height|指定できる|指定できる|指定できない|
|padding, margin|指定できる|指定できる|左右にのみ指定できる|
|配置|縦並び（改行あり）|横並び（改行無し）|横並び（改行無し）|

インラインブロックを指定するには `display` プロパティを使います。
記述方法は

```
セレクタ {display: inline-block;}
```

のようにします。

次のコードを追加して，div 要素が横並びになる事を確認して下さい。

```stylesheet.css
.container {
  /* 以下を修正 */
  display: inline-block;
  /* 以上を修正 */
}
```

### Google Chrom の検証ツール

フロントエンドのデザインをするのに Google Chrome の検証ツールがビックリするほど便利なのでここで紹介しておきます。

Chrome で `boxmodel.html` を開き，画面上で右クリックしてメニューを開いて下さい。
「検証」をクリックして検証ツールを起動します。

![1検証ツールの起動](https://gyakuten-app.s3-ap-northeast-1.amazonaws.com/texts/css/chrome_developer_1.png)

検証ツールの画面

![2検証ツール画面](https://gyakuten-app.s3-ap-northeast-1.amazonaws.com/texts/css/chrome_developer_2.png)

検証ツール画面の Elements 欄には web ページの HTML の一覧が表示されます。
body 内の要素を選択するとその要素に適用されている CSS の一覧がセレクタごとに表示されます。適用されていない CSS には取り消し線が引かれます。
色の付いた長方形の箇所は，選択した要素に設定されている content 領域，padding，border，margin の幅が表示されます。

![3検証ツール画面の説明](https://gyakuten-app.s3-ap-northeast-1.amazonaws.com/texts/css/chrome_developer_3.png)

HTML の行にカーソルを持っていくと，content 領域，padding，border，margin に色が付き視覚的にどのような設定になっているか確認することができます。

![4検証ツール画面の説明](https://gyakuten-app.s3-ap-northeast-1.amazonaws.com/texts/css/chrome_developer_4.png)

左上の画像のボタンをクリックして，web ページの各要素の上にカーソルを持っていって下さい。カーソルを置いた要素の HTML が選択されます。

![5検証ツール画面の説明](https://gyakuten-app.s3-ap-northeast-1.amazonaws.com/texts/css/chrome_developer_5.png)

web ページの要素をそれぞれ選択して，その要素の display が何になっているか確認してみて下さい。

さらに，Chrome の検証ツールでは HTML や CSS をブラウザ上で書き換えたり追加して，リアルタイムで変化を確認することができます。デザインの調整をするときに非常に便利なので覚えておいて下さい。

![6検証ツール画面の説明](https://gyakuten-app.s3-ap-northeast-1.amazonaws.com/texts/css/chrome_developer_6.png)

他にも Chrome 検証ツールには便利な機能があるので，調べてみるとフロントエンドのコーディングが上達します。

---



## フレックスボックス（display: flex;）

要素を横並びにする方法には，インラインブロックの他にフレックスボックスという方法があります。
インラインブロックが要素自体に設定するのに対して，フレックスボックスは親要素に設定することで子要素をどのように並べるか指定するプロパティです。

初めて親要素，子要素という言葉が出てきました。例を見るのが分かりやすいのでコードを追加してみましょう。

```boxmodel.html
  <div class=""parent"">
    <div class=""children"">子要素 1</div>
    <div class=""children"">子要素 2</div>
    <div class=""children"">子要素 3</div>
    <div class=""children"">子要素 4</div>
  </div>
```

```stylesheet.css
.parent {
  background-color: gray;
  padding: 10px;
  margin: 30px 0px;
}

.children {
  background-color: greenyellow;
  box-sizing: border-box;
  padding: 5px;
  margin: 10px;
}
```

parent クラス（親クラス）を持つ div タグの中に，4つの children クラス（子クラス）を持つ div タグが存在します。この4つの子クラスを囲む　div タグ(グレー)が親要素で，その中にある4つの div タグ（黄緑）が子要素です。

子要素が縦に並んでいることを確認して下さい。

フレックスボックスは `display: flex;` を親要素のクラスに指定します。早速追加してみましょう。

```stylesheet.css
.parent {
  background-color: gray;
  padding: 10px;
  margin: 30px 0px;
  /* 以下を追加 */
  display: flex;
  /* 以上を追加 */
}
```

子要素が横並びになったことを確認して下さい。親要素に追加することで子要素の並びに影響が出ましたね。これがフレックスボックスです。

しかしながら，厳密に言うとフレックスボックスは横並びにするためのプロパティではありません。デフォルトで横並びにする設定になっているだけです。次に設定を変える方法をみていきましょう。

`flex-direction` は要素を並べる向きを指定するプロパティです。デフォルトで `row`（横向き）になっています。`column`(縦向き)に変えていましょう。

```stylesheet.css
.parent {
  background-color: gray;
  padding: 10px;
  margin: 30px 0px;
  display: flex;
  /* 以下を追加 */
  flex-direction: column;
  /* 以上を追加 */
}
```

子要素が縦向きに戻りましたね。このようにプロパティを追加することで，子要素の並び方を変更することができます。

代表的なフレックスボックスで使えるプロパティを表にまとめます。

|プロパティ|用途|値|
|---|---|---|
|flex-direction|子要素を配置する向きを指定|row（初期値）, row-reverse, column, column-reverse|
|flex-wrap|子要素を配置する行数を，一行にするか複数行にするか指定|nowrap（初期値：一行）, wrap(複数行)|
|justify-content|左寄せ，中央寄せ，右寄せを指定|flex-start（初期値：左）, center(中央), flex-end（右）, space-around（等間隔）, space-between（両端を固定して等間隔）   |
|align-items|垂直方向のどの位置に配置するかを指定|stretch（初期値）, flex-start（上揃え）, flex-end（下揃え）, center（中央）|

この他にも，プロパティやその値，子要素に指定するプロパティなどが沢山あるので検索して色々試してみて下さい。

## 最終コード

```boxmodel.html
<!DOCTYPE html>
<html lang=""jp"">
  <head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>ボックスモデル</title>
    <link rel=""stylesheet"" href=""css/stylesheet.css"">
  </head>
  <body>
    <div class=""container"">
      吾輩わがはいは猫である。名前はまだ無い。どこで生れたかとんと見当けんとうがつかぬ。何でも薄暗いじめじめした所でニャーニャー泣いていた事だけは記憶している。吾輩はここで始めて人間というものを見た。しかもあとで聞くとそれは書生という人間中で一番獰悪どうあくな種族であったそうだ。この書生というのは時々我々を捕つかまえて煮にて食うという話である。しかしその当時は何という考もなかったから別段恐しいとも思わなかった。
    </div>
    <div class=""container"">
      吾輩わがはいは猫である。名前はまだ無い。どこで生れたかとんと見当けんとうがつかぬ。何でも薄暗いじめじめした所でニャーニャー泣いていた事だけは記憶している。吾輩はここで始めて人間というものを見た。しかもあとで聞くとそれは書生という人間中で一番獰悪どうあくな種族であったそうだ。この書生というのは時々我々を捕つかまえて煮にて食うという話である。しかしその当時は何という考もなかったから別段恐しいとも思わなかった。
    </div>
    <h2>ブロックレベル要素</h2>
    <p>ブロックレベル要素</p>
    <a>インライン要素</a>
    <span>インライン要素</span>
    <span>インライン要素</span>
    <div class=""parent"">
      <div class=""children"">子要素 1</div>
      <div class=""children"">子要素 2</div>
      <div class=""children"">子要素 3</div>
      <div class=""children"">子要素 4</div>
    </div>
  </body>
</html>
```

```stylesheet.css
h1 {
  color: blue;
}

.font-style {
  color: red;
}

/* キーワードによる色の指定 */
.keyword {
  color: orange;
  font-size: 30px;
  background-color: green;
}

/* 16進数による色の指定 */
.hexadecimal {
  color: #ffa500;
}

/* RGBによる色の指定 */
.rgb {
  color: rgb(255, 165, 0);
}

/* ゴシック体 */
.gothic {
  font-family: ""Hiragino Sans W3"", ""Hiragino Kaku Gothic ProN"", ""ヒラギノ角ゴ ProN W3"", ""メイリオ"", Meiryo, ""ＭＳ Ｐゴシック"", ""MS PGothic"", sans-serif;
}

/* 明朝体 */
.mincho {
  font-family:  ""游明朝"", YuMincho, ""Hiragino Mincho ProN W3"", ""ヒラギノ明朝 ProN W3"", ""Hiragino Mincho ProN"", ""HG明朝E"", ""ＭＳ Ｐ明朝"", ""ＭＳ 明朝"", serif;
}

.bg-image {
  background-image: url(""https://picsum.photos/id/237/300/200"");
  background-size: cover;
  width: 300px;
  height: 200px;
  text-align: center;
  line-height: 200px;
  font-size: 30px;
  color: white;
}

.container {
  background-color: tomato;
  width: 600px;
  height: 400px;
  border: solid 10px gray;
  padding: 50px 20px 30px 40px;
  margin-bottom: 50px;
  box-sizing: border-box;
  display: inline-block;
}

.parent {
  background-color: gray;
  padding: 10px;
  margin: 30px 0px;
  display: flex;
  flex-direction: column;
}

.children {
  background-color: greenyellow;
  box-sizing: border-box;
  padding: 5px;
  margin: 10px;
}
```"
HTML&CSS,CSS基礎（その2）,"## 中央寄せ

ここからはブログ記事のようなページを作っていきながら CSS プロパティについて学んでいきます。

画面のレイアウトでよく使うのが，中央寄せです。ブロック要素，ブロック要素内の行，フレックスボックスで中央寄せの方法がそれぞれ違うのでみていきましょう。

次のディレクトリ構造で，以下の `blog_sample.html`, `blog_sample.css` を作成して下さい。

```
css_sample
├── css
│   └── blog_sample.css
└── blog_sample.html
```

```blog_sample.html
<!DOCTYPE html>
<html lang=""jp"">
  <head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>ブログ</title>
    <link rel=""stylesheet"" href=""css/blog_sample.css"">
  </head>
  <body>
    <div class=""bg"">
    </div>
  </body>
</html>
```

```blog_sample.css
body {
  background-color: #ffe4c4;
  margin: 0;
}

.bg {
  width: 660px;
  /* 単位に100vhを用いると画面の高さに高さが設定される */
  height: 100vh;
  background-color: white;
  padding: 10px 50px 50px;
}
```

## ブロック要素の中央寄せ（margin: 0 auto;）

ブロック要素の中央寄せは，左右の margin に `auto` を指定してやることで反映されます。
左右の margin に `auto` を指定してやると左右に同じ幅の margin を設定してくれます。
margin を追加して，bg クラスの div 要素を画面の中央に持っていきましょう。

```blog_sample.css
.bg {
  width: 800px;
  height: 100vh;
  background-color: white;
  padding: 10px 50px 50px;
  /* 以下を追加 */
  margin: 0 auto;
  /* 以上を追加 */
}
```

白い背景が中央に移動したことを確認して下さい。ブログを表示するエリアが完成しました。

次は，アイキャッチ画像を挿入していきましょう。 `background-image` の使い方を思い出しながら次のコードを書いていきましょう。

```blog_sample.html
  <div class=""bg"">
    <!-- 以下を追加 -->
    <div class=""eyecatch"">
    </div>
    <!-- 以上を追加 -->
  </div>
```

```blog_sample.css
.eyecatch {
  background-image: url(""https://picsum.photos/id/0/1000/700"");
  /* 写真の中央を表示領域の真ん中に持ってくる */
  background-position: center;
  /* 表示領域の大きさに合うように写真の大きさを調節する */
  background-size: cover;
  /* bg の横幅いっぱいに写真を表示 */
  width: 100%;
  height: 400px;
  margin-bottom: 10px;
}
```

次にタイトルを，アイキャッチの上に追加していきます。

```blog_sample.html
  <div class=""eyecatch"">
    <!-- 以下を追加 -->
    <h1 class=""title"">作って覚える CSS レイアウト</h1>
    <!-- 以上を追加 -->
  </div>
```

```blog_sample.css
.title {
  background-color: white;
  /* opacity 透過率を 0~1 の間で指定 */
  opacity: 0.8;
  /* % で width を設定することで親要素に対する割合で幅を指定できる */
  width: 80%;
  line-height: 100px;
}
```



## 行の中央寄せ（text-align: center;）

タイトルの文字を中央寄せしてみましょう。
ブロック要素内の行の揃え位置を指定するのは `text-align` を使います。
中央寄せにするには値に `center` をつけます。早速やってみましょう。

```blog_sample.css
.title {
  background-color: white;
  opacity: 0.8;
  width: 80%;
  line-height: 100px;
  /* 以下を追加 */
  text-align: center;
  /* 以上を追加 */
}
```

白い背景の中でタイトルの文字が中央寄せになったことを確認して下さい。
次は，このタイトルを画像の中央に持ってきましょう。



## フレックスボックスを使った中央寄せ（justify-content: center;）

タイトルの中央寄せは，フレックスボックスを使って実現したいと思います。
フレックスのプロパティの表の中で既に出てきていますが，中央寄せは `justify-content: center;` を使います。
それではフレックスボックスの実装の仕方を思い出しながらコードを書いていきましょう。

```blog_sample.css
.eyecatch {
  background-image: url(""https://picsum.photos/id/0/1000/700"");
  background-position: center;
  background-size: cover;
  width: 100%;
  height: 400px;
  margin-bottom: 10px;
  /* 以下を追加 */
  display: flex;
  justify-content: center;
  /* 以上を追加 */
}
```

おっと，白い背景が画像いっぱいに広がってしまいました。これは `align-items` の初期値が `stretch`（高さいっぱいに要素を広げる）設定になっているからです。

 `align-items: center;` を追加して上下中央寄せ設定にしましょう。

```blog_sample.css
.eyecatch {
  /* 次を追加 */
  align-items: center;
}
```

タイトルとアイキャッチのデザインはこのくらいにしておいて，次はシェアボタンを作っていきましょう。



## 複数セレクタ, 子孫セレクタ, 子セレクタ

セレクタ指定の方法を学習しながら，シェアボタンを作っていきましょう。作りたいボタンは「Twitter」「LINE」「Facebook」の三種類です。

ボタンの作り方には色々ありますが，今回は a タグを使います。次のコードを追加して下さい。

```blog_sample.html
    <div class=""bg"">
      <div class=""eyecatch"">
        <h1 class=""title"">作って覚える CSS レイアウト</h1>
      </div>
      <!-- 以下を追加 -->
      <div class=""share-container"">
        <h3>Share</h3>
        <div class=""share-contents"">
          <a class=""twitter"" href=""#"">Twitter</a>
          <a class=""line"" href=""#"">LINE</a>
          <a class=""facebook"" href=""#"">Facebook</a>
        </div>
      </div>
      <!-- 以下を追加 -->
    </div>
```

```blog_sample.css
.share-container {
  margin: 50px 0;
}

h3 {
  /* h タグなどデフォルトで margin が設定されているものがある。 */
  /* デフォルト値があるとデザインしにくいので本来は初めにリセット用の CSS を書いておく。 */
  /* 「リセット CSS」で検索してみましょう。 */
  margin: 0;
}

.twitter {
  background-color: #1da0f2;
}

.line {
  background-color: #00b901;
}

.facebook {
  background-color: #42508c;
}
```

背景色をつけただけでは，とてもボタンに見えませんね。CSS を追加してボタンに近づけましょう。

追加する CSS は共通するものがほとんどなので，共通部分はまとめて記述してしまいましょう。ボタンの要素は全て a タグなのでセレクタに a を指定すれば全てのボタンに CSS を適用できそうですが，今後 a を使いたい場合にそれにもボタン用の CSS が適用されてしまいます。

そこで必要な知識がセレクタの指定方法です。
`複数セレクタ`, `子孫セレクタ`, `子セレクタ` について説明します。

下記の表の記述例は，今回のボタンに共通の CSS を適用するための例を書きました。どれを用いても共通の CSS を適用することができます。


|セレクタ|記述例|用途|
|---|---|---|
|複数セレクタ|.twitter, .line, .facebook {}|, カンマを入れてセレクタを指定することで，複数のセレクタに CSS を適用|
|子孫セレクタ|.share_contents a {}|セレクタの次に半角スペースを入れセレクタを指定。親要素内の全ての子要素（孫要素にまで）CSS を適用|
|子セレクタ|.share_contents > a {}|セレクタの次に「>」を入れセレクタを指定。指定の親要素内の一階層下の子要素にのみ CSS を適用|


複数セレクタは，a タグの各クラスを指定するので分かりやすいですね。

分かりにくいのが子孫セレクタと子セレクタです。以下のコードを追加して例をみてみましょう。

```blog_sample.html
<div class=""share-container"">
  <!-- 略 -->
  <!-- 以下を追加 -->
  <!-- 確認用です。子孫セレクタと子セレクタの確認が終わったら削除して下さい。 -->
  <div>
    LINK：<a href=""#"" class=""link"">https://www.csselectersample.com</a>
  </div>
  <!-- 以上を追加 -->
</div>
```

下のコードが子孫セレクタの例です。`share-container` クラスを持つ div タグの内部の全ての a タグに CSS が反映されていることを確認して下さい。

```blog_sample.css
.share-contents a {
  display: inline-block;
  color: white;
  width: 32%;
  text-align: center;
  /* 角を丸くする */
  border-radius: 5px;
  /* heightではなくline-heightを用いることで文字を上下中央寄せすることができる */
  line-height: 50px;
  /* a タグのデフォルトの装飾を無効にする */
  text-decoration: none;
  /* 影を追加 box-shadow: 左右の向きpx  上下の向きpx ぼかしpx 色;*/
  box-shadow: 2px 2px 4px gray;
}
```

次に，`.share-contents a` を子セレクタである `.share-contents > a` に変更してみましょう。

`share-container` クラスを持つ div タグの一階層下の a タグにのみ CSS が反映されていることを確認して下さい。

確認が終わったら，`.share-contents a` に戻し，確認用のコードは削除して次に進みましょう。

フレックスボックスを使ってボタンを等間隔に配置しましょう。

```blog_sample.css
.share-contents {
  padding: 5px 0;
  display: flex;
  justify-content: space-between;
}
```

ボタンらしくなってきましたね。今度はクリックしたときの動きをつけてみましょう。



## CSSを使って動きをつける（hover, active, transition）

まず，ボタンにカーソルを乗せた時にボタンの色を変えるようにしましょう。ボタンを乗せた時に CSS を反映させるためにはセレクタに `hover` をつけます。実際にコードを書きながら見ていきましょう。

```blog_sample.css
.share-contents a:hover {
  background-color: tomato;
}
```

例の様に `セレクタ:hover {}` と書くことで，カーソルを乗せた時に適用される CSS を指定することができます。
カーソルを乗せると色が変化することを確認して下さい。

次にカーソルを乗せた時の色の変化を遅延させることによって，じわっと色が変わるアニメーションにしていきましょう。

遅延させるためのプロパティは `transition` を使います。`transition: 遅延させたいプロパティ 変化にかかる時間;`のように書きます。次のコードを追加して確認してみましょう。

```blog_sample.css
.share-contents a:hover {
  /* 略 */
  /* 背景色を 0.8 秒で変化させる */
  transition: background-color .8s;
}
```

じわっと色が変化するアニメーションになりましたか？

次は，クリック時にボタンが凹んだように見せるようにしましょう。クリック時に CSS を反映させるためにはセレクタに `active` をつけます。次のコードを書いてみましょう。

```blog_sample.css
.share-contents a:active {
  /* position: relative; はボックスの左上の端を基準にして，top や left で基準からの移動距離を指定します。*/
  position: relative;
  /* box_shadowの幅の分移動させる */
  top: 2px;
  left: 2px;
  /* 影を消す */
  box-shadow: none;
}
```

クリック時の変化を確認してください。



## Font Awesome の使い方（ボタンやフォームに装飾）

次は，ボタンにアイコンをつけてみましょう。

「Font Awsome」という，様々なアイコンをフォントとして利用できるようにしたサービスがあります。

リンク：[Font Awsome](https://fontawesome.com/)

まず Font Awsome の CSS を読み込めるようにしましょう。head タグの一番下に次を追加して下さい。

```blog_sample.html
<head>
  <!-- 略 -->
  <link href=""https://use.fontawesome.com/releases/v5.6.1/css/all.css"" rel=""stylesheet"">
</head>
```

次に使いたいフォントを [Font Awsome](https://fontawesome.com/) のサイトから探しましょう。

1. キーワードで検索

![Font Awsome 検索](https://gyakuten-app.s3-ap-northeast-1.amazonaws.com/texts/css/FontAwesome_1.png)

2. リストの中から目的のアイコンを探す。

![Font Awsome アイコン選択](https://gyakuten-app.s3-ap-northeast-1.amazonaws.com/texts/css/FontAwesome_2.png)

3. HTML 文をクリックしてコピーする。

![Font Awsome アイコン選択](https://gyakuten-app.s3-ap-northeast-1.amazonaws.com/texts/css/FontAwesome_3.png)


コピーした HTML をボタンの a タグの中に埋め込みましょう。

```blog_sample.html
<div class=""bg"">
  <!-- 略 -->
  <!-- 下記のようにコピーしてきたものを Twitter の文字の前に挿入 -->
    <a class=""twitter"" href=""#""><i class=""fab fa-twitter""></i> Twitter</a>
</div>
```

残りの2つも実装してみて下さい。これでシェアボタンは完成です。お疲れ様でした。

あともう少しだけコードを追加してブログに近づけましょう。

```blog_sample.html
<div class=""bg"">
  <!-- 以下を追加 -->
  <div class=""container"">
    <h2>はじめに</h2>
    <hr>
    <p class=""intro"">ここに文章が入ります</p>
    <hr>
  </div>
  <div class=""container"">
    <h2>本文</h2>
    <hr>
    <p class=""main"">ここに文章が入ります</p>
    <hr>
  </div>
  <!-- 以上を追加 -->
</div>
```

```blog_sample.css
.intro {
  height: 100px;
}

.main {
  height: 200px;
}
```

白い表示領域から要素がはみだすので，bg クラスの `height: 100vh;` を削除しましょう。

```blog_sample.css
.bg {
  /* 以下のコードを削除 */
  height: 100vh;
}
```

ブログの見た目はこのくらいにしておきます。
このページは，ヘッダーやフッターも無いので不完全です。興味のある方は実装してみて下さい。



## スマホ対応

今まで作ってきたブログのページは，PC での表示を想定して作ってきました。しかし，web ページやブログを見るのはスマホが一番多いのではないでしょうか？ PC とスマホでは画面のサイズが大きく違いますし，縦横の比率も違うので PC 用の画面レイアウトのままでは不都合が生じます。そのため異なる画面サイズのデバイスに対応させるための CSS デザインが必要になります。これを`レスポンシブルデザイン`といいます。

レスポンシブルデザインでよく用いられるのが，画面の横幅に応じて CSS を変更する設定です。そのために web ページを表示させる画面の横幅を認識させる設定が必要になってきます。実は，その設定は既に完了しています。HTML の head タグの中にある下記の記述がそれです。

```blog_sample.html
 <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
```

これは， `width=device-width`（デバイス・画面の幅）を `viewport`（ページの表示領域）に設定するという意味です。これだけ言われてもピンと来ないと思うので，レスポンシブルデザインを実装していきながら確認していきましょう。



## メディアクエリ（max-width, min-width）

ここからは，先ほど作成したブログをスマホに対応させていきます。

まず，「画面の横幅に応じて CSS を変更する設定」の書き方についてみていきましょう。
記述方法は次の通りです。

```blog_sample.css
@media screen and (max-width: 767px) {
  .bg {
    box-sizing: border-box;
    width: 100%;
    padding: 10px 30px 30px;
  }
}
```

`@media screen and (max-width: 767px) {}` が「画面の横幅に応じて CSS を変更する設定」の部分です。
これは「画面サイズが 767 までの時に {} 内の CSS を適用する。」という意味になります。ここで言う画面サイズとは先ほど設定した `width=device-width` のことです。

767 の値を `ブレイクポイント`といいます。この値を境に適用する CSS が代わります。767 値は自由に決めることができますが，ここでは ipad（タブレット）の幅 768 よりも小さい画面サイズをスマホと考えて表示させる設定にしています。

---

767px と言わないのは，スマホ画面の横幅のピクセル数とビューポートで設定される横幅が異なるためです。

スマホ画面の解像度が上がり 1000px 以上あるスマホが一般的になりましたが，そのままのピクセル数で web ページを表示してしまうと非常に小さい表示になってしまいます。そこでビューポートでは 360 などの小さい値が設定されます。

---


上記の例では，外枠（bg クラスを持った div タグ）の横幅を画面サイズに合わせるために width: 100%; に設定し，padding の幅を小さくしています。

このコードをアイキャッチ関連の CSS が書かれている箇所の一番下に貼り付けて下さい。
なぜ一番下に記述するかというと，「CSS は下の行に書かれたコードで先に書かれた同じプロパティの値を上書きする」というルールがあるためです。

コードを追加する前後で，ブラウザの横幅をドラッグして伸縮させてアイキャッチの写真のサイズが画面の横幅に合わせて変化するようになることを確認して下さい。

画面を小さくすると画面に対して，アイキャッチの高さとタイトル背景の高さが高すぎるので修正しましょう。
次のコードを追加して下さい。

```blog_sample.css
@media screen and (max-width: 767px) {
  /* 略 */
  /* 以下を追加 */
  .eyecatch {
    height: 300px;
  }

  .title {
    line-height: 50px;
  }
  /* 以上を追加 */
}
```

次に，画面幅を小さくするとタイトルが変なところで改行される問題を解決しましょう。
スマホでは，タイトルを二段表示にすることにします。

次のコードを追加して下さい。

```blog_sample.html
<!-- br タグを挿入 -->
<h1 class=""title"">作って覚える<br class=""sp-br""> CSS レイアウト</h1>
```

```blog_sample.css
/* 注意: max-width ではありません */
@media screen and (min-width: 768px) {
  .sp-br{
    display: none;
  }
}
```

`@media screen and (min-width: 768px)` は先ほどの max-width の逆で「画面サイズが 768 以上の時に {} 内の CSS を適用する」という意味になります。
上記のコードは，画面サイズが 768 以上の時には br タブを適用しない設定になります。

ブラウザの横幅を伸縮させて確認してみて下さい。

最後にシェアボタンをスマホ表示では縦並びにして，画面幅いっぱいに広げるようにしてみましょう。
下の答えを見ずに実装してみて下さい。

```blog_sample.css
/* 注意: min-width ではありません */
@media screen and (max-width: 768px) {
  /* 以下を追加 */
  .share-contents {
    flex-direction: column;
  }

  .share-contents a {
    width: 100%;
    margin-bottom: 10px;
  }
}
```

---
## Chrome 検証ツールを使ったレスポンシブルデザインの確認

Chrome の検証ツールを使ったスマホ表示の確認方法を紹介します。
下の写真のスマホ・タブレットのアイコンを押します。次に画面上のプルダウンメニューから確認したいデバイスを選択すると画面がそのデバイスのサイズになります。

![7検証機能 レスポンシブル確認](https://gyakuten-app.s3-ap-northeast-1.amazonaws.com/texts/css/chrome_developer_7.png)

---


## まとめ

CSS は静的な web ページの見た目を作っていくのに非常に重要です。

今回紹介したものの他にも沢山のプロパティが存在しますし，一つのデザインを作るのにも何通りもの書き方が出来るため非常に奥が深いです。

しかし，学習を進めて CSS の理解が深まると自分の思い通りのデザインを実現できるようになるため，学習をしていて楽しい分野でもあります。

ぜひ学習を進めて，自分のポートフォリオサイトをデザインしてみて下さい。

今回はこれで以上になります。

お疲れ様でした。

## 最終コード

```blog_sample.html
<!DOCTYPE html>
<html lang=""jp"">
  <head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>ブログ</title>
    <link rel=""stylesheet"" href=""css/blog_sample.css"">
    <link href=""https://use.fontawesome.com/releases/v5.6.1/css/all.css"" rel=""stylesheet"">
  </head>
  <body>
    <div class=""bg"">
      <div class=""eyecatch"">
        <h1 class=""title"">作って覚える<br class=""sp-br""> CSS レイアウト</h1>
      </div>
      <div class=""share-container"">
        <h3>Share</h3>
        <div class=""share-contents"">
          <a class=""twitter"" href=""#""><i class=""fab fa-twitter""></i> Twitter</a>
          <a class=""line"" href=""#""><i class=""fab fa-line""></i> LINE</a>
          <a class=""facebook"" href=""#""><i class=""fab fa-facebook-f""></i> Facebook</a>
        </div>
      </div>
      <div class=""container"">
        <h2>はじめに</h2>
        <hr>
        <p class=""intro"">ここに文章が入ります</p>
        <hr>
      </div>
      <div class=""container"">
        <h2>本文</h2>
        <hr>
        <p class=""main"">ここに文章が入ります</p>
        <hr>
      </div>
    </div>
  </body>
</html>
```

```blog_sample.css
body {
  background-color: #ffe4c4;
  margin: 0;
}

.bg {
  width: 660px;
  background-color: white;
  padding: 10px 50px 50px;
  margin: 0 auto;
}

.eyecatch {
  background-image: url(""https://picsum.photos/id/0/1000/700"");
  background-position: center;
  background-size: cover;
  width: 100%;
  height: 400px;
  margin-bottom: 10px;
  display: flex;
  justify-content: center;
  align-items: center;
}

.title {
  background-color: white;
  opacity: 0.8;
  width: 80%;
  line-height: 100px;
  text-align: center;
}

.twitter {
  background-color: #1da0f2;
}

.line {
  background-color: #00b901;
}

.facebook {
  background-color: #42508c;
}

.share-contents {
  padding: 5px 0;
  display: flex;
  justify-content: space-between;
}

.share-contents a {
  display: inline-block;
  color: white;
  width: 32%;
  text-align: center;
  border-radius: 5px;
  line-height: 50px;
  text-decoration: none;
  box-shadow: 2px 2px 4px gray;
}

.share-contents a:hover {
  background-color: tomato;
  transition: background-color .8s;
}

.share-contents a:active {
  position: relative;
  top: 2px;
  left: 2px;
  box-shadow: none;
}

.intro {
  height: 100px;
}

.main {
  height: 200px;
}

@media screen and (max-width: 767px) {
  .bg {
    box-sizing: border-box;
    width: 100%;
    padding: 10px 30px 30px;
  }

  .eyecatch {
    height: 300px;
  }

  .title {
    line-height: 50px;
  }

  .share-contents {
    flex-direction: column;
  }

  .share-contents a {
    width: 100%;
    margin-bottom: 10px;
  }
}

@media screen and (min-width: 768px) {
  .sp-br{
    display: none;
  }
}
```"
HTML&CSS,Sass基礎,"## Sassとは？

`Sass` とは CSS のメタ言語で，CSS をより効率的に書けるように開発された言語です。CSS の場合，長く複雑になってしまう記述を分かりやすくシンプルに書く事ができます。

Sass には `SASS` 記法と `SCSS` 記法の二種類があります。

`SASS` 記法は「{}」や「;」を使わないので記述数を少なくする事ができますが，CSS と表記が大きく異なるため初めて使う人にはとっつきにくいです。そのため，CSS と表記が似ている `SCSS` が主流になっています。この章でも SCSS 記法について説明していきます。

Sass を使うメリットを下にまとめます。

- Sass のメリット
  - セレクタやプロパティの記述量が減る。(ネスト，& 記号)
  - 変数で値を使いまわすことができるため，メンテナンスしやすくなる。（変数）
  - 複雑なコードを使いまわせる。（mixin, include）
  - 定義したスタイルのセットを簡単に呼び出せる。(import)

一つずつ順に使い方を解説していきます。

CSS教材2 で作成したブログ記事の CSS を Sass に変更していきながら使い方を覚えてい来ましょう。



## Sassを書くための環境構築（VScode）

まず，Sassを書くための環境構築をしていきましょう。
Sass を HTML から直接読み込むことはできないので，Sass を CSS へ変換（コンパイル）する必要があります。Sass をコンパイルするための拡張機能を VScode にインストールしましょう。

1.VScode の拡張機能の検索画面に `Live Sass Compiler` と入力

![コンパイラーの検索](https://gyakuten-app.s3-ap-northeast-1.amazonaws.com/texts/sass/LiveSassCompiler_1.png)

2.`Live Sass Compiler` を選択しインストールをクリック

![コンパイラーのインストール](https://gyakuten-app.s3-ap-northeast-1.amazonaws.com/texts/sass/LiveSassCompiler_2.png)

3.[動作確認] 拡張子が「.scss」の `test.scss` ファイルを作成し，フッターの `Wathch Sass` をクリック

![動作確認1](https://gyakuten-app.s3-ap-northeast-1.amazonaws.com/texts/sass/LiveSassCompiler_3.png)

4.[動作確認] `test.css` と `test.css.map` が `test.scss` と同じディレクトリに作成されれば OK!


## 準備

CSS教材2 で作成した `css_sample` ディレクトリをコピーして `scss_sample` を用意して下さい。

（CSS教材2 を学習されていない場合は，CSS教材2 の一番下にある最終コードをコピペしてファイルを作成して下さい）

`blog_sample.css` の拡張子を `scss` に変更し，`blog_sample` 以外のファイルを削除して，次のディレクトリ構造にして下さい。

```
sass_sample
├── css
│   └── blog_sample.scss
└── blog_sample.html
```

`blog_sample.scss` のコードはまだ CSS ですが，ここから順に SCSS 記法に変更していきます。



## 入れ子構造（ネスト）

SCSS 記法ではセレクタを入れ子構造（ネスト）にする事ができます。具体的に例をみていきましょう。

CSS で書かれた次のコードは SCSS 記法では，次のように入れ子構造にする事ができます。

```blog_sample.css
/* CSS */

.share-contents {
  padding: 5px 0;
  display: flex;
  justify-content: space-between;
}

.share-contents a {
  display: inline-block;
  color: white;
  width: 32%;
  text-align: center;
  border-radius: 5px;
  line-height: 50px;
  text-decoration: none;
  box-shadow: 2px 2px 4px gray;
}
```


```css:blog_sample.scss
/* SCSS 記法 */

.share-contents {
  padding: 5px 0;
  display: flex;
  justify-content: space-between;

  a {
    display: inline-block;
    color: white;
    width: 32%;
    text-align: center;
    border-radius: 5px;
    line-height: 50px;
    text-decoration: none;
    box-shadow: 2px 2px 4px gray;
  }
}
```

このように，カッコの中に下層のセレクタとカッコを入れるという書き方で，入れ子にすることができます。

`Watch Sass` をクリックして Live Sass Compiler を起動した状態で保存すると，`blog_sample.scss` のコンパイル結果が `blog_sample.css` に反映されます。`blog_sample.css` を確認して，もとの CSS のコードに戻っていることを確認して下さい。

もし，コンパイルされない時は，SCSS の書き方に問題があるのでログを確認して修正して下さい。

`@media screen` 内の `.share-contents`, `.share-contents a` も同様に書き換えてみましょう。

---

コンパイル結果に「-webkit-」や「-moz-」などが付いたプロパティが現れましたね。これはベンダープレフィックスと言って，ブラウザで先行実装されている CSS を利用するのに必要な表記です。簡単に言うと，ブラウザよっては適用されない CSS があるため，そのブラウザに対応させるために上記のような書き方をする必要があります。

`Live Sass Compiler` は，デフォルトでベンザープレフィックスを付与する設定になっているためコンパイル結果に記述が追加されました。

---

上記の例では子孫セレクタが使われていますが，子セレクタを使うと次のように `>` をセレクタの前に付けて表記します。

```css:blog_sample.scss
.share-contents {
  /* 略 */

  > a {
    /* 略 */
  }
}
```

こちらも，コンパイル結果を確認して CSS 表記に戻っていることを確認して下さい。

SCSS 記法ではさらに，プロパティのネストも可能です。プロパティをネストすると次の例のように記述数を少なくする事ができます。

`SCSS 記法`

```css
p {
  padding: 5px 10px;
  margin: 10px {
    bottom: 20px;
  }
}
```

コンパイル結果は，次のようになります。

`CSS`

```css
p {
  padding: 5px 10px;
  margin: 10px;
  margin-bottom: 20px;
}
```

---

## SCSS 記法のコメントの書き方

`//` を行の先頭に付けるとコメントを書く事ができます。しかし，コンパイル結果には反映されません。

コメントをコンパイル後のファイルにも残したい場合や複数行のコメントを記述したい場合は，`/* */` を使用します。

---



## & 記号

ボタンに動きを付けたときに使用した `hover` や `active` のような擬似クラスをネストするときには `&` 記号を使用します。
`&` を付けると親クラスを参照することができます。

例をみていきましょう。

```css:blog_sample.scss
.share-contents {
  /* 略 */

  a {
    /* 略 */
  }
}

/* CSS 記法 */

.share-contents a:hover {
  background-color: tomato;
  transition: background-color .8s;
}

.share-contents a:active {
  position: relative;
  top: 2px;
  left: 2px;
  box-shadow: none;
}
```

この CSS で書かれた擬似クラスですが SCSS 記法では次のように書く事ができます。

```css:blog_sample.scss
/* SCSS 記法 */

.share-contents {
  /* 略 */

  a {
    /* 略 */

    &:hover {
      background-color: tomato;
      transition: background-color .8s;
    }

    &:active {
      position: relative;
      top: 2px;
      left: 2px;
      box-shadow: none;
    }
  }
}
```

コンパイル結果を確認し，もとの CSS の記述になっていることを確認して下さい。
セレクタの記述量をかなり減らす事ができましたね。



## 変数

Sass では変数を使う事ができます。
変数を使う事でサイトのメンテナンス性を上げる事ができます。

例えばブログサイトのテーマカラーを決めて，色々なところでその色のカラーコードを使う事を考えて下さい。

テーマカラーを変えたくなったときに，CSS では16進数や rgb で書かれたカラーコードを使用されているところ全てで変更しなければならず大変です。また，変更し忘れなどの，エラーの原因にもなります。

決めたカラーコードを変数に格納し本来カラーコードを書く所に変数を入れておくと，変数に格納する値を一つ変えるだけで全ての箇所に反映させる事ができるようになります。

また，メディアクエリのブレイクポイントを変数にして1箇所で管理するという使い方もできますし，お気に入りのカラーコードやフォント名を変数にして使用することもできます。

では，変数の使い方を説明します。

SCSS 記法では，変数を定義する場合は`$セレクタ名: 値;` ,変数を使用する場合は`$セレクタ名`と書きます。

例を見ていきましょう。

```blog_sample.css
  /* CSS 記法 */

  body {
    background-color: #FFE4C4;
    margin: 0;
  }
```

ブログの背景色をテーマカラーとして変数に格納すると，次のように書き換えることができます。

```css:blog_sample.scss
  /* SCSS 記法 */

  $theme-color: #FFE4C4;

  body {
    background-color: $theme-color;
    margin: 0;
  }
```


## mixin, include

`mixin`, `include` を使えば，同じ CSS スタイルを使い回す事ができます。

定義する場合は `@mixin ミックスイン名 { CSS }` ，読み込む場合は `@include 定義したミックスイン名;` のように書きます。

実際にコードを書いてみていきましょう。今回はブログの見出しの頭に縦線を入れて装飾を加えていきます。

次のコードを追加して下さい。

```css:blog_sample.scss
@mixin headline-style {
  /* 色には $theme-color を使用 */
  border-left: solid 10px $theme-color;
  /* 文字色をグレーに変更 */
  color: #383838;
}

h2 {
  @include headline-style;
  /* フォントサイズに合わせてpaddingを変更 */
  padding-left: 20px;
}

h3 {
  @include headline-style;
  /* フォントサイズに合わせてpaddingを変更 */
  padding-left: 15px;
}
```

コンパイル後の結果を確認して，mixin で定義された CSS スタイルが h2 と h3 に反映されている事を確認して下さい。

---

話はそれますが，背景色と見出しの装飾の色は同じ変数を利用しています。変数に格納したカラーコードを変更して背景色と見出しの装飾の色の変化を確認してみましょう。

---

mixin は引数も扱う事ができます。例をみていきましょう。

`@mixin headline-style` の箇所を次に置き換えて下さい。

```css:blog_sample.scss
@mixin headline-style($bg-color) {
  border-left: solid 10px $bg-color;
  color: #383838;
}
```

このように，ミックスイン名の後に（）を付けて，その中に引数を指定します。

使用方法は次のように，カッコの中に実際の値やあらかじめ定義しておいた変数を入れて使用します。
基本的なスタイルは同じで，一部だけその都度変更したい時に便利です。

```css:blog_sample.scss
h2 {
  @include headline-style($theme-color);
  padding-left: 20px;
}

h3 {
  @include headline-style(#EE4056);
  padding-left: 15px;
}
```

また，引数の後ろに `:` を付けてその後ろに初期値を指定することもできます。
基本的なスタイルは同じにしておいて，特定の場所でのみスタイルを変更したい時に便利です。


```css:blog_sample.scss
@mixin headline-style($color:$theme-color) {
  border-left: solid 10px $color;
  color: #383838;
}

h2 {
  @include headline-style();
  padding-left: 20px;
}

h3 {
  @include headline-style(#EE4056);
  padding-left: 15px;
}
```



## import

@import を使用すると，SCSS ファイルから別の SCSS ファイルを読み込む事ができます。
記述方法は `@import ""ファイルパス"";` です。読み込まれる方のファイル名は `_` から始める必要があります。ファイルパスを指定する時は `_` を省いたファイル名を書かないといけないので注意して下さい。

@importを使えば，ブログのパーツごとに SCSS ファイルに保存しておいて，ページの作成時に読み込むというような使い方ができます。

ブログでは本来このような使い方をする事が無いと思いますが，例としてアイキャッチとタイトルのスタイルを別ファイルに切り離し，`blog_sample.scss` のファイルに読み込んでみましょう。

次のディレクトリ構造になるように，modules ディレクトリと `_eyechatch.scss` を作成して下さい。

```
sass_sample
├── css
|   ├── modules
│   |   └── _eyechatch.scss
|   |
|   ├── blog_sample.css
|   ├── blog_sample.css.map
│   └── blog_sample.scss
|
└── blog_sample.html
```

`blog_sample.scss` の中のアイキャッチ部分に関わるスタイルをメディアクエリ含めて `_eyechatch.scss` に移しましょう。

```css:_eyechatch.scss

.eyecatch {
  background-image: url(""https://picsum.photos/id/0/1000/700"");
  background-position: center;
  background-size: cover;
  width: 100%;
  height: 400px;
  margin-bottom: 10px;
  display: flex;
  justify-content: center;
  align-items: center;
}

.title {
  background-color: white;
  opacity: 0.8;
  width: 80%;
  line-height: 100px;
  text-align: center;
}

@media screen and (max-width: 767px) {
   .eyecatch {
    height: 300px;
  }

  .title {
    line-height: 50px;
  }
}

@media screen and (min-width: 768px) {
  .sp-br {
    display: none;
  }
}
```

`blog_sample.scss` から移動させたコードを削除したら，`_eyechatch.scss` を読み込むコードを `blog_sample.scss` の一番上に追加しましょう。


```css:blog_sample.scss
@import ""./modules/eyechatch.scss"";
```

コンパイル結果とブラウザ上での表示を確認し，`_eyechatch.scss` が読み込めた事を確認して下さい。

このようにすると，別のページに同じスタイルを適用したい場合に，使い回す事ができるようになり，重複したコードを書く必要がなくなります。



## まとめ


Sass は CSS をより効率的に書くために開発されたメタ言語です。

今回紹介したものの他にも便利な機能が存在するので，是非調べてみて下さい。

Sass を使いこなせるようになると, サイトのメンテナンス性を飛躍的に向上させることができるので積極的に使用して覚えて下さい。

今回はこれで以上です。

お疲れ様でした。



## 最終コード

```css:blog_sample.scss
@import ""./modules/eyechatch.scss"";

$theme-color: #ffe4c4;

@mixin headline-style($color: $theme-color) {
  border-left: solid 10px $color;
  color: #383838;
}

body {
  background-color: $theme-color;
  margin: 0;
}

h2 {
  @include headline-style();
  padding-left: 20px;
}

h3 {
  @include headline-style(#ee4056);
  padding-left: 15px;
}

.bg {
  width: 660px;
  background-color: white;
  padding: 10px 50px 50px;
  margin: 0 auto;
}

.twitter {
  background-color: #1da0f2;
}

.line {
  background-color: #00b901;
}

.facebook {
  background-color: #42508c;
}

.share-contents {
  padding: 5px 0;
  display: flex;
  justify-content: space-between;

  > a {
    display: inline-block;
    color: white;
    width: 32%;
    text-align: center;
    border-radius: 5px;
    line-height: 50px;
    text-decoration: none;
    box-shadow: 2px 2px 4px gray;

    &:hover {
      background-color: tomato;
      transition: background-color 0.8s;
    }

    &:active {
      position: relative;
      top: 2px;
      left: 2px;
      box-shadow: none;
    }
  }
}

.intro {
  height: 100px;
}

.main {
  height: 200px;
}

@media screen and (max-width: 767px) {
  .bg {
    box-sizing: border-box;
    width: 100%;
    padding: 10px 30px 30px;
  }

  .share-contents {
    flex-direction: column;
    a {
      width: 100%;
      margin-bottom: 10px;
    }
  }
}
```


```css:_eyechatch.scss
.eyecatch {
  background-image: url(""https://picsum.photos/id/0/1000/700"");
  background-position: center;
  background-size: cover;
  width: 100%;
  height: 400px;
  margin-bottom: 10px;
  display: flex;
  justify-content: center;
  align-items: center;
}

.title {
  background-color: white;
  opacity: 0.8;
  width: 80%;
  line-height: 100px;
  text-align: center;
}

@media screen and (max-width: 767px) {
  .eyecatch {
    height: 300px;
  }

  .title {
    line-height: 50px;
  }
}

@media screen and (min-width: 768px) {
  .sp-br {
    display: none;
  }
}
```"
HTML&CSS,Bootstrap教材（その1）,"# Bootstrapとは

「Bootstrap」はTwitter社が開発した、CSS, JavaScript, jQueryのフレームワークです。

通常、Webページを作成する場合には、自分で作成したHTMLに対してCSSを書くことで、スタイルを適用させてきます。
このBootstrapは、あらかじめページレイアウト・ボタン・フォームおよびグリッドシステムなど基本のデザインに不可欠な要素がテンプレートの形で用意されており、それを利用することで個別のCSSを書く必要がなく、Webページを制作する際の時間短縮にもつながります。

また、Bootstrapを利用することで、PC、タブレット、スマートフォンなど表示するデバイスによって画面の大きさが異なる場合にも、柔軟にレイアウト変更できるレスポンシブデザインを適用することが可能となります。

Bootstrapを使用することで、[このようなページ](https://getbootstrap.jp/docs/4.4/examples/offcanvas/)を作成できます。

## 本講座の参考先のサイト
[Bootstrap 公式サイト（日本語版）](https://getbootstrap.jp/)

# Bootstrapの導入方法

本章では、自分のPC上にBootstrapを導入する方法を説明します。


## 本章の参考ページ
[Bootstrap | Introduction](https://getbootstrap.jp/docs/4.4/getting-started/introduction/)

## Bootstrapの導入とサンプルスタイル適用の確認
Bootstrapの導入方法としては、以下の二通りあります。

- Bootstrapの公式サイトから、必要なソースファイルをローカル環境にダウンロード
- HTMLファイル内にコンテンツ取得先を記載

今回は、導入が容易な、後者の「HTMLファイル内にコンテンツ取得先を記載」の方法で実施します。
以下の[公式サイトのスターターテンプレート](https://getbootstrap.jp/docs/4.4/getting-started/introduction/)をコピーしてhtmlファイルを作成し保存します。

```html
<!doctype html>
<html lang=""ja"">
  <head>
    <meta charset=""utf-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1, shrink-to-fit=no"">

    <link rel=""stylesheet"" href=""https://stackpath.bootstrapcdn.com/bootstrap/4.5.0/css/bootstrap.min.css"" integrity=""sha384-9aIt2nRpC12Uk9gS9baDl411NQApFmC26EwAOH8WgZl5MYYxFfc+NcPb1dKGj7Sk"" crossorigin=""anonymous"">
    <title>Hello, world!</title>
  </head>
  <body>
    <h1>Hello, world!</h1>

  <script src=""https://code.jquery.com/jquery-3.5.1.slim.min.js"" integrity=""sha384-DfXdz2htPH0lsSSs5nCTpuj/zy4C+OGpamoFVy38MVBnE+IbbVYUew+OrCXaRkfj"" crossorigin=""anonymous""></script>
  <script src=""https://cdn.jsdelivr.net/npm/popper.js@1.16.0/dist/umd/popper.min.js"" integrity=""sha384-Q6E9RHvbIyZFJoft+2mJbHaEWldlvI9IOYy5n3zV9zzTtmI3UksdQRVvoxMfooAo"" crossorigin=""anonymous""></script>
  <script src=""https://stackpath.bootstrapcdn.com/bootstrap/4.5.0/js/bootstrap.min.js"" integrity=""sha384-OgVRvuATP1z7JjHLkuOU7Xw704+h835Lr+6QL9UvYjZE3Ipu6Tp75j7Bh/kR0JKI"" crossorigin=""anonymous""></script>
  </body>
</html>
```

はい、これでBootstrapを使用する準備は完了です。

早速このhtmlファイルをブラウザで開いてみましょう。
何の変哲もない、「Hello, world!」という文字が表示されました。
![Bootstrap適用前](https://gyakuten-app.s3-ap-northeast-1.amazonaws.com/texts/bootstrap1/1-1_helloworld.png)

次にBootstrapが適用されたことを確認するために、`<h1>`タグの部分に以下のようにclassを追加してみます。

```html
<h1 class=""text-center text-primary"">Hello, world!</h1>
```

すると、「Hello, world!」の文字が青色になり、中央寄せにレイアウトされています。
![Bootstrap適用後](https://gyakuten-app.s3-ap-northeast-1.amazonaws.com/texts/bootstrap1/1-2_helloworld_edit.png)

自分でCSSを設定していないにもかかわらず、スタイルが適用されたのはなぜでしょうか？これは`text-center`,`text-primary`クラスに対して、Bootstrapがすでに用意していたスタイルが適用されたためです。

実際にどの様なスタイルが適用されているかをブラウザの検証機能を使って、確認します。
検証機能を開き、「Hello, world!」の文字列を選択し、Stylesパネルを確認しましょう。
以下の通り、`text-primary`クラスには、`color:#007bff`が、`text-center`クラスには`tex-align: center`のスタイルがそれぞれ適用されていることが分かるかと思います。

- 検証機能のStylesパネル

![ブラウザのスタイルパネル](https://gyakuten-app.s3-ap-northeast-1.amazonaws.com/texts/bootstrap1/1-3_browseStyle.png)

このように、htmlタグにBootstrapで定められたclass名を付与することで、Bootstrapで用意されているスタイルを利用できます。

それでは、次章から実際のBootstrapの各スタイルを試してみましょう。


# パディング・マージン

本章では、Bootstrapを使用した「パディング」、「マージン」の設定方法を説明します。
HTMLの各要素のクラスに`p`または`m`と数字を組み合わせて指定することで、「パディング」もしくは「マージン」を設定できます。

## 本章の参考ページ

[Bootstrap公式サイト|Spacing](https://getbootstrap.jp/docs/4.4/utilities/spacing/)

## 基本的な使い方

Bootstrapにおける「パディング」、「マージン」のclass名は、以下の形式で指定します。

**```{property(プロパティ)}{sides（上下左右の位置）}-{size（サイズ）}```**


#### property（プロパティ）
適用させるスタイルが「パディング」または「マージン」のどちらかを指定します。

|  値 | 内容|
|:-----|:----|
|`p` | padding（パディング） |
|`m` | margin（マージン）|

#### sides（上下左右の位置）

「パディング」もしくは「マージン」を適用させる上下左右の位置を指定します。
※なお、指定しない場合は、「上下左右」すべてに「パディング」または「マージン」が設定されます。

|  値 | 内容|
|:-----|:----|
| `t` | top(上側）|
| `b` | bottom(下側）|
| `l` | left（左側）|
| `r` | right（右側）|
| `x` | left & right（左側と右側の水平方向）|
| `y` | top & bottom（上側と下側の垂直方向）|


#### size（サイズ）

適用させる間隔のサイズを指定します。
Bootstrap 4では、サイズの単位は「rem」が設定されています。(標準で1rem=16px)

|  値 | 内容|
|:-----|:----|
| `0` | 0（つまり、「マージン」、「パディング」を設定しない）|
| `1` | 0.25rem|
| `2` | 0.5rem|
| `3` | 1rem|
| `4` | 1.5rem|
| `5` | 3rem|
| `auto` | `margin: auto`が設定されます。<br>※プロパティが`m`（マージン）の場合のみ  |

## スタイルの適用例

「パディング」、「マージン」のスタイル適用例を記載します。

- ブラウザの表示

※マージン、パディングをわかりやすくするため、divブロックの背景を青色に設定しています。

![example](https://gyakuten-app.s3-ap-northeast-1.amazonaws.com/texts/bootstrap1/3-1_example.png)

- htmlファイルの記載内容

```html
<div class=""my-4"">上下にサイズ4(1.5rem)のマージンを設定します</div>
<div class=""pl-3"">左にサイズ3(1rem)のパディングを設定します</div>
<div class=""mt-2 p-3"">上にサイズ2(0.5rem)のマージンを設定し、上下左右にサイズ3(1rem)のパディングを設定します</div>
```

# 中央寄せ（センタリング）

本章では、Bootstrapの中央寄せの方法について説明します。
同じ「中央寄せ」であっても、適用させる要素のプロパティによって、使用するスタイルクラスが異なります。

## 本章の参考ページ

[Bootstrap公式サイト| Text ](https://getbootstrap.jp/docs/4.4/utilities/text/)
[Bootstrap公式サイト| Horizontal centering ](https://getbootstrap.jp/docs/4.4/utilities/spacing/#horizontal-centering)
[Bootstrap公式サイト| Justigy Content ](https://getbootstrap.jp/docs/4.4/utilities/flex/#justify-content)

## インライン要素の中央寄せ

テキストなどのインライン要素を中央寄せする際には`text-center`クラスを使用します。
CSSの` text-alignment: center`に相当します。

また、インライン要素を寄せ・右寄せする場合には、それぞれ`text-left`,`text-right`のスタイルクラスを使用します。

- 表示例

![](https://gyakuten-app.s3-ap-northeast-1.amazonaws.com/texts/bootstrap1/2020-04-30-20-24-07.png)

- ソースコード

```html
  <div class=""container border p-3"">
    <p class=""text-center"">中央寄せのインライン要素</p>
    <p class=""text-left"">左寄せのインライン要素</p>
    <p class=""text-right"">右寄せのインライン要素</p>
  </div>
```

## ブロック要素の中央寄せ

固定幅のブロック要素を中央寄せする際には、`mx-auto`使用します。
CSSの `margin: 0 auto`に相当し、固定幅の要素の左右両側のマージンのサイズを自動設定します。

なお、Bootstrap 3まで使われていた`center-block`クラスは廃止され、Bootstrap 4からこの`mx-auto`クラスが実装されています。

- 表示例

![](https://gyakuten-app.s3-ap-northeast-1.amazonaws.com/texts/bootstrap1/2020-04-30-20-23-16.png)

- ソースコード

```html
 <div class=""container border p-3 my-3"">
    <div class=""mx-auto bg-primary text-white"" style=""width: 200px;"">
      中央寄せのブロック要素
    </div>
  </div>
  <div class=""container border clearfix p-3 my-3"">
    <div class=""float-left bg-primary text-white"" style=""width: 200px;"">
      左寄せのブロック要素
    </div>
  </div>
  <div class=""container border clearfix p-3 my-3"">
    <div class=""float-right bg-primary text-white"" style=""width: 200px;"">
      右寄せのブロック要素
    </div>
  </div>
```

また、ブロック要素を左寄せ・右寄せする場合には、それぞれ`float-left`,`float-right`のスタイルクラスを使用します。

## flexアイテムの中央寄せ
flexboxを利用した際の、コンテナ内のアイテムを中央揃えにするためには、`justify-content-center`クラスを使用します。
CSSの`justify-content: center`に相当します。

また、同様にアイテムを左寄せにするには、それぞれ`justify-content-start`,`justify-content-end`のスタイルクラスを使用します。

- 表示例

![](https://gyakuten-app.s3-ap-northeast-1.amazonaws.com/texts/bootstrap1/2020-04-30-20-24-50.png)

- ソースコード

```html
<div class=""container"">
    左右中央揃えのflexbox
    <div class=""d-flex justify-content-center border mb-3"">
      <div class=""p-2 bg-primary text-white"">flexアイテム 1</div>
      <div class=""p-2 bg-secondary text-white"">flexアイテム 2</div>
      <div class=""p-2 bg-success text-white"">flexアイテム 3</div>
    </div>
    左寄せのflexbox
    <div class=""d-flex justify-content-start border mb-3"">
      <div class=""p-2 bg-primary text-white"">flexアイテム 1</div>
      <div class=""p-2 bg-secondary text-white"">flexアイテム 2</div>
      <div class=""p-2 bg-success text-white"">flexアイテム 3</div>
    </div>
    右寄せのflexbox
    <div class=""d-flex justify-content-end border mb-3"">
      <div class=""p-2 bg-primary text-white"">flexアイテム 1</div>
      <div class=""p-2 bg-secondary text-white"">flexアイテム 2</div>
      <div class=""p-2 bg-success text-white"">flexアイテム 3</div>
    </div>
  </div>
```

# ボタン
本章では、Bootstrapを使用した「ボタン」の設定方法を説明します。

## 本章の参考ページ
[Bootstrap公式サイト| Buttons](https://getbootstrap.jp/docs/4.4/components/buttons/)

## 基本的な使い方
`<button>`タグに`btn`クラス、およびスタイルを表す`btn-*`クラスを使用することで、
Bootstrapで用意している、以下の定義済みのボタンスタイルを利用できます。
ホバー時、クリック時のアクションにも対応済みです。

- 表示例

![ボタンのサンプル](https://gyakuten-app.s3-ap-northeast-1.amazonaws.com/texts/bootstrap1/4-1_btn_exapmle.png)

- ソースコード

```html
<button type=""button"" class=""btn btn-primary"">Primary</button>
<button type=""button"" class=""btn btn-secondary"">Secondary</button>
<button type=""button"" class=""btn btn-success"">Success</button>
<button type=""button"" class=""btn btn-danger"">Danger</button>
<button type=""button"" class=""btn btn-warning"">Warning</button>
<button type=""button"" class=""btn btn-info"">Info</button>
<button type=""button"" class=""btn btn-light"">Light</button>
<button type=""button"" class=""btn btn-dark"">Dark</button>

<button type=""button"" class=""btn btn-link"">Link</button>
```

なお、bootstrapでは、各カラーに意味合いを持たせているため、`primary`,`success`の様なネーミングとなっています。

## ボタンタグ
`btn`クラスは、`<button>`タグだけでなく、`<a>`タグや`<input>`タグでも利用できます。

- 表示例

![](https://gyakuten-app.s3-ap-northeast-1.amazonaws.com/texts/bootstrap1/2020-05-01-23-39-30.png)

- ソースコード

```html
  <a class=""btn btn-primary"" href=""#"" role=""button"">リンク</a>
  <button class=""btn btn-primary"" type=""submit"">ボタン</button>
  <input class=""btn btn-primary"" type=""button"" value=""インプット"">
  <input class=""btn btn-primary"" type=""submit"" value=""送信"">
  <input class=""btn btn-primary"" type=""reset"" value=""リセット"">
```

##  アウトラインボタン
`btn-outline-*`クラスを使用することで、アウトラインボタン（枠線のみ、背景を透過）にできます。

- 表示例

![アウトラインボタン](https://gyakuten-app.s3-ap-northeast-1.amazonaws.com/texts/bootstrap1/4-3_btn_outline.png)

- ソースコード

```html
<button type=""button"" class=""btn btn-outline-primary"">Primary</button>
<button type=""button"" class=""btn btn-outline-secondary"">Secondary</button>
<button type=""button"" class=""btn btn-outline-success"">Success</button>
<button type=""button"" class=""btn btn-outline-danger"">Danger</button>
<button type=""button"" class=""btn btn-outline-warning"">Warning</button>
<button type=""button"" class=""btn btn-outline-info"">Info</button>
<button type=""button"" class=""btn btn-outline-light"">Light</button>
<button type=""button"" class=""btn btn-outline-dark"">Dark</button>
```

## ボタンのサイズ
`btn-sm`や`btn-lg`クラスを使用することで、ボタンの大きさを設定できます。

- 表示例

![](https://gyakuten-app.s3-ap-northeast-1.amazonaws.com/texts/bootstrap1/2020-05-01-23-41-01.png)

- ソースコード

```html
<button type=""button"" class=""btn btn-primary btn-sm"">小サイズ</button>
<button type=""button"" class=""btn btn-primary disable"">標準サイズ</button>
<button type=""button"" class=""btn btn-primary btn-lg"">大サイズ</button>
```

## ボタンの無効状態
`disable`属性を使うことで、ボタンを無効（非活性）の状態にできます。
※`disable`クラスでないため注意が必要

- 表示例

![](https://gyakuten-app.s3-ap-northeast-1.amazonaws.com/texts/bootstrap1/2020-05-01-23-43-01.png)

- ソースコード

```html
<button type=""button"" class=""btn btn-primary btn-lg"" disabled>無効</button>
```

# フォーム

本章では、Bootstrapを使用した「フォーム」の設定方法を説明します。

## 本章の参考ページ
[Bootstrap公式サイト| Forms](https://getbootstrap.jp/docs/4.4/components/forms/)

## 基本的な使い方
フォームを構成する`<input>`（インプット）,`<textarea>`（テキストエリア）,`<select>`（セレクトボックス）に対して、`form-control`クラスを指定し、その外側を`form-group`クラスをつけた`<div>`タグで囲みます。

- 表示例

![](https://gyakuten-app.s3-ap-northeast-1.amazonaws.com/texts/bootstrap1/2020-05-01-22-10-27.png)

- ソースコード

```html
<form>
  <div class=""form-group"">
    <label for=""email"">インプットのサンプル</label>
    <input type=""email"" class=""form-control"" id=""email"" placeholder=""name@example.com"">
  </div>
  <div class=""form-group"">
    <label for=""comment"">テキストエリアのサンプル</label>
    <textarea class=""form-control"" id=""comment"" rows=""3""></textarea>
  </div>
  <div class=""form-group"">
    <label for=""region"">セレクトボックスのサンプル</label>
    <select class=""form-control"" id=""region"">
      <option>アジア</option>
      <option>アフリカ</option>
      <option>オセアニア</option>
      <option>ヨーロッパ</option>
      <option>中近東</option>
      <option>北米</option>
      <option>中南米</option>
    </select>
  </div>
</form>
```

また、チェックボックスやラジオボタンを設定するには、`form-control`の代わりに`form-check-input`クラスを指定します。

### チェックボックス

- 表示例

![](https://gyakuten-app.s3-ap-northeast-1.amazonaws.com/texts/bootstrap1/2020-05-01-22-24-18.png)

- ソースコード

```html
<form>
  <div class=""form-group"">
    <label class=""control-label"">チェックボックスのサンプル</label>
    <div class=""form-check"">
        <input class=""form-check-input"" type=""checkbox"" id=""check1"" checked>
        <label class=""form-check-label"" for=""check1"">チェック1</label>
    </div>
    <div class=""form-check"">
        <input class=""form-check-input"" type=""checkbox"" id=""check2"">
        <label class=""form-check-label"" for=""check2"">チェック2</label>
    </div>
    <div class=""form-check"">
        <input class=""form-check-input"" type=""checkbox"" id=""check3"" disabled>
        <label class=""form-check-label"" for=""check3"">チェック3（無効状態）</label>
    </div>
  </div>
</form>
```

### ラジオボタン

- 表示例

![](https://gyakuten-app.s3-ap-northeast-1.amazonaws.com/texts/bootstrap1/2020-05-01-22-25-45.png)

- ソースコード

```html
<form>
  <div class=""form-group"">
  <label class=""control-label"">ラジオボタンのサンプル</label>
    <div class=""form-check"">
      <input class=""form-check-input"" type=""radio"" name=""exampleRadios"" id=""ラジオボタン1"" checked>
      <label class=""form-check-label"" for=""radio1"">ラジオボタン1</label>
    </div>
    <div class=""form-check"">
      <input class=""form-check-input"" type=""radio"" name=""exampleRadios"" id=""ラジオボタン2"">
      <label class=""form-check-label"" for=""radio2"">ラジオボタン2</label>
    </div>
    <div class=""form-check"">
      <input class=""form-check-input"" type=""radio"" name=""exampleRadios"" id=""ラジオボタン3"" disabled>
      <label class=""form-check-label"" for=""radio3"">ラジオボタン3（無効状態）</label>
    </div>
  </div>
</form>
```

## サーバーサイドバリデーション

サーバ側でフォームの入力項目のチェックを実施する際（例えば、emailアドレスの重複チェックなど）、その結果をフォーム上に反映するための方法を紹介します。
フォーム上にチェック結果を表示するには、`is-valid`と`is-invalid`クラスを指定し、また、`valid-feedback`と`invalid-feedback`クラスを用いることで、チェック結果のメッセージを表示できます。

- 表示例

![](https://gyakuten-app.s3-ap-northeast-1.amazonaws.com/texts/bootstrap1/2020-05-01-22-29-29.png)

- ソースコード

```html
  <form>
    <div class=""form-group"">
      <label for=""email"">バリデーションチェック前の状態</label>
      <input type=""email"" class=""form-control"" id=""email"" value=""name@example.com"">
    </div>
    <div class=""form-group"">
      <label for=""email"">入力内容が有効な場合</label>
      <input type=""email"" class=""form-control is-valid"" id=""email"" value=""valid@example.com"">
      <div class=""valid-feedback"">
        使用できます!
      </div>
    </div>
    <div class=""form-group"">
      <label for=""email"">入力内容が無効な場合</label>
      <input type=""email"" class=""form-control is-invalid"" id=""email"" value=""invalid@example.com"">
      <div class=""invalid-feedback"">
        すでに使用されているメールアドレスです!
      </div>
    </div>
  </form>
```

## フォームグリッド

1行に複数の入力エリアを並べたい場合など、グリッドクラス（`row`,`col`クラス）を使用することで、フォームレイアウトをカスタマイズできます。

- 表示例

![](https://gyakuten-app.s3-ap-northeast-1.amazonaws.com/texts/bootstrap1/2020-05-01-22-32-09.png)

- ソースコード

```html
  <form>
    <div class=""form-row"">
      <div class=""col"">
        <input type=""text"" class=""form-control"" placeholder=""名字"">
      </div>
      <div class=""col"">
        <input type=""text"" class=""form-control"" placeholder=""名前"">
      </div>
    </div>
  </form>
```

## カスタムフォームコントロール
Bootstrap 4から導入された、ブラウザ依存の改善、アクセシビリティの向上のためのカスタマイズされたフォーム部品で、ブラウザ毎にデフォルトで用意されいてるフォーム部品の代わりに使用できます。
デフォルトの`form-control`を`custom-control`クラスに置き換えて利用できます。

### チェックボックス

- 表示例

![](https://gyakuten-app.s3-ap-northeast-1.amazonaws.com/texts/bootstrap1/2020-05-01-22-50-49.png)

- ソースコード

```html
<form>
  <div class=""form-group"">
    <label class=""control-label"">カスタムチェックボックスのサンプル</label>
    <div class=""custom-control custom-checkbox"">
        <input class=""custom-control-input"" type=""checkbox"" id=""custom-check1"" checked>
        <label class=""custom-control-label"" for=""custom-check1"">チェック1</label>
    </div>
    <div class=""custom-control custom-checkbox"">
      <input class=""custom-control-input"" type=""checkbox"" id=""custom-check2"">
      <label class=""custom-control-label"" for=""custom-check2"">チェック2</label>
    </div>
    <div class=""custom-control custom-checkbox"">
      <input class=""custom-control-input"" type=""checkbox"" id=""custom-check3"" disabled>
      <label class=""custom-control-label"" for=""custom-check3"">チェック3（無効状態）</label>
    </div>
  </div>
</form>
```

### ラジオボタン

- 表示例

![](https://gyakuten-app.s3-ap-northeast-1.amazonaws.com/texts/bootstrap1/2020-05-01-23-00-12.png)

- ソースコード

```html
  <form>
    <div class=""form-group"">
      <label class=""control-label"">カスタムラジオボタンのサンプル</label>
      <div class=""custom-control custom-radio"">
        <input type=""radio"" id=""customRadio1"" name=""customRadio"" class=""custom-control-input"" checked>
        <label class=""custom-control-label"" for=""customRadio1"">ラジオボタン1</label>
      </div>
      <div class=""custom-control custom-radio"">
        <input type=""radio"" id=""customRadio1"" name=""customRadio"" class=""custom-control-input"">
        <label class=""custom-control-label"" for=""customRadio1"">ラジオボタン2</label>
      </div>
      <div class=""custom-control custom-radio"">
        <input type=""radio"" id=""customRadio1"" name=""customRadio"" class=""custom-control-input"" disabled>
        <label class=""custom-control-label"" for=""customRadio1"">ラジオボタン3（無効状態）</label>
      </div>
    </div>
  </form>
```

### スイッチ

`custom-switch`クラスを指定して、ラジオボタンをトグルスイッチに変更できます。

- 表示例

![](https://gyakuten-app.s3-ap-northeast-1.amazonaws.com/texts/bootstrap1/2020-05-02-00-16-23.png)

- ソースコード

```html
  <form>
    <div class=""form-group"">
      <label class=""control-label"">カスタムスイッチのサンプル</label>
      <div class=""custom-control custom-switch"">
        <input type=""checkbox"" class=""custom-control-input"" id=""customSwitch1"" checked>
        <label class=""custom-control-label"" for=""customSwitch1"">スイッチ1</label>
      </div>
      <div class=""custom-control custom-switch"">
        <input type=""checkbox"" class=""custom-control-input"" id=""customSwitch2"">
        <label class=""custom-control-label"" for=""customSwitch2"">スイッチ2</label>
      </div>
      <div class=""custom-control custom-switch"">
        <input type=""checkbox"" class=""custom-control-input"" id=""customSwitch3"" disabled>
        <label class=""custom-control-label"" for=""customSwitch3"">スイッチ3（無効状態）</label>
      </div>
    </div>
  </form>
```

### セレクトメニュー

- 表示例

![](https://gyakuten-app.s3-ap-northeast-1.amazonaws.com/texts/bootstrap1/2020-05-01-23-04-07.png)

- ソースコード

```html
  <div class=""form-group"">
    <label for=""region"">カスタムセレクトボックスのサンプル</label>
    <select class=""custom-select"" id=""region"">
      <option>アジア</option>
      <option>アフリカ</option>
      <option>オセアニア</option>
      <option>ヨーロッパ</option>
      <option>中近東</option>
      <option>北米</option>
      <option>中南米</option>
    </select>
```

# インプットグループ

インプットグループは、フォームで使用するテキストなどの入力要素の左、右もしくは左右両方に、テキスト・ボタンなどのアドオンを入力要素と一体化して表示します。

## 本章の参考ページ

[Bootstrap公式サイト | Input group](https://getbootstrap.jp/docs/4.4/components/input-group/)

## 基本的な使い方

インプットグループを使う際には、以下のルールで記載します。（少し複雑なので、下のソースサンプルを見ながら確認してください）

1. 全体を`input-group`クラスを指定した`<div>`タグで囲みます。
2. アドオンはテキストを記述した`<span>`タグに`input-group-text`クラスを指定します。
3. アドオンを左側に配置する場合には、`input-group-prepend`クラスを指定した`<div>`タグで囲み、`<input>`タグより前に記載します。
4. 同様にアドオンを右側に配置する場合には、`input-group-append`クラスを指定した`<div>`タグで囲み、`<input>`タグより後に記載します。
5. 両側にアドオンを配置する場合には、上記左右両方のタグの記載を行います。
6. `<label>`タグを配置する場合には、`input-group`の外側に記載します。

```html
<label>label</label>                                    //  ラベル  （input-groupの外側）
<div class=""input-group"">
  <div class=""input-group-prepend"">                        // 左側にアドオンを配置する場合
    <span class=""input-group-text"">左側のアドオン</span>
  </div>
  <input type=""text"" class=""form-control"">              //  テキストなどのフォーム入力要素
  <div class=""input-group-append"">                      // 右側にアドオンを配置する場合
    <span class=""input-group-text"">右側のアドオン</span>
  </div>
</div>

```

## インプットグループの表示例

- 表示例

![](https://gyakuten-app.s3-ap-northeast-1.amazonaws.com/texts/bootstrap1/2020-05-01-23-05-55.png)

- ソースコード

```html
<!--アドオンを左側に配置-->
<div class=""input-group mb-3"">
  <div class=""input-group-prepend"">
    <span class=""input-group-text"" id=""basic-addon1"">@</span>
  </div>
  <input type=""text"" class=""form-control"" placeholder=""ハンドルネーム"" aria-label=""Username"" aria-describedby=""basic-addon1"">
</div>

<!--アドオンを右側に配置-->
<div class=""input-group mb-3"">
  <input type=""text"" class=""form-control"" placeholder=""メールユーザーネーム"" aria-label=""Recipient's username"" aria-describedby=""basic-addon2"">
  <div class=""input-group-append"">
    <span class=""input-group-text"" id=""basic-addon2"">@example.com</span>
  </div>
</div>

<!--ラベルを表示-->
<label for=""basic-url"">バニティURL</label>
<div class=""input-group mb-3"">
  <div class=""input-group-prepend"">
    <span class=""input-group-text"" id=""basic-addon3"">https://example.com/users/</span>
  </div>
  <input type=""text"" class=""form-control"" id=""basic-url"" aria-describedby=""basic-addon3"">
</div>

<!--ラベルを左右両側に表示-->
<div class=""input-group mb-3"">
  <div class=""input-group-prepend"">
    <span class=""input-group-text"">第</span>
  </div>
  <input type=""text"" class=""form-control"" aria-label=""回数"">
  <div class=""input-group-append"">
    <span class=""input-group-text"">回</span>
  </div>
</div>

<!--テキストエリアにアドオンを表示-->
<div class=""input-group"">
  <div class=""input-group-prepend"">
    <span class=""input-group-text"">テキストエリア</span>
  </div>
  <textarea class=""form-control"" aria-label=""With textarea""></textarea>
</div>
```

# テーブル

テーブルタグ（`<table>`）に対して、Bootstrapのスタイルを適用できます。

## 本章の参考ページ

[Bootstrap公式サイト | Tables](https://getbootstrap.jp/docs/4.4/content/tables/)

## 基本的な使い方

`<table>`タグに`table`クラスを適用するだけで、bootstrapのスタイルが適用されます。

- 表示例

![](https://gyakuten-app.s3-ap-northeast-1.amazonaws.com/texts/bootstrap1/2020-05-01-23-11-10.png)

- ソースコード

```html
  <table class=""table"">
    <thead>
      <tr>
        <th scope=""col"">#</th>
        <th scope=""col"">名字</th>
        <th scope=""col"">名前</th>
        <th scope=""col"">ニックネーム</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <th scope=""row"">1</th>
        <td>赤木</td>
        <td>剛憲</td>
        <td>ゴリ</td>
      </tr>
      <tr>
        <th scope=""row"">2</th>
        <td>宮城</td>
        <td>リョータ</td>
        <td>リョーちん</td>
      </tr>
      <tr>
        <th scope=""row"">3</th>
        <td>三井</td>
        <td>寿</td>
        <td>ミッチー</td>
      </tr>
    </tbody>
  </table>
```

## テーブルのオプション

Bootstrapではテーブルのスタイルをカスタマイズするために、以下のオプションが用意されています。
※「オプションのクラス」をクリックすると、それぞれのスタイルの適用例へ遷移します。

| オプションのクラス | クラスを指定するタグ | 内容|
|:-----|:----|:----|
| [`table-dark`](#table-dark) | `<table>`| テーブル全体の色を反転 <br>（背景を暗く、テキストを明るく）|
| [`thead-dark`](#thead-dark) | `<thead>`| テーブルのヘッダーの色を反転 |
| [`thead-light`](#thead-light) | `<thead>`| テーブルのヘッダーを灰色に設定 |
| [`table-bordered`](#table-bordered) | `<table>`| 各セルの境界に罫線を表示 |
| [`table-striped`](#table-striped) | `<table>`| 行の色を交互に変更 |
| [`table-hover`](#table-hover) | `<table>`| ホバーエフェクトが適用される <br>（マウスオーバー時に行の色が変わる） |
| [`table-responsive`](#table-responsive) | `<table>`タグを囲む`<div>`タグ| 水平方向にスクロールさせることができる |

## テーブルスタイルの適用例

### table-dark

- 表示例

![](https://gyakuten-app.s3-ap-northeast-1.amazonaws.com/texts/bootstrap1/2020-05-01-23-12-12.png)

- ソースコード

```html
<table class=""table table-dark"">
// 同様のため省略
</table>
```

### thread-dark

- 表示例

![](image/2020-05-01-23-12-44.png)

- ソースコード

```html
<table class=""table"">
  <thead class=""thead-dark"">
  // 同様のため省略
  </thead>
  <tbody>
  // 同様のため省略
  </tbody>
</table>
```

### thead-light

- 表示例

![](https://gyakuten-app.s3-ap-northeast-1.amazonaws.com/texts/bootstrap1/2020-05-01-23-13-12.png)

- ソースコード

```html
<table class=""table"">
  <thead class=""thead-light"">
// 同様のため省略
  </thead>
  <tbody>
// 同様のため省略
  </tbody>
</table>
```

### table-bordered

- 表示例

![](https://gyakuten-app.s3-ap-northeast-1.amazonaws.com/texts/bootstrap1/2020-05-01-23-14-42.png)

- ソースコード

```html
  <table class=""table table-bordered"">
// 同様のため省略
  </table>
```

### table-striped

- 表示例

![](https://gyakuten-app.s3-ap-northeast-1.amazonaws.com/texts/bootstrap1/2020-05-01-23-15-23.png)

- ソースコード

```html
<table class=""table table-striped"">
// 同様のため省略
</table>
```

### table-hover

- 表示例

![table-hover](https://gyakuten-app.s3-ap-northeast-1.amazonaws.com/texts/bootstrap1/7-7_tableHover.gif)

- ソースコード

```html
<table class=""table table-hover"">
// 同様のため省略
</table>
```

### table-responsive

- 表示例（マウスのカーソルが映っていませんが、横スクロールしています）

![table-responsive](https://gyakuten-app.s3-ap-northeast-1.amazonaws.com/texts/bootstrap1/7-8_tableResponsive.gif)

- ソースコード

```html
<div class=""table-responsive"">
  <table class=""table"">
  // 省略
  </table>
</div>
```

# コンテナ・ブレイクポイント

本章では、Bootstrapの根本のレイアウトであり、後述するレスポンシブおよびグリッドシステムを使う際に必要となる「コンテナ」および「ブレイクポイント」について説明します。

## 本章の参考ページ
[Bootstrap公式サイト | Overview](https://getbootstrap.jp/docs/4.4/layout/overview/)

## コンテナ

Bootstrapは、スマホ、タブレット、PCなど異なる画面幅に合わせてレイアウトを切り替えるレスポンシブルデザインを採用しています。
「コンテナ」とはコンテンツを入れるためのブロックで、Bootstrapではコンテナクラスを指定したタグを、レスポンシブなレイアウトを使いたいhtmlタグの一番外側に配置します。

```html
<div class=""container"">
  // この中にレスポンシブル対応させたいコンテンツを記載する
<div>
```

コンテナに関するクラスは主に二種類あり、`container`クラスは、画面幅に応じた固定幅のコンテナを設定します。
一方、`container-fluid`クラスは常にブラウザのウインドウ幅いっぱいに広がります。
2つのコンテナクラスの具体的な各画面幅に応じたコンテナの幅は以下のとおりです。


|                      | 576px未満 | 576px以上 | 768px以上 | 992px以上 | 1200px以上 |
| -------------------- | ------- | ------- | ------- | ------- | -------- |
| `container`クラス幅       | 100%    | 540px   | 720px   | 960px   | 1140px   |
| `container-fluid`クラス幅 | 100%    | 100%    | 100%    | 100%    | 100%     |

以下のアニメーションを見てもらえれば、`container`、`container-fluid`クラスの違い、および`container`クラスにおける固定幅の切り替りが理解できるかと思います。

![](https://gyakuten-app.s3-ap-northeast-1.amazonaws.com/texts/bootstrap1/container_animation.gif)

## ブレイクポイントと画面幅

先ほどのコンテナで、レイアウトが切り替る画面幅のことを「ブレイクポイント」といい、Bootstrapでは4つのブレイクポイント（576px, 768px, 992px, 1200px）が存在し、それぞれのブレークポイントの間の画面幅には名前がついています。

| 画面幅の名称         | 省略形 | 画面幅のサイズ      | 該当する主なデバイス※ |
| --------------- | --- | -------- | ---------- |
| Extra small（極小） | xs  | 576px未満  | スマホの縦画面    |
| Small（小）        | sm  | 576px以上  | スマホの横画面    |
| Medium（中）       | md  | 768px以上  | タブレット画面    |
| Large（大）        | lg  | 992px以上  | モバイルPC画面   |
| Extra large（極大） | xl  | 1200px以上 | 通常PC画面     |

※ただし、近年はディスプレイの大型化、高解像化が進み、上記区分けに当てはまらないデバイスが増えてきました。（iPhone XSは横向きの場合には812pxでMediumに該当し、iPad Pro(12.9)に至っては1366pxとExtra largeになります。）

Bootstrapではブレイクポイントを指定したスタイルを使う際に、表中の画面幅の「省略形」の値をクラス名に付与します。
（例  `mt-md-5`クラス：  画面幅が`md`以上（768px以上）の場合、5サイズのマージントップを適用）

# レスポンシブなコンテンツの表示・非表示（ディスプレイプロパティ）

本章では、レスポンシブな（画面幅に応じた）コンテンツの表示・非表示を切り替える手法であるディスプレイプロパティについて学んでいきます。

## 本章の参考ページ

[Bootstrap公式サイト | Display property](https://getbootstrap.jp/docs/4.4/utilities/display/)

## ディスプレイプロパティの使い方

CSSでは、ブロック要素の表示、非表示をディスプレイプロパティを、`display: block;`や`display: none;`のような設定することで実現してきましたが、Bootstrapのディスプレイプロパティでは、それに加えて画面幅（ブレイクポイント）によって表示・非表示を切り替えることが可能です。
Bootstrapのディスプレイプロパティのクラスは以下の形式で指定します。

- `d-{value}` :すべての画面幅で適用されます。
- `d-{画面幅}-{value}` :指定した画面幅以上の場合に適用されます。

`value`に設定する主な値を以下に記載します。

| `value`の値      | 内容                |
| -------------- | ----------------- |
| `none`         | 要素を非表示にします。       |
| `inline`       | インライン要素を設定します     |
| `block`        | ブロック要素を設定します。     |
| `inline-block` | インラインブロック要素を設定します |

`画面幅`には、画面幅の省略形である、`sm`,`md`,`lg`,`xl`のいずれかの値が入ります。

たとえば、`d-md-block`は、「md**以上**の画面幅の場合に、ブロック要素を設定する」という意味になります。

### 画面幅を指定する際の注意点

画面幅を指定する際の注意点として、Bootstrapがモバイルファーストであり、一番画面幅が小さいモバイルから順次スタイルを定義していくということです。
そのため、画面幅に応じたスタイルを変化させるときは、「この画面幅より大きい場合はこのスタイル」というように書いていきます。（「この画面幅の場合はこのスタイル」ではない）

たとえば、`d-md-block`クラスを設定した場合、画面幅が`md`の場合のみ適用されるのではなく、画面幅が`lg`,`xl`に対しても適用されます。
また、一番画面幅が小さいモバイルからスタイルを定義するという考え方から、画面幅に`xs`を指定することはなく（Bootstrapのスタイルクラスにも定義されていません）、その場合は画面幅を指定しないスタイルクラスを利用します。（例`d-block`）



## ディスプレイプロパティの組み合わせ

ディスプレイプロパティを複数組み合わせて使うことで、以下のようなスタイルを実現できます。

### 例１  画面幅がMedium以上(768px~)の場合にコンテンツを表示

- 表示例

![](https://gyakuten-app.s3-ap-northeast-1.amazonaws.com/texts/bootstrap1/displayAnimation1.gif)

- ソースコード

```html
<div class=""d-md-block d-none bg-primary"">
  <h1 class=""text-center"">Medium〜Extra large</h1>
  <h1 class=""text-center"">の場合に表示</h1>
</div>
```

### 例2  画面幅がExtra small〜Medium(〜992px)の場合にコンテンツを表示

- 表示例

![](https://gyakuten-app.s3-ap-northeast-1.amazonaws.com/texts/bootstrap1/displayAnimation2.gif)

- ソースコード

```html
<div class=""d-lg-none d-block bg-secondary"">
  <h1 class=""text-center"">Extra small~Medium</h1>
  <h1 class=""text-center"">の場合に表示</h1>
</div>
```

### 例3  画面幅がMedium(768~992px)の場合にコンテンツを表示

- 表示例

![](https://gyakuten-app.s3-ap-northeast-1.amazonaws.com/texts/bootstrap1/displayAnimation3.gif)

- ソースコード

```html
<div class=""d-lg-none d-none d-md-block bg-success"">
  <h1 class=""text-center"">Medium</h1>
  <h1 class=""text-center"">の場合に表示</h1>
</div>
```"
HTML&CSS,Bootstrap教材（その2）,"# グリッドシステム

本章ではBootstrapで用意されているグリッドシステムについて学んでいきます。
グリッドシステムを使用することで、デバイスの画面幅に応じた（レスポンシブルな）コンテンツを配置したレイアウトデザインを整えることができます。

## 本章の参考ページ

[Bootstrap公式サイト | Grid System](https://getbootstrap.jp/docs/4.4/layout/grid/)

## グリッドシステムとは？

Bootstrapのグリッドシステムは、デバイスの画面横幅を均等に12個の「グリッド」に分割し、その12分割されたグリッド上に沿うように、コンテンツを配置してデザインを整える仕組みです。
このグリッドの数は画面幅が極大（>1220px）であっても、極小(<576px)であっても12個で変わりません。

![](https://gyakuten-app.s3-ap-northeast-1.amazonaws.com/texts/bootstrap2/2020-05-05-07-19-43.png)

グリッドシステムを使用することで、デバイスの画面幅に応じた（レスポンシブルな）コンテンツを配置したレイアウトデザインを整えることができます。
たとえば以下のような「PCサイズの画面では2段組で表示していたコンテンツを、スマホサイズの画面では1段組で表示させる」ことが、複雑なCSSの設定を行う必要なく実現できます。

![](https://gyakuten-app.s3-ap-northeast-1.amazonaws.com/texts/bootstrap2/gridSample.gif)

# グリッドシステムの使い方

Bootstrapのグリッドシステムを使用する際に必要な要素は、「コンテナ」、「ロー」、「カラム」の3つです。
コンテナの中にローを、ローの中にカラムを配置しします。

![](https://gyakuten-app.s3-ap-northeast-1.amazonaws.com/texts/bootstrap2/2020-05-05-07-50-53.png)

それぞれの要素について以下で説明します。

コンテナは、「コンテナ・ブレイクポイント」の章で学んだ通り、コンテンツを格納するためのブロックで、画面幅ごとの固定幅の`container`クラス、もしくは画面いっぱいの幅を使用する`container-fluid`クラスを指定することが可能です。

ローは、「行」を表し、`row`クラスで指定します。コンテナの中に複数のローを作成することが可能です。
`row`クラスを指定することで、配下の要素が、flexコンテナとして扱われます。

カラムは「列」を表し、ローを縦に割り左から右へ並びます。
スタイルクラスは`col`のあとに`-`（ハイフン）で、画面幅、配置するグリッド数をつなぐことで、「この画面幅では、この個数のグリッド」という指定をします。
ロー配下には12個のグリッドが存在するため、カラムでは使用したいグリッドの数を指定します。グリッド数を指定しない場合は、各カラムの横幅が均等になります。
このカラムの配下にコンテンツ（文章や画像）を配置します。

たとえば以下のサンプルでは、コンテナの中に２つのローを作成し、1つ目のローの中にはグリッド数を指定しない3つの横幅が均等なカラムを、2つ目のカラムにはグリッド数を指定した横幅が異なるカラムを配置しています

- サンプル

![](https://gyakuten-app.s3-ap-northeast-1.amazonaws.com/texts/bootstrap2/2020-05-05-09-02-01.png)

- ソースコード

```html
<div class=""container"">
  <div class=""row"">
    <div class=""col bg-primary border border-white"">
      <p class=""text-white"">等幅のカラム</p>
    </div>
    <div class=""col bg-primary border border-white"">
      <p class=""text-white"">等幅のカラム</p>
    </div>
    <div class=""col bg-primary border border-white"">
      <p class=""text-white"">等幅のカラム</p>
    </div>
  </div>
  <div class=""row py-2"">
    <div class=""col-4 bg-success border border-white"">
      <p class=""text-white"">4グリッド幅のカラム</p>
    </div>
    <div class=""col-5 bg-success border border-white"">
      <p class=""text-white"">5グリッド幅のカラム</p>
    </div>
    <div class=""col-3 bg-success border border-white"">
      <p class=""text-white"">3グリッド幅のカラム</p>
    </div>
  </div>
</div>
```

## レスポンシブルなグリッドシステム

次に、画面幅に応じてコンテンツを表示するグリッド数が変化するレスポンシブルなグリッドシステムを学んでいきます。
カラムに画面幅を指定する際にのクラスの記載の仕方は以下のとおりです。

- `col-{画面幅}-{グリッド数}`

`{画面幅}`には、`sm`（小）,`md`（中）,`lg`（大）,`xl`（極大）が指定可能です。
全画面幅に適用したい場合は、`{画面幅}`の値を省略します。

また、1つのカラムに複数の`col`クラスを指定することで、2つ以上のブレイクポイントを設定できます。
以下のサンプルでは、1つのカラムに対して2つのブレイクポイントを適用（`lg`以上で3グリッド幅、`md`以上で6グリッド幅、`sm`以下で全幅を適用）しています。

- サンプル

![](https://gyakuten-app.s3-ap-northeast-1.amazonaws.com/texts/bootstrap2/gridResponsiveSample.gif)

- ソースコード

```html
<div class=""container"">
  <div class=""row"">
    <div class=""col-lg-3 col-md-6 bg-primary border border-white"">
      <h2 class=""text-white py-4"">コンテンツ１</h2>
    </div>
    <div class=""col-lg-3 col-md-6 bg-success border border-white"">
      <h2 class=""text-white py-4"">コンテンツ2</h2>
      </div>
    <div class=""col-lg-3 col-md-6 bg-primary border border-white"">
      <h2 class=""text-white py-4"">コンテンツ3</h2>
      </div>
    <div class=""col-lg-3 col-md-6 bg-success border border-white"">
      <h2 class=""text-white py-4"">コンテンツ4</h2>
      </div>
  </div>
</div>
```

# コラプス

コラプス（Collapse）はコンテンツの折り畳みの効果を加えて、コンテンツの表示もしくは非表示の切り替えを行う仕組みです。
本章ではBootstrapを使用したコラプスの作成方法を学びます。

## 本章の参考ページ

[Bootstrap公式サイト | Collapse ](https://getbootstrap.jp/docs/4.4/components/collapse/)

# 基本的な使い方

Bootstrapのコラプスを使用するには`collapse`クラスを使用し、その配下に、表示・非表示のトリガーとなる要素（ボタンなど）と、表示・非表示の対象となるコンテンツ要素を配置します。

トリガー要素にはボタンタグもしくはリンクタグが指定可能です。
トリガー要素に、`data-toggle=""collapse""`を指定することでコラプスの動作が適用され、`data-target`（ボタンタグの場合）、`href`（リンクタグの場合）の値には、表示・非表示の対象となるコンテンツの`id`を指定することで、コラプス対象の要素との紐付けを行います。

表示・非表示を行うコンテンツの要素には、トリガーとの紐付けの`id`とともに、コンテンツの表示・非表示を制御するための、コラプスのスタイルクラスを指定します。
以下は、コラプスのクラス値とその状態の一覧ですが、初期状態でコンテンツを隠しておきたい場合には、`collapse`クラスを、表示しておきたい場合には、`collapse show`クラスを指定します。

- コラプスのクラス値と状態

| クラスの値 | コラプスの状態 |
| ---- | ---- |
| `collapse` | コンテンツを非表示 |
| `collapsing` | 表示⇔非表示の遷移中 |
| `collapse show`| コンテンツを表示 |

- サンプル

![](https://gyakuten-app.s3-ap-northeast-1.amazonaws.com/texts/bootstrap2/collapseSample.gif)

- ソースコード

```html
<div class=""container"">
  <p>
    <a class=""btn btn-primary"" data-toggle=""collapse"" href=""#collapseExample"" role=""button"" aria-expanded=""true"" aria-controls=""collapseExample"">
      リンクタグの場合
    </a>
    <button class=""btn btn-primary"" type=""button"" data-toggle=""collapse"" data-target=""#collapseExample"" aria-expanded=""false"" aria-controls=""collapseExample"">
      ボタンタグの場合
    </button>
  </p>

  <div class=""collapse"" id=""collapseExample"">
    <div class=""card card-body"">
    <p>コラプスによって、表示・非表示を制御するコンテンツをここに記載します。</p>
    <p>対象のコンテンツはテキストだけでなく、画像ファイルも指定可能です。</p>
    <img class=""img-thumbnail"" src=""https://getbootstrap.jp/docs/4.4/assets/img/bootstrap-stack.png"" width=""200px"" alt="""">
    </div>
  </div>
</div>
```

# ドロップダウン

ドロップダウンは、トグルボタンを押下してリンクをリスト表示する際に使用する仕組みです。
本章ではBootstrapを使用したドロップダウンの作成方法を学びます。

## 本章の参考ページ

[Bootstrap公式サイト | Dropdowns ](https://getbootstrap.jp/docs/4.4/components/dropdowns/)

# 基本的な使い方

Bootstrapのドロップダウンを使用するには、`drop-down`クラスを使用し、その配下にドロップダウンを構成する要素である、ドロップダウンの表示・表示を切り替えるトリガー要素と、実際の表示・非表示の対象となるリスト表示させるコンテンツを配置します。

ドロップダウンを起動するトグルボタンにはボタンタグ、もしくはリンクタグが使用可能で、`dropdown-toggle`クラスと`data-toggle=""dropdown""` 属性を指定します。
ドロップダウンメニューコンテンツには、`dropdown-menu`クラスを指定し、各リストには`dropdown-item`クラスを指定します。

- サンプル

![](https://gyakuten-app.s3-ap-northeast-1.amazonaws.com/texts/bootstrap2/dropdownSample.gif)

※右側の「ドロップダウンリンク」では、ヘッダーを表示させる`dropdown-header`クラス、および横線を表示させる`dropdwon-divider`クラスを適用しています。

- ソースコード

```html
<div class=""row justify-content-center"">
  <div class=""dropdown m-4"">
    <button class=""btn btn-primary dropdown-toggle"" type=""button"" id=""dropdownMenuButton"" data-toggle=""dropdown"" aria-haspopup=""true"" aria-expanded=""true"">
      ドロップダウンボタン
    </button>
    <div class=""dropdown-menu"" aria-labelledby=""dropdownMenuButton"">
      <a class=""dropdown-item"" href=""#"">メニュー１</a>
      <a class=""dropdown-item"" href=""#"">メニュー２</a>
      <a class=""dropdown-item"" href=""#"">メニュー３</a>
    </div>
  </div>

  <div class=""dropdown m-4"">
    <a class=""btn btn-success dropdown-toggle"" href=""#"" role=""button"" id=""dropdownMenuLink"" data-toggle=""dropdown"" aria-haspopup=""true"" aria-expanded=""false"">
      ドロップダウンリンク
    </a>

    <div class=""dropdown-menu"" aria-labelledby=""dropdownMenuLink"">
      <h6 class=""dropdown-header"">Rails講座</h6>
      <a class=""dropdown-item"" href=""#"">動画教材</a>
      <a class=""dropdown-item"" href=""#"">テキスト教材</a>
      <a class=""dropdown-item"" href=""#"">ライブコーディング</a>
      <div class=""dropdown-divider""></div>
      <h6 class=""dropdown-header"">PHP講座</h6>
      <a class=""dropdown-item"" href=""#"">動画教材</a>
      <a class=""dropdown-item"" href=""#"">テキスト教材</a>
    </div>
  </div>
```

# モーダル

モーダルとは、ボタン・リンクなどをクリックしたときに表示するダイアログ、入力フォームなどのポップアップ画面のことです。
本章ではBootstrapを使用したモーダルの作成方法を学びます。

## 本章の参考ページ

[Bootstrap公式サイト | Modal ](https://getbootstrap.jp/docs/4.4/components/modal/)

## 基本的な使い方

Bootstrapのモーダルはモーダルを起動させるトリガーボタンと、モーダルウインドウ表示部の要素で構成されています。

トリガーボタンには、`data-toggle=""modal""`を指定し、 `data-target`には起動させるモーダルウインドウの`id`を指定して紐付けを行います。

モーダルウインドウ表示部は全体を、`modal`クラスを指定した要素で囲み、 その中に`modal-content`クラスを指定した要素を配置します。
`modal-content`の中には、`modal-header`（ヘッダー部）、`modal-body`（ボディ部）,`modal-footer`(フッター部)の各クラスを使用してコンテンツ配置することで、レイアウトを整えます。

- サンプル

![](https://gyakuten-app.s3-ap-northeast-1.amazonaws.com/texts/bootstrap2/modalSample.gif)

- ソースコード

```html
<!-- モーダル起動ボタン -->
<button type=""button"" class=""btn btn-primary"" data-toggle=""modal"" data-target=""#exampleModal"">
  モーダル起動ボタン
</button>

<!-- モーダルウィンドウ -->
<div class=""modal fade"" id=""exampleModal"" tabindex=""-1"" role=""dialog"" aria-labelledby=""exampleModalLabel"" aria-hidden=""true"">
  <div class=""modal-dialog"" role=""document"">
    <div class=""modal-content"">
      <div class=""modal-header"">
        <h5 class=""modal-title"" id=""exampleModalLabel"">モーダルタイトル</h5>
        <button type=""button"" class=""close"" data-dismiss=""modal"" aria-label=""Close"">
          <span aria-hidden=""true"">&times;</span>
        </button>
      </div>
      <div class=""modal-body"">
        ここにモーダルコンテンツを配置します。
      </div>
      <div class=""modal-footer"">
        <button type=""button"" class=""btn btn-secondary"" data-dismiss=""modal"">閉じる</button>
        <button type=""button"" class=""btn btn-primary"">変更を保存</button>
      </div>
    </div>
  </div>
</div>
```

## モーダル内のスクロール

モーダル内のコンテンツがウインドウ内に収まらない場合には、自動的にモーダル内でスクロールが行なわれます。（モーダルが起動した際には、元のウェブページ側のスクロールは無効になります）

なお、`modal-dialog-scrollable`クラスを`modal-dialog` クラスに追加すると、モーダルの全体がウインドウ内に収まり、ボディ部にスクロールバーを表示し、ヘッダー・フッター部が常に表示するデザインに改善できます。

- `modal-dialog-scrollable`クラスを適用しない場合

![](https://gyakuten-app.s3-ap-northeast-1.amazonaws.com/texts/bootstrap2/modalScrollableOff.gif)

- `modal-dialog-scrollable`クラスを適用した場合

![](https://gyakuten-app.s3-ap-northeast-1.amazonaws.com/texts/bootstrap2/modalScrollableOn.gif)

## モーダルを縦方向の画面中央に表示

`modal-dialog-centered`クラスを`modal-dialog` クラスに追加すると、モーダルを垂直方向の中央に配置します。（指定しない場合は、画面上部に配置します。）

- サンプル

![](https://gyakuten-app.s3-ap-northeast-1.amazonaws.com/texts/bootstrap2/modalVerticalCentered.gif)

- ソースコード

```html
<!-- モーダル起動ボタン -->
<button type=""button"" class=""btn btn-primary"" data-toggle=""modal"" data-target=""#exampleModal"">
  モーダル起動ボタン
</button>

<!-- モーダルウィンドウ -->
<div class=""modal fade"" id=""exampleModal"" tabindex=""-1"" role=""dialog"" aria-labelledby=""exampleModalLabel"" aria-hidden=""true"">
  <div class=""modal-dialog modal-dialog-centered"" role=""document"">
    <div class=""modal-content"">
      省略
    </div>
  </div>
</div>
```

## サイズオプション

モーダルには3つのサイズオプションがあり、サイズオプションのクラスを`modal-dialog` クラスに追加するとモーダルのサイズを変更できます。

なお、ウインドウの画面幅が小さい場合にモーダル画面の水平スクロールバーが表示される状況を回避するため、画面幅に応じたブレークポイントが設定されています。

| クラス値 | サイズ | モーダルの最大幅 |
|--|--|--|
| `modal-sm` | 小 | 300px |
| なし（デフォルト） | 標準 | 500px |
| `modal-lg` | 大 | 800px |
| `modal-xl`| 極大 | 1140px |

- サンプル

![](https://gyakuten-app.s3-ap-northeast-1.amazonaws.com/texts/bootstrap2/ModalSizeOption.gif)

- ソースコード

```html
<!-- 小サイズのモーダル -->
<button type=""button"" class=""btn btn-sm btn-primary"" data-toggle=""modal"" data-target="".bd-example-modal-sm"">小サイズのモーダル</button>

<div class=""modal fade bd-example-modal-sm"" tabindex=""-1"" role=""dialog"" aria-labelledby=""mySmallModalLabel"" aria-hidden=""true"">
  <div class=""modal-dialog modal-sm"">
    <div class=""modal-content"">
      省略
    </div>
  </div>
</div>

<!-- 標準サイズのモーダル -->
<button type=""button"" class=""btn btn-primary"" data-toggle=""modal"" data-target="".bd-example-modal-default"">標準サイズのモーダル</button>

<div class=""modal fade bd-example-modal-default"" tabindex=""-1"" role=""dialog"" aria-labelledby=""mySmallModalLabel"" aria-hidden=""true"">
  <div class=""modal-dialog"">
    <div class=""modal-content"">
      省略
    </div>
  </div>
</div>

<!-- 大サイズのモーダル -->
<button type=""button"" class=""btn btn-lg btn-primary"" data-toggle=""modal"" data-target="".bd-example-modal-lg"">大サイズのモーダル</button>

<div class=""modal fade bd-example-modal-lg"" tabindex=""-1"" role=""dialog"" aria-labelledby=""myLargeModalLabel"" aria-hidden=""true"">
  <div class=""modal-dialog modal-lg"">
    <div class=""modal-content"">
      省略
    </div>
  </div>
</div>

<!-- 極大サイズのモーダル -->
<button type=""button"" class=""btn btn-lg btn-primary"" data-toggle=""modal"" data-target="".bd-example-modal-xl"">極大サイズのモーダル</button>

<div class=""modal fade bd-example-modal-xl"" tabindex=""-1"" role=""dialog"" aria-labelledby=""myExtraLargeModalLabel"" aria-hidden=""true"">
  <div class=""modal-dialog modal-xl"">
    <div class=""modal-content"">
      省略
    </div>
  </div>
</div>
```

## モーダルのオプション

Bootstrapのモーダルには以下のオプションが用意されています。
htmlのデータ属性を使用してオプションを使用する際には、`modal`クラスを指定したタグに`data-{オブション名}={設定値}`で指定します。
(例. モーダルへのフォーカスを有効にする場合は、`data-focus=""true""`)

| オプション名 | 設定値 | デフォルト値 | 内容 |
| -- | -- | -- | -- |
| backdrop | true <br> false <br> 'static' | true | `true`:背景を表示し、背景クリックでモーダルを閉じます。<br>`false`:背景を表示せず、背景部分をクリックしてもモーダルは閉じません。<br>`'static'`:背景を表示しますが、クリックしてもモーダルは閉じません。 |
| keybord | true <br> false | true | ESCキーでモーダルを閉じるかの設定|
| focus | true <br> false | true |モーダルにフォーカスするかの設定|
| show | true <br> false | true |モーダルを表示するかの設定|

# ナビゲーションバー

Bootstrapのナビゲーションバーを使用することで、レスポンシブなヘッダー、ナビバーなどのコンテンツが作成できます

## 本章の参考ページ

[Bootstrap公式サイト | Navbar ](https://getbootstrap.jp/docs/4.4/components/navbar/)

## 基本的な使い方

Bootstrapのナビゲーションバーは、大本となる`navbar`クラスに加えて、数多くの部品から構成されています。
そのため、ここでは、基本的なナビゲーションバーを作成し、その後順を追って各種部品を適用してナビゲーションバーをカスタマイズする流れで説明してきます。
※（）内は主に適用されるCSSの説明になります。

### シンプルなナビゲーションバー

まずは、一番シンプルな最低限の要素でナビゲーションバーを作成します。

- ナビゲーションバーを構成する要素に`navbar`クラスを設定します。（配下の要素に`display: flex`が適用され、全体がflexbox要素となります）
- `navbar-expand`を使用して、ナビゲーションバー上の、リンクメニューなどのコンテンツを水平方向に表示します。（配下の要素に`flex-flow: row wrap`が適用されます）
- `navbar-brand`を使用して、会社名・ページタイトルやロゴなどを表示します。
- `navbar`クラスの子要素として、`navbar-nav`クラスの要素を作成し、その配下にメニューとして表示するリンクタグなどを配置します。
（`navbar-nav`クラスは配下の要素に対して、スペースの調整や、`list-style: none`を適用します）

ここまでの手順で作成されたナビゲーションバーのサンプルは以下の通りです。

![](https://gyakuten-app.s3-ap-northeast-1.amazonaws.com/texts/bootstrap2/2020-05-05-22-43-05.png)

```html
<nav class=""navbar navbar-expand"">
  <a class=""navbar-brand"" href=""#"">ブランド</a>
  <div class=""navbar-nav"">
    <a class=""nav-item nav-link"" href=""#"">メニュー１</a>
    <a class=""nav-item nav-link"" href=""#"">メニュー２</a>
    <a class=""nav-item nav-link"" href=""#"">メニュー３</a>
  </div>
</nav>
```

### カラー設定

次に、ナビゲーションバーのカラーを設定します。

- ナビゲーションバーの背景色は`bg-*`クラスで指定します。
- テキストやアイコンの色は、背景色が暗い場合は`navbar-dark`クラスを、背景色が明るい場合は`nabvar-light`クラスで指定します。


![](https://gyakuten-app.s3-ap-northeast-1.amazonaws.com/texts/bootstrap2/2020-05-05-22-48-29.png)

```html
<nav class=""navbar navbar-expand bg-primary navbar-dark"">
  <a class=""navbar-brand"" href=""#"">ブランド</a>
  <div class=""navbar-nav"">
    <a class=""nav-item nav-link"" href=""#"">メニュー１</a>
    <a class=""nav-item nav-link"" href=""#"">メニュー２</a>
    <a class=""nav-item nav-link"" href=""#"">メニュー３</a>
  </div>
</nav>
```

### ナビゲーションバーの折りたたみ

ナビゲーションバーのメニューコンテンツを画面幅に応じて折りたたみ、折りたたんだときは押下時にコンテンツを展開するナビゲーションボタンを表示します。（先の章の「コラプス」で学んだ仕組みを活用します）


- ナビゲーションバーのコンテンツを折りたたむために、`navbar-expand`クラスに代わり、画面幅を設定した`navbar-expand{-sm|-md|-lg|-xl}`クラスに指定します。（指定した画面幅未満ではコンテンツを折りたたむ設定となります）

- メニューコンテンツの表示・非表示の切り替えを行うため、`navbar-toggler`クラスをトリガーとなるボタンに指定し、 `navbar-collapse`クラスでメニューコンテンスト囲みます。

- 折りたたんだときの横三本線のナビゲーションメニュー（通称：ハンバーガーメニュー）は`navbar-toggler-icon`を使用することで表示できます。

![](https://gyakuten-app.s3-ap-northeast-1.amazonaws.com/texts/bootstrap2/navbarCollapse.gif)

```html
<nav class=""navbar navbar-expand-md bg-primary navbar-dark"">
  <a class=""navbar-brand"" href=""#"">ブランド</a>
  <button class=""navbar-toggler"" data-toggle=""collapse"" data-target=""#navbarNav"">
    <span class=""navbar-toggler-icon""></span>
  </button>
  <div class=""collapse navbar-collapse"" id=""navbarNav"">
    <div class=""navbar-nav"">
      <a class=""nav-item nav-link"" href=""#"">メニュー１</a>
      <a class=""nav-item nav-link"" href=""#"">メニュー２</a>
      <a class=""nav-item nav-link"" href=""#"">メニュー３</a>
    </div>
  </div>
</nav>
```

### ドロップダウンメニュー

続いて、ナビゲーションバーにドロップダウンメニューを実装します。
（先の章の「ドロップダウン」で学んだ仕組みを適用します）

- ドロップダウンを適用するメニューに`dropdown`クラスを指定した要素の配下に、`dropdown-toggle`クラスでトグルを、`dropdown-menu`クラスでトグル押下時に、展開させるメニュー内容を記載します。

![](https://gyakuten-app.s3-ap-northeast-1.amazonaws.com/texts/bootstrap2/navbarDropdown.gif)

```html
<nav class=""navbar navbar-expand-md bg-primary navbar-dark"">
  <a class=""navbar-brand"" href=""#"">ブランド</a>
  <button class=""navbar-toggler"" data-toggle=""collapse"" data-target=""#navbarNav"">
    <span class=""navbar-toggler-icon""></span>
  </button>
  <div class=""collapse navbar-collapse"" id=""navbarNav"">
    <div class=""navbar-nav"">
      <a class=""nav-item nav-link"" href=""#"">メニュー１</a>
      <a class=""nav-item nav-link"" href=""#"">メニュー２</a>
      <div class=""nav-item dropdown"">
        <a class=""nav-link dropdown-toggle"" href=""#"" id=""navbarDropdownMenuLink"" data-toggle=""dropdown"">ドロップダウンメニュー</a>
        <div class=""dropdown-menu"" aria-labelledby=""navbarDropdownMenuLink"">
          <a class=""dropdown-item"" href=""#"">サブメニュー１</a>
          <a class=""dropdown-item"" href=""#"">サブメニュー２</a>
          <a class=""dropdown-item"" href=""#"">サブメニュー３</a>
        </div>
      </div>
    </div>
  </div>
</nav>
```

### フォーム

最後に、フォーム部品をナビゲーションバーに追加します。

- `form-inline`クラスを指定した要素配下に、フォーム部品を配置します。
（配下の要素がflexboxとなり、`flex-flow: row wrap`が適用されます）

![](https://gyakuten-app.s3-ap-northeast-1.amazonaws.com/texts/bootstrap2/navberForm.gif)


```html
<nav class=""navbar navbar-expand-md bg-primary navbar-dark"">
  <a class=""navbar-brand"" href=""#"">ブランド</a>
  <button class=""navbar-toggler"" data-toggle=""collapse"" data-target=""#navbarNav"">
    <span class=""navbar-toggler-icon""></span>
  </button>
  <div class=""collapse navbar-collapse"" id=""navbarNav"">
    <div class=""navbar-nav"">
      <a class=""nav-item nav-link"" href=""#"">メニュー１</a>
      <a class=""nav-item nav-link"" href=""#"">メニュー２</a>
      <div class=""nav-item dropdown"">
        <a class=""nav-link dropdown-toggle"" href=""#"" id=""navbarDropdownMenuLink"" data-toggle=""dropdown"">ドロップダウンメニュー</a>
        <div class=""dropdown-menu"" aria-labelledby=""navbarDropdownMenuLink"">
          <a class=""dropdown-item"" href=""#"">サブメニュー１</a>
          <a class=""dropdown-item"" href=""#"">サブメニュー２</a>
          <a class=""dropdown-item"" href=""#"">サブメニュー３</a>
        </div>
      </div>
    </div>
    <form action="""" class=""form-inline"">
      <input type=""text"" class=""form-control mr-sm-2"" type=""search"" placeholder=""検索"">
      <button class=""btn btn-outline-light my-2 my-sm-0"" type=""submit"">検索</button>
    </form>
  </div>
</nav>
```

## 表示位置

ナビゲーションバーの位置を上部もしくは下部に固定するには、`navbar`クラスに加えて以下のクラスを指定します。

| classの値 | 内容|
|--|--|
| `fixed-top` | ナビゲーションバーをページの最上部に固定します。<br>（`position: fixed; top: 0;`が適用されます） |
| `sticky-top` | スクロールしてページの最上部に達すると、固定します<br> (`position: sticky; top: 0;`が適用されます） |
| `fixed-bottom` | ナビゲーションバーをブラウザの最下部に固定します。<br>（`position: fixed; bottom: 0;`が適用されます） |

以下は、`sticky-top`をナビゲーションバーに適用した例です。

- サンプル

![](https://gyakuten-app.s3-ap-northeast-1.amazonaws.com/texts/bootstrap2/navbarStickytop.gif)

- ソースコード

```html
<nav class=""navbar sticky-top navbar-dark bg-primary"">
  <a class=""navbar-brand"" href=""#"">sticky-topを適用したナビゲーションバー</a>
</nav>
```

# エンベッド

音声や動画などのデータを埋め込む際に、Bootstrapのエンベッド部品を使用することで、レスポンシブルなYouTubeなどの動画埋め込みが行えます。

## 本章の参考ページ

[Bootstrap公式サイト | Embed ](https://getbootstrap.jp/docs/4.4/utilities/embed/)

# 基本的な使い方

動画埋め込みに使用する`iframe`タグなどに対して、`embed-responsive`クラスを設定することで、埋め込みコンテンツの縦横比を保ったまま、画面幅に応じた表示サイズの変更（レスポンシブル対応）ができます。

- サンプル

![](https://gyakuten-app.s3-ap-northeast-1.amazonaws.com/texts/bootstrap2/embedSample.gif)

- ソースコード

```html
<div class=""container"">
  <p>16:9のアスペクト比</p>
  <div class=""embed-responsive embed-responsive-16by9"">
    <iframe class=""embed-responsive-item"" src=""https://www.youtube.com/embed/Outcx4StSyU""></iframe>
  </div>
</div>
```

また、`embed-responsive-*`クラスを指定することで、埋め込み動画のアスペクト比（縦横の比率）を設定できます。
指定可能なアスペクト比は、以下のとおりです。

| クラス値 | 内容 |
| ------- | ---- |
| `embed-responsive-21by9` | 21:9のアスペクト比 |
| `embed-responsive-16by9` | 16:9のアスペクト比 |
| `embed-responsive-4by3` | 4:3のアスペクト比 |
| `embed-responsive-1by1` | 1:1のアスペクト比 |"
HTML&CSS,HTML&CSS 実践編(準備),"### このプログラムの目的

- 転職で使うポートフォリオサイト作りのサイトです。
  - HTMLとCSSでプロフィールサイトを作って、サイトのお客様（転職予定の会社様）に刺さるサイトに仕上げるためには、心理学的な要素も必要です。

- HTML，
- 開始タグ，終了タグ，
- Webブラウザ，エディタ，
- titleタグ

### HTML

- HTMLは、文章を読みやすくするためのルールです。
  - 読者にとって読みやすくする。
    - ホームページやブログで文字を読みやすくするために、タイトルをつけたり、見出しをつけたり、太文字にしたり色をつけたりすることです。
  - 検索エンジンにとって読みやすくする
    - よく効くと思いますが、SEOというものになります。検索エンジン最適化という意味です。
- 読者と、検索エンジンの2つにとって読みやすく作るのが、良いホームページ、ブログということになります

### 開始タグ、終了タグ

```
<html> や <head> などを タグ(tag) と呼びます。
多くのタグは、<b>～</b> のように 開始タグ(start tag) と 終了タグ(end tag) で囲みます。
開始タグのタグ名の前にスラッシュ(/)をつけたものが終了タグです。
開始タグを記述するときはそれに対応する終了タグも記述するのが原則ですが、
終了タグを省略できるもの(<li> や <dd>など)や、
終了タグの無いもの(<br> や <img> など)があります。
```

具体例はこのような感じです。

```
○ <html>
○ <HTML>
○ <Html>
× ＜ＨＴＭＬ＞　← 全角文字は駄目
× 〈HTML〉← 半角のように見えるけど実は全角
× < HTML>　← < の後に空白を入れては駄目
```

#### プログラミング学習の3つのミス！

上の具体例はプログラミング学習する上でほとんどの言語の基本です。
【ポイントは3つです！】

- 全角文字で入力していてNG
- スペルミスでNG
- 空白が入っていてNG

この3つが、「うまくいかないんだけど！」という問題の大部分だったりします。

ここで順番に理解しておくと次のようないいことがあります。

- 「なんか動かない！？」がかなり減ります。
- 「あれ？」と思ってから「自分で解決」できるようになります。

ですので、「半角」で、「空白を入れず」に「スペルミス」をしないようにプログラミングしていきましょう！

### Webブラウザ

パソコンやスマートフォンなどから、いつもお気に入りのサイトを見ると思います。そのサイトを見るためのソフトウェアのことで、

- Internet Explorer
- safari(サファリ)
- GoogleChrome(グーグルクローム)

などがあります。
プログラミングをやる場合は、Google Chromeがオススメです。使っていない方は、ダウンロードしてくださいね。

ダウンロードは下記から↓
https://www.google.com/intl/ja_jp/chrome/

### titleタグ

```
これがタイトルタグです。↓

<title>タイトルが入ります</title>
```

titleタグ（タイトルタグ）とは、サイトやページにタイトル（題名）をつけるためのHTMLタグの一種です。
検索結果に表示されるだけでなく、ブックマークやSNSでURLを共有する際などにデフォルトとの名称に使われたりもします。

### 属性，headタグ，bodyタグ

これから説明するのは以下の3つ

- 属性
- headタグ
- bodyタグ

です。

### 属性とは

![img-tag01](https://gyakuten-app.s3-ap-northeast-1.amazonaws.com/texts/css_ad/img-tag/img-tag01.png)

HTMLでは不等号の記号　”<”　と　”>”　ではさまれた英数字のタグと、開始タグから終了タグまでの全体をさす要素があります。この中で「属性」とは開始タグの中に記載されていて、タグの性質を細かく表現するものです。例えばあるフォントの色を指定したい場合とか、サイズを指定したい場合などが「属性」となり、色やサイズは属性に対する値として与えます。具体的な文法としては、開始タグの要素名がスペースで区切られた後に文字がある場合があります。それが、そのタグの属性を表し、さらに「＝」が続いている場合は文字や数値である値が入ります。

下の例では、開始タグ<font>に属性として色であるcolorを、値としてBlack（黒）を設定しています。つまり「毎日ちゃんと野菜を食べよう」が黒い文字で表示されます。書式としては<属性=”値”>となっていて、開始タグのみに属性と値が記載され、終了タグには属性や値がないことを確認してください。

```
<font color = “Black”>毎日ちゃんと野菜を食べよう</font>
```

ダブルクオーテーションがわからない方は、下記リンクから見てください。

[https://www.1101.com/dictionary/hobojisyo/kigou_yomikata.html](https://www.1101.com/dictionary/hobojisyo/kigou_yomikata.html)

また、わからない言葉があったら、その度にググる（googleで検索する）ということをやっていくと、どんどんわかるようになってきますよ＾＾

「プログラマーはいかにググって作れるか」だったりしますので、クセにしていきましょう。

### headタグ bodyタグ

![img-tag02](https://gyakuten-app.s3-ap-northeast-1.amazonaws.com/texts/css_ad/img-tag/img-tag02.png)

<HEAD>～</HEAD>の間には、文書のタイトル等のヘッダ情報を記述します。 そして<BODY>～</BODY>の間には、実際にブラウザに表示される文書の本体を記述します。

実際にコードで書くとこんな感じです。

```
<!DOCTYPE html>
<html lang=""ja"">
<head>
ここにmetaタグなどの要素を置く。
</head>
<body>
ここにコンテンツ要素を置く。
</body>
</html>
```

### headの役割(SEOに重要)

せっかく閲覧者に意味のあるサイトを作っても、サイトに訪問してもらい、見てもらわなければ意味がありません。

検索されること（つまりSEO）につなげるために、検索エンジンにサイトの情報を提供したり(indexの指示を出したり、titleやdescriptionでブラウザにサイトの情報を提供します)するのがheadの役割です。それ以外にもCSSやJs(JavaScript)などの外部ファイルを読み込んだりします。

### bodyタグの役割

ホームページやブログの中身（ブラウザで表示される部分）をbodyタグにコーディングしていきます。

「具体的には」

- text=""色""
  - ページ全体の文字の色を指定
- link=""色""
  - まだ見ていないページへのリンクの色を指定
- vlink=""色""
  - すでに見たページへのリンクの色を指定
- alink=""色""
  - クリックした時のリンク色を指定
- bgcolor=""色""　
  - ページの背景色を指定
- background=""画像url
  - ページの背景を指定

こんなことができます。

### 見出し(h1〜h6)タグ，pタグ，imgタグ，brタグ，hrタグ，strongタグ，olタグ，ulタグ，liタグ

これから解説するのは以下の９個

- 見出し(h1〜h6)タグ，
- pタグ，
- imgタグ，
- brタグ，
- hrタグ，
- strongタグ，
- olタグ，
- ulタグ，
- liタグ


#### 見出し(h1〜h6)タグ (検索に超重要)

「見出しタグ一覧」

```
<h1>１番大きい見出し</h1>
<h2>２番目に大きい見出し</h2>
<h3>３番目に大きい見出し</h3>
<h4>４番目に大きい見出し</h4>
<h5>５番目に大きい見出し</h5>
<h6>１番小さい見出し</h6>
```

上の6つが見出しタグの全てです。

#### SEO検索に超重要の理由

ブログやWebページでは、キーワード検索でアクセスを集めるのに、Googleが判断するポイントがあります。
そのポイントが下記の項目です。

- タイトルタグ
- 見出し(h1~h6)タグ

です。

この項目にキーワードが入っていることで、検索上位に来る判断要素とされているので、
見出しは見た目と実用性について両方で大切です。

見出しって文字の大きさでしょ？

いいえ、文字の大きさに使ってはいけません。
見出しの使い方にはルールがあります。
これを守ることで、読み手が理解しやすく、
検索エンジンにも評価されやすい記事を書くことができます。

#### h1~h6タグの使い分け

- h1〜h6を使う順番を守る

基本的にh1見出しから順番に使っていきます。「デザイン的に都合が良いから」といきなりh4見出しを使ったりするのはNGです。

-  h1タグの使用は1回だけにする

h1タグは最も大きな見出しで、ウェブページの主題を表すのに一度だけ使うのが理想的です。複数回使用自体がSEO的にマイナス評価になることは無いようなのですが、記事のテーマが読み手にも検索エンジンにも伝わりづらくなります。基本的には1ページ（1記事）につき一度だけ使うようにしましょう。

- h1タグはtitleタグで置き換えられることが多いです。
  -「あれ？h1が使われていない？」と思っても大丈夫です。必ずh1を使わなければいけないということもありません。ブログなどではh2やh3ばかり使うことが多いです。

- h2〜h6は何回使ってもOK
  - h2以下の見出しタグは何回使ってもOKです。基本的に記事本文ではh2〜h6を使うことになるでしょう。

#### 実際に使われるh2タグとh3タグ

![img-tag03](https://gyakuten-app.s3-ap-northeast-1.amazonaws.com/texts/css_ad/img-tag/img-tag03.png)

実際にブログやWebページで使うのはh2タグやh3タグがほとんどです。上の図のように、

- h2で大セクションのタイトル
  - h2大セクションの文章
    - h3で中セクションのタイトル
      - h3中セクションの文章
    - h3で中セクションのタイトル
      - h3中セクションの文章

      繰り返し・・・

というように書いていくのが、正しい使い方で、SEO的にも良い。ということになります。

なぜSEOに良いかというと、それが正しい使い方だからです。
正しく使うことで、検索エンジンが正しく認識してくれて、Webページやブログを検索に表示してくれます。

#### h1~h6タグのまとめ

正しく使うことで、Googleが認識するのに役立ちます。

Googleも間違った文法だからと言って検索順位を下げるアルゴリズムはないと公言していますが、正しく使えば検索の助けになると言っています。
（参考リンク：john Mueller氏の発言）

[https://www.allegro-inc.com/seo/h1-tag-google](https://www.allegro-inc.com/seo/h1-tag-google)

### pタグ，

Pタグとは、Paragraphの略で、「段落」を意味するHTMLタグのことです。

Pタグは、＜p＞～＜/p＞でマークアップすることで、段落を作ることができます。

ここで余談ですが、マークアップという言葉について知ってみましょう。

### マークアップはこんなこと。

- どのように表示したいかを『タグ』で囲い意味をつけること
- マークアップ言語は主にhtmlとxmlの２つ
- マークアップ言語≠プログラミング言語

マークアップとは、webサイトを作成する時に使用するhtmlという言語でサイト内の文書に意味づけをしていく作業のことを指します。

例えばwebページを作成する時に、以下のように「見出し / 箇条書きリスト / 文章」という構成でページを作りたいとします。

![img-tag04](https://gyakuten-app.s3-ap-northeast-1.amazonaws.com/texts/css_ad/img-tag/img-tag04.png)

しかし、ただテキストを書いただけでは、googleはどのようにブラウザに表示してよいかわかりません。そのため、この状態ではどのテキストもすべて同じようにブラウザに表示されてしまいます。

そこでgoogleに適切にwebページの内容を伝えるためにhtmlというマークアップ言語を使用しタグをつけます。
htmlでは「このタグで囲めば、その部分が〇〇で表示される」というものが決まっています。

例えば…

- <title></title>で囲めばタイトル
- <h2></h2>で囲めば見出し
- <li></li>で囲めば箇条書き
- <p></p>で囲めば段落

という感じです。

では実際先ほどマークアップした内容がどのように表示されるのか見ましょう。

##### マークアップしたもの

```
<title>これはタイトル</title>
<h2>これは見出し</h2>
<ul>
  <li>箇条書き01</li>
  <li>箇条書き02</li>
  <li>箇条書き03</li>
</ul>
<p>ここはテキストです</p>
<p>ここはテキストです</p>
```

##### 実際に表示されるもの

![img-tag07](https://gyakuten-app.s3-ap-northeast-1.amazonaws.com/texts/css_ad/img-tag/img-tag07.png)

###### うまく表示されました

それぞれのタグで囲った部分が狙い通りに表示されていますね。このようにテキスト（≒文書）に対して意味づけをしていくことをマークアップするといいます。

### imgタグ，

imgタグを使えば、下の画像のように、ブラウザに画像を表示させることができます。

![img-tag05](https://gyakuten-app.s3-ap-northeast-1.amazonaws.com/texts/css_ad/img-tag/img-tag05.png)


では、基本的なimgタグの使い方を見ていきましょう。

imgタグの基本的な使い方
imgタグは、
<img src=”URL”>のURL部分に画像の出処を指定することでその画像が表示されます。
imgタグは、終了タグ（</〇〇>）が
不要なことに注意してください。

こちらは後ほど教材で画像を挿入するときに
手を動かしてやっていきますので、今はそういうものなんだ。という認識で大丈夫です。

### brタグ，

「BR」とは「Break」の略で、改行を行うためのタグです。終了タグなしで使います。
似たタグに<p>タグがありますが、
文章を明示的に改行するためには<br>タグを用います。

<br>タグは、しばしば余白を開けるために使用されることもありますが、
その場合は<br>タグではなくスタイルシートを使用して調整することをおすすめします。
<br>タグでレイアウトを作っても、ユーザーの環境によって行間などが変わってしまう可能性があるからです。

また、同じ理由で、文字サイズによって改行位置が変わってしまい、
テキストが読みづらくなってしまうこともあるので注意が必要です。

HTMLとCSSでWebサイトを作っていく場合、brタグはあまり多用しません。

### hrタグ，

hrタグはHTMLで水平線を引くことができるものです。
hrタグはデザインとしても使えますし、Webサイトを作るときにみやすくもなります。

hrタグの基本
HTMLでは、<hr>タグを使えば簡単に水平線を引くことができます。

水平線は文書内で話題が変わった時や
コンテンツの区切りなどに使われることが多いです。

### strongタグ，

strongタグで重要なテキストを示し、HTMLソースを最適化しながら、サイトパフォーマンスを高めることが可能です。

##### strongタグとは？
strongタグとは、テキストの重要性を示すことができるHTMLファイルに記述するタグのことです。

使い所は、重要性を示したいテキストをstrongタグで囲うというところです。

簡単にいうと、太文字です。

### olタグ，＋　liタグ

これは箇条書きを使うときに使うのですが、
初心者にはとてもわかりにくいんです。
間違えて使うとサイトが崩れたり、うまく表示されていないということになりますので、ここで使い方を覚えてしまいましょう。

olを使うと以下のように番号付の箇条書きになります。

### ulタグ，＋　liタグ

ulとliを使うと、各項目の先頭が黒ポチの箇条書きとなります（この黒ポチのデザインは変えることができます）。liタグは何回使ってもOKです。箇条書きの項目数分だけ増やしましょう。

![img-tag06](https://gyakuten-app.s3-ap-northeast-1.amazonaws.com/texts/css_ad/img-tag/img-tag06.png)

##### ulとolの違いは？

つまりこの２つの違いは以下のようになります。

- ul：黒ポチの箇条書き
- ol：番号付きの箇条書き

この箇条書きは、使うほどみやすくなりますので、
長い文章を書くより、コンパクトに箇条書きで書いて、
みやすくすることをお勧めします。

### フォーム，

フォームはお問い合わせフォームだったり、SNSのボタンだったり、Webサービスでは必須の技術になります。

formタグ，inputタグ，リンク，aタグ，href属性

divタグ，spanタグ，ブロック要素，インライン要素，class，id

- headerタグ，navタグ，footerタグ，インデント，コメント

## css tag memo

CSSとは何か，CSSの文法はどうなっているのかを解説しています．
CSS，セレクタ，プロパティ，リンクタグ


「どこにデザインを当てるのか」を指定するCSSセレクタの記述方法をみていきます．
この動画を見ると特定のclassやidがついたhtmlタグにのみデザインを当てることができるようになります．
CSSセレクタ， .クラス名，#id名，ユニバーサルセレクタ

ここでは，CSSセレクタを組み合わせて複雑な場所の指定をする方法をみていきます．
例えば，『divタグの下にあるulタグにのみデザインを当てる』といった細かい指定ができるようになります．
階層関係を指定するセレクタ，複数要素を指定するセレクタ，疑似クラス


テキストにデザインを当てる方法を確認していきます．
文字の色や大きさ，背景色などを変えることができるようになります．

colorプロパティ，background-colorプロパティ，コメントアウト，font-sizeプロパティ，text-alignプロパティ，font-weightプロパティ，カラーコード


ここでは，画像やリンクの見た目を変えるためのCSSプロパティについて学びます．
画像の大きさを変えたり，リンクの下線を消したりすることができるようになります．

widthプロパティ，heightプロパティ，background-colorプロパティ，background-sizeプロパティ，background-repeatプロパティ，displayプロパティ

サイトデザインを整えるための余白の考え方を学びましょう．
内側の余白や外側の余白をスライドを使ってわかりやすく解説しています．

borderプロパティ，margin(外側の余白)，padding(内側の余白)"
HTML&CSS,HTML&CSS 実践編1,"HTMLとCSSを使い、ポートフォリオページを作ります。

## このページの目的
- 1 HTMLとCSSをゼロから学習する
- 2 学習終了と同時に、転職に使うポートフォリオページが完成している

この２点を目的に、作成しました。

## ポートフォリオページの活用術
- 転職活動に使う
- 副業のための営業ページに使う
- 作ったページをそのままコピーすることで、転職エージェントにそのまま掲載したり、ブログにコピーして使うことができる。


## プログラマー転職への必読プロフ
- 実際に転職成功するためのポートフォリオページの内容構成については内定１０社を獲得した、ゆーきさんのプロフィールページを参考にしてみてください。

【内定１０社を獲得】転職モンスターのポートフォリオサイト
https://www.nagaoka-portfolio.site/
最初はゆーきさんのポートフォリオサイトを見るとすごすぎて

「自分には追いつけない」と思うこともありますが、1つずつ成果物をアップしていけば、いいポートフォリオサイトになっていきます。

楽しく作っていきましょう！


## ポートフォリオサイトを作っていきましょう！
![img00](https://gyakuten-app.s3-ap-northeast-1.amazonaws.com/texts/css_ad/img-html-css/img00.png)

上記のような自己紹介ページをAtomエディタを使って作ることができます。

【補足】この教材では`Atom`エディタを使用した場合の画像を掲載しておりますが，`VSCode`でも問題なく作成できます。

## 下準備をします。

Atomエディタの画面上のナビゲーションメニューから、

ファイル＞プロジェクトフォルダを追加（別ウインドウが開きます）＞
（別ウインドウの左下）新規作成（名前をhtmlcss-work)＞の順に

新しく「htmlcss-workファイル」を作成します。


その中に演習用素材からダウンロードした素材を入れてください。

### ダウンロードページ

https://gyakuten-app.s3-ap-northeast-1.amazonaws.com/texts/css_ad/img-html-css/profile2.jpg
https://gyakuten-app.s3-ap-northeast-1.amazonaws.com/texts/css_ad/img-html-css/header-bg.jpg

【参考】Macの方は上記URLを使用せずとも，ターミナルから次を実行することで画像をダウンロードフォルダに入れることができます。

```
curl -o ~/Downloads/profile2.jpg https://gyakuten-app.s3-ap-northeast-1.amazonaws.com/texts/css_ad/img-html-css/profile2.jpg
curl -o ~/Downloads/header-bg.jpg https://gyakuten-app.s3-ap-northeast-1.amazonaws.com/texts/css_ad/img-html-css/header-bg.jpg
```

素材をダウンロードし、ドラッグ&ドロップでhtmlcss-workのフォルダに入れます。

素材は各自で用意しても大丈夫です。
（自分で用意した方は、ファイル名と、画像サイズを揃えておくと今後の作業が進めやすいと思います。）

##### ファイル名とファイルサイズ
- header-bg.jpg
  - 画像サイズ : 1705px x 544px
- profile2.jpg
  - 画像サイズ : 500px x 500px

## 自己紹介ページのHTMLを作成します。
### 先ほど作成したhtmlcss-workのフォルダに、mysite.htmlを作成します。
htmlcss-workフォルダ上で右クリック＞新規ファイル＞htmlcss-work/mysite.html
の順で作成します。

では作っていきましょう。
まず、　半角で　「!」　を入力し、tabキーを入力することで、下記の内容が自動で入力されます。

```html:mysite.html
    <!DOCTYPE html>
    <html lang=""en"">
    <head>
      <meta charset=""UTF-8"">
      <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
      <meta http-equiv=""X-UA-Compatible"" content=""ie=edge"">
      <title>Document</title>
    </head>
    <body>

    </body>
    </html>
```

このページでは、全てmysite.htmlにコードを書いていきます。

次に、メタタグを２行削除します。
削除するのは下記の２行です。
headタグの下にmetaタグが３行あります。そのうちの下２行です。

```html:mysite.html
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <meta http-equiv=""X-UA-Compatible"" content=""ie=edge"">
```

そして、２行目のhtml lang=""en""　をhtml lang=""ja""に変更し、ホームページの言語の属性を英語→日本語に変更します。

そして、５行目のtitleタグを　Document→自己紹介ページ　に変更します。

bodyタグの中に hello world　と記入してみましょう
previewタブの画面には　「hello world」と表示だけされたはずです。

ここまでのコードは以下の通りになりました。

```html:mysite.html
    <!DOCTYPE html>
    <html lang=""ja"">
    <head>
      <meta charset=""UTF-8"">
      <title>自己紹介ページ</title>
    </head>
    <body>
    hello world
    </body>
    </html>
```

### ここまで行なった作業は以下の通り
- メタタグを２行削除
- html langを　en から　ja　に変更
- titleタグを　Document　から　自己紹介ページ　に変更
- bodyタグ内に hello world　と入力し、Previewタブで　hello world　と表示


### ここまでで、自己紹介ページの下準備ができました。
***
## ここからはヘッダー部分のHTMLを作っていきます。

ではまずbodyタグ内にヘッダータグを入力していきます。

```html:mysite.html
    <body>
      <header>

      </header>
    hello world
    </body>
```

 そしてその中にdivタグを作ってまとまりを作っていきます。

```html:mysite.html
     <body>
       <header>
          <div>

          </div>
       </header>
     hello world
     </body>
```

 **そのdivタグにはtopというクラスをつけておきます。**

```html:mysite.html
     <body>
       <header>
          <div class=""top"">

          </div>
       </header>
     hello world
     </body>
```


このように記述してみてください。

そして、プロフィール画像を貼り付けていきます。
先ほどのdiv class=""top""タグの中に下記のコードを入力します。
id=""icon""　の目印をつけて、あとでデザインしやすいようにします。


```html:mysite.html
    <img src=""profile.jpg"" id=""icon"">
```

imgタグの次に入力するのが、名前になります。
名前はspanタグで作ってみましょう。

```html:mysite.html
    <span id=""myname"">中川　いちろう</span>
```


その次に書くのが、ナビゲーションです。
自分のブログや、Twitter、Instagram、Facebookにリンクできるようにします。

```html:mysite.html
    <nav>
      <ul>
        <li>blog</li>
        <li>Twitter</li>
        <li>Instagram</li>
        <li>Facebook</li>
      </ul>
    </nav>
```

ここまで記載することで、
- blog
-Twitter
-Instagram
-Facebook

とリスト形式になっているのがわかるのではないでしょうか。
ではこのリストに、aタグをつけてリンクにしていきましょう

    blogを<a hred=""#"">blog</a> のように囲みます。
他も同じように囲みましょう。


```html:mysite.html
    <nav>
      <ul>
        <li><a href=""https://job555.info"">blog</a></li>
        <li><a href=""https://twitter.com/nobuyasai2"">Twitter</a></li>
        <li><a href=""https://www.instagram.com/ichiro.nobuyasai/"">Instagram</a></li>
        <li><a href=""https://www.facebook.com/nakagawa.ichiro"">Facebook</a></li>
      </ul>
    </nav>
```

こうすることで、リンクになります。
しかし、このリンクをクリックした後このページには戻ってこないことが
多いと思います。

それでは、このページをしっかりみてもらえないので
リンクをクリックした時に、別ウインドウで開くようにします。

```html:mysite.html
    <a href=""https://job555.info"" target=""_blank"">blog</a>
```

と上記のように、　target=""_blank"" を追加します。必ず前の記述から
半角スペースが入っているように注意して入力してください。

```html:mysite.html
    <nav>
      <ul>
        <li><a href=""https://job555.info"" target=""_blank"">blog</a></li>
        <li><a href=""https://twitter.com/nobuyasai2"" target=""_blank"">Twitter</a></li>
        <li><a href=""https://www.instagram.com/ichiro.nobuyasai/"" target=""_blank"">Instagram</a></li>
        <li><a href=""https://www.facebook.com/nakagawa.ichiro"" target=""_blank"">Facebook</a></li>
      </ul>
    </nav>
```

これで、blog,twitter,instagram,facebookの4つとも、新しい
ページで開くようになりました。

これで、ページのヘッダーの部分を作ってきましたので、
次回で、ページの中身を作っていきます。

### ここまででできたコードはこんな感じです。

```html:mysite.html
    <!DOCTYPE html>
    <html lang=""ja"">
    <head>
      <meta charset=""UTF-8"">
      <title>自己紹介ページ</title>
    </head>
    <body>
      <<header>
        <div class=""top"">
          <img src=""profile2.jpg"" id=""icon"">
          <span id=""myname"">中川　いちろう</span>
          <nav>
            <ul>
              <li><a href=""https://job555.info"" target=""_blank"">blog</a></li>
              <li><a href=""https://twitter.com/nobuyasai2"" target=""_blank"">Twitter</a></li>
              <li><a href=""https://www.instagram.com/ichiro.nobuyasai/"" target=""_blank"">Instagram</a></li>
              <li><a href=""https://www.facebook.com/nakagawa.ichiro"" target=""_blank"">Facebook</a></li>
            </ul>
          </nav>
        </div>
      </header>
    hello world
    </body>
    </html>
```


# 中身の部分とフッターの部分を作成していきます。

headerタグの下に、divタグでまとまりを作っていきます。
divタグにcontainerとidをつけることで、まとまりにします。

```html:mysite.html
    <div class=""container"">

    </div>
```

そしてそのcontainerクラスの中に、h2タグで囲んで「自己紹介」
とタイトルをつけます。

```html:mysite.html
    <div class=""container"">
      <h2>自己紹介</h2>

    </div>
```

そして、自己紹介の下に、またdivタグでまとまりを作ります。
クラス名はprofileとします。/divの閉じタグも、divタグを作るときは
常に忘れないようにしましょう。

```html:mysite.html
    <div class=""container"">
      <h2>自己紹介</h2>
        <div class=""profile"">

        </div>
    </div>
```


これで、div class=""container""のかたまりの中に、
div class=""profile""のかたまりができました。

その中に、pタグを使って、自分の自己紹介文を書いていきましょう。

```html:mysite.html
    <p>愛知県で初の有機JASニンジンを作り、高級スーパーフランテ２４店舗に流通。
    年間1200人が受講する「健康セミナー」と有機JASニンジンのコラボ「家族で遊ぶ収穫祭」を10年開催中
    副業のアフィリエイトで月収10万円を達成、Webディレクターとして
    として個人で営業し、ホームページ制作を受注。
    1986年10月16日生まれ
    愛知県出身
    名古屋経済大学管理栄養学科</p>
```


自己紹介を書いたpタグを　div class=""profile""の中に入れます。
見にくければ改行しちゃってください。HTML上で改行しても、見た目には反映されないので大丈夫です。
もちろん最初にpタグを作成し、自己紹介を書いていく順番でも
大丈夫です。

```html:mysite.html
    <div class=""container"">
      <h2>自己紹介</h2>
        <div class=""profile"">
          <p>愛知県で初の有機JASニンジンを作り、高級スーパーフランテ２４店舗に流通。
          年間1200人が受講する「健康セミナー」と有機JASニンジンのコラボ「家族で遊ぶ収穫祭」を10年開催中
          副業のアフィリエイトで月収10万円を達成、Webディレクターとして
          として個人で営業し、ホームページ制作を受注。
          1986年10月16日生まれ
          愛知県出身
          名古屋経済大学管理栄養学科</p>
        </div>
    </div>
```


このようになりますね。
毎回、インデントを整えることも忘れないでください。

実際のHTMLで改行するためにはbrタグを入れます。
今回はbrタグを2つ挿入することにします。

```html:mysite.html
    <div class=""container"">
      <h2>自己紹介</h2>
        <div class=""profile"">
          <p>愛知県で初の有機JASニンジンを作り、高級スーパーフランテ２４店舗に流通。
          <br>
          年間1200人が受講する「健康セミナー」と有機JASニンジンのコラボ「家族で遊ぶ収穫祭」を10年開催中
          <br>
          副業のアフィリエイトで月収10万円を達成、Webディレクターとして
          として個人で営業し、ホームページ制作を受注。
          1986年10月16日生まれ
          愛知県出身
          名古屋経済大学管理栄養学科</p>
        </div>
    </div>
```


ここまで入力すると、Previewでは次のようになっていると思います。
![img01](https://gyakuten-app.s3-ap-northeast-1.amazonaws.com/texts/css_ad/img-html-css/img01.png)

少し見にくいので、自己紹介文と生年月日の間に水平線を入れましょう。

水平線はhrタグです。

ついでに、生年月日の下にもbrタグを2つ入れて読みやすくします。

```html:mysite.html
    <div class=""container"">
      <h2>自己紹介</h2>
        <div class=""profile"">
          <p>愛知県で初の有機JASニンジンを作り、高級スーパーフランテ２４店舗に流通。
          <br>
          年間1200人が受講する「健康セミナー」と有機JASニンジンのコラボ「家族で遊ぶ収穫祭」を10年開催中
          <br>
          副業のアフィリエイトで月収10万円を達成、Webディレクターとして
          として個人で営業し、ホームページ制作を受注。
          <hr>
          1986年10月16日生まれ
          <br>
          愛知県出身
          <br>
          名古屋経済大学管理栄養学科</p>
        </div>
    </div>
```

すると、このようになりました。
![img02](https://gyakuten-app.s3-ap-northeast-1.amazonaws.com/texts/css_ad/img-html-css/img02.png)

かなり見やすく改行されましたね！

生年月日の部分をbrタグで改行しましたが、若干狭すぎます。
brタグをやめて、１行ずつpタグで囲んでみましょう。

```html:mysite.html
    <div class=""container"">
      <h2>自己紹介</h2>
        <div class=""profile"">
          <p>愛知県で初の有機JASニンジンを作り、高級スーパーフランテ２４店舗に流通。
          <br>
          年間1200人が受講する「健康セミナー」と有機JASニンジンのコラボ「家族で遊ぶ収穫祭」を10年開催中
          <br>
          副業のアフィリエイトで月収10万円を達成、Webディレクターとして
          として個人で営業し、ホームページ制作を受注。
          <hr>
          <p>1986年10月16日生まれ</p>
          <p>愛知県出身</p>
          <p>名古屋経済大学管理栄養学科</p></p>
        </div>
    </div>
```


最後の大学の部分にpの閉じタグが2つ重なってしまいました。
これでは見た目も良くないので、hrタグの前にカットしてペーストします。

```html:mysite.html
    <div class=""container"">
      <h2>自己紹介</h2>
        <div class=""profile"">
          <p>愛知県で初の有機JASニンジンを作り、高級スーパーフランテ２４店舗に流通。
          <br>
          年間1200人が受講する「健康セミナー」と有機JASニンジンのコラボ「家族で遊ぶ収穫祭」を10年開催中
          <br>
          副業のアフィリエイトで月収10万円を達成、Webディレクターとして
          として個人で営業し、ホームページ制作を受注。
          </p>
          <hr>
          <p>1986年10月16日生まれ</p>
          <p>愛知県出身</p>
          <p>名古屋経済大学管理栄養学科</p>
        </div>
    </div>
```

これでキレイに整いました。
これで、水平線の下に、誕生日と、出身地と所属していた大学がわかるようになりました。

## 最後にフッターを作ります。

今まで作ってきたdiv class=""container""というクラスが、
自己紹介サイトの本文になっています。
その下に、フッターを作っていくことになります。

ですので、div class=""container""の閉じタグの下から
フッタータグを入力していきましょう。

入力するフッタータグは以下の通りです。

```html:mysite.html
    <footer>
    <p>Nakagawa ichiro</p>

    </footer>
```

こんな感じです。
実際に入力するとこうなります。

```html:mysite.html
    <div class=""container"">
      <h2>自己紹介</h2>
        <div class=""profile"">
          <p>愛知県で初の有機JASニンジンを作り、高級スーパーフランテ２４店舗に流通。
          <br>
          年間1200人が受講する「健康セミナー」と有機JASニンジンのコラボ「家族で遊ぶ収穫祭」を10年開催中
          <br>
          副業のアフィリエイトで月収10万円を達成、Webディレクターとして
          として個人で営業し、ホームページ制作を受注。
          </p>
          <hr>
          <p>1986年10月16日生まれ</p>
          <p>愛知県出身</p>
          <p>名古屋経済大学管理栄養学科</p>
        </div>
    </div>
    **ここからフッタータグをスタートします。**
    <footer>
    <p>Nakagawa ichiro</p>

    </footer>
```

フッターの部分にはコピーライトといって、このページの
著作権は私にありますよ。という表示になっています。

コピーライトは &copy; を名前の前に入力します。
;の後に半角スペースを入れて、ちょうどいい隙間を空けておきましょう。

```html:mysite.html
    <footer>
    <p>&copy; Nakagawa ichiro</p>

    </footer>

```

このように著作権のマークと自分の名前が表示されました。

現段階では一切デザインをしていないので、見た目は整っていません。


ここまで行ったことを改めて構造を確認してみると
- 画像と、自分の名前があります。
- その下に、リンク集がリスト形式で存在しています。
- その下に、h2タグで自己紹介と書いてあり、div class=""container""に本文が書いてあります。
- その下に、footerタグの中に、著作権マークとウェブサイト作成者の名前があります。

ここからCSSを使ってデザインを当ててみましょう。
### CSSを使うための準備をします。

- htmlcss-workフォルダを右クリックし、
![フォルダクリックimg03](https://gyakuten-app.s3-ap-northeast-1.amazonaws.com/texts/css_ad/img-html-css/img03.png)
- 新規ファイルを作成をクリックし、
![名前を入力img04](https://gyakuten-app.s3-ap-northeast-1.amazonaws.com/texts/css_ad/img-html-css/img04.png)
- mysite.cssと入力し、エンターキーでCSSファイルを作ります。
![mysite.cssを開くimg05](https://gyakuten-app.s3-ap-northeast-1.amazonaws.com/texts/css_ad/img-html-css/img05.png)
そうしたら、mysite.htmlとmysite.cssを
リンクするために、headタグの中にlinkタグを記入します。

```html:mysite.html
    <link rel=""stylesheet"" href=""mysite.css"" type=""text/css"" />
```

入力すると、下記のようになります。

```html:mysite.html
    <head>
      <link rel=""stylesheet"" href=""mysite.css"" type=""text/css"" />
      <meta charset=""UTF-8"">
      <title>自己紹介ページ</title>
    </head>
```

これで、CSSでデザインしていく準備が整いました。

最後に、ここまで書いてきたコードを確認しておきましょう。

```html:mysite.html
    <!DOCTYPE html>
    <html lang=""ja"">
    <head>
      <link rel=""stylesheet"" href=""mysite.css"" type=""text/css"" />
      <meta charset=""UTF-8"">
      <title>自己紹介ページ</title>
    </head>
    <body>
      <header>
        <div class=""top"">
          <img src=""profile2.jpg"" id=""icon"">
          <span id=""myname"">中川　いちろう</span>
          <nav>
            <ul>
              <li><a href=""https://job555.info"" target=""_blank"">blog</a></li>
              <li><a href=""https://twitter.com/nobuyasai2"" target=""_blank"">Twitter</a></li>
              <li><a href=""https://www.instagram.com/ichiro.nobuyasai/"" target=""_blank"">Instagram</a></li>
              <li><a href=""https://www.facebook.com/nakagawa.ichiro"" target=""_blank"">Facebook</a></li>
            </ul>
          </nav>
        </div>
      </header>
      <div class=""container"">
        <h2>自己紹介</h2>
          <div class=""profile"">
            <p>愛知県で初の有機JASニンジンを作り、高級スーパーフランテ２４店舗に流通。
            <br>
            年間1200人が受講する「健康セミナー」と有機JASニンジンのコラボ「家族で遊ぶ収穫祭」を10年開催中
            <br>
            副業のアフィリエイトで月収10万円を達成、Webディレクターとして
            として個人で営業し、ホームページ制作を受注。
            <hr>
            <p>1986年10月16日生まれ</p>
            <p>愛知県出身</p>
            <p>名古屋経済大学管理栄養学科</p></p>
          </div>
      </div>
      <footer>
      <p>&copy; Nakagawa ichiro</p>

      </footer>
    hello worlds
    </body>
    </html>
```

見た目はこんな感じになっていると思います。

![HTML完成img06](https://gyakuten-app.s3-ap-northeast-1.amazonaws.com/texts/css_ad/img-html-css/img06.png)

/footerの下のhello worldを消して、「お問い合わせはTwitterからどうぞ！」と記載し、HTMLは完成です。
＊このお問い合わせの部分は、自分のお問い合わせが受けやすいSNSでいいと思います。
＊リンクはご自身のものを使ってください。

```
  <footer>
    <p>&copy; Nakagawa ichiro</p>
    <p>お問い合わせは<a href=""https://twitter.com/nobuyasai2"" target=""_blank"">Twitter</a>からどうぞ</p>
  </footer>
  </body>
  </html>
```


### 最後に、できたHTMLファイルを実際のWebブラウザで確認してみよう！
Atomエディタタブの一番左側、projectタブから、作成したHTMLファイル
今回は「mysite.html」を右クリックし、Finderから開くを選択します。
![img07](https://gyakuten-app.s3-ap-northeast-1.amazonaws.com/texts/css_ad/img-html-css/img07.png)

すると、下記画面が開きます
![img08](https://gyakuten-app.s3-ap-northeast-1.amazonaws.com/texts/css_ad/img-html-css/img08.png)

Finderのウインドウから、「mysite.html」を右クリックし、
このアプリケーションで開く＞Google Chrome をクリックします。

＊Google Chromeブラウザをインストールしていない方は、この際にインストールしておきましょう。

![img09](https://gyakuten-app.s3-ap-northeast-1.amazonaws.com/texts/css_ad/img-html-css/img09.png)

すると、Webブラウザでmysite.htmlが表示されました。
![img10](https://gyakuten-app.s3-ap-northeast-1.amazonaws.com/texts/css_ad/img-html-css/img10.png)

これで、見たいHTMLファイルをブラウザで見ることができるようになりました！
AtomエディタのPreview表示も超ベンリですが、
実際のWebブラウザで確認することも大切になってきます。

## HTMLはここで完成です！次はCSS編で自己紹介ページにSNS風のデザインを当てていきましょう！"
HTML&CSS,HTML&CSS 実践編2,"## CSSでデザインを当てていきましょう

これから、mysite.cssを書いていくことで、デザインを
当てていくことになります。

*前回のHTML編の最後でhtmlファイルとcssファイルのリンクの方法を書いてありますので、
リンクできていない方はそちらをみてリンクをしてから初めてください。


では、ヘッダーの背景画像を当てていくところから始めましょう。

ヘッダーの背景画像を変えていくには、cssに以下のように書いていきます。

```css:mysite.css
    header{
      background-img: url(""/Users/ritsuko/Desktop/server/Atom/htmlcss-work/header-bg.jpg"");

    }
```

では、CSSからはWebブラウザで反映を確認していきましょう。

### 前回作ったHTMLファイルを実際のWebブラウザで開きます。
Atomエディタタブの一番左側、projectタブから、作成したHTMLファイル
今回は「mysite.html」を右クリックし、Finderから開くを選択します。
![img07](https://gyakuten-app.s3-ap-northeast-1.amazonaws.com/texts/css_ad/img-html-css/img07.png)

すると、下記画面が開きます
![img08](https://gyakuten-app.s3-ap-northeast-1.amazonaws.com/texts/css_ad/img-html-css/img08.png)

Finderのウインドウから、「mysite.html」を右クリックし、
このアプリケーションで開く＞Google Chrome をクリックします。


![img09](https://gyakuten-app.s3-ap-northeast-1.amazonaws.com/texts/css_ad/img-html-css/img09.png)

すると、Webブラウザでmysite.htmlが表示されました。
![img10](https://gyakuten-app.s3-ap-northeast-1.amazonaws.com/texts/css_ad/img-html-css/img10.png)

これで、見たいHTMLファイルをブラウザで見ることができるようになりました！
## CSSを書いた後、デザインの反映を確認する方法
- mysite.cssを保存
- 先ほど立ち上げておいたmysite.htmlが表示されたGoogle Chromeを更新
- これでCSSの更新を毎回見ることができます。

#### もし間違えてブラウザを消してしまっても、同じ手順で確認画面を開くことができます。

では続きをやっていきましょう。
headerの背景画像を挿入しました。しかし、まだデザインがうまくできていません。
![img-css01](https://gyakuten-app.s3-ap-northeast-1.amazonaws.com/texts/css_ad/img-html-css2/img-css01.png)

これはbackgroundのサイズを指定していないから起こる問題で、これから解決していきます。
#### 背景画像の繰り返しを防ぐ

```css:mysite.css
    background-size: cover;
```

を追加します。保存をし、更新をすると、繰り返しを防ぎました。

#### 背景画像の周りの白い余白を消す
デフォルトで、周りに若干の余白が定義されています。
これをマージンと言います。
マージンを０にして、なくしてしまいましょう。

headerの前に、マージンを定義します。

```css:mysite.css
    *{
    margin: 0;
    padding: 0;
    }
```

これで、headerの背景画像の周りの余白も無くなりました。
![img-css02](https://gyakuten-app.s3-ap-northeast-1.amazonaws.com/texts/css_ad/img-html-css2/img-css02.png)
ここまでのCSSのコードは以下の通りになっています。

```css:mysite.css
    *{
    margin: 0;
    padding: 0;
    }

    header{
      background-image:url(/Users/ritsuko/Desktop/server/Atom/htmlcss-work/header-bg.jpg);
      background-size: cover;
    }
```

#### もしうまくできていない場合は、
問題点として
- 半角スペースを入れるところが全角スペースになっている
- :（コロン）と；（セミコロン）の打ち間違いがある
- headerを haedrと入力するなどの入力ミスがある

これが初歩的なミスとしてあるので、チェックしてみましょう。

#### 問題点を予測する方法
チェック方法として、上のコードをコピペしてみるという方法があります。
それで動けば、コードが間違っていますし、
それでも動かなければ、リンクがうまくいっていないのだろうと
問題点を予測することができます。

#### では次に、bodyの背景色に、緑色を当てていきましょう。
headerのCSSの下に、下記コードを書いてみましょう。


```css:mysite.css
    body{
      background-color: #ddffcc;
    }
```

グーグルで実際のカラーコードを #ddffcc と検索すると、色が出てきます。
ここで好みのカラーを簡単に見つけることもできるので、使ってください。

それでは保存してもらって、自己紹介ページをみてみてください。
黄緑色の背景色が適用されているのがわかります。

![img-css03](https://gyakuten-app.s3-ap-northeast-1.amazonaws.com/texts/css_ad/img-html-css2/img-css03.png)

#### 自分のアイコンが大きすぎるので、サイズを変えます。

このままではサイズが大きすぎるので、サイズを変えていきましょう。

この画像には、id=iconというのが付いています。
プロフィール画像のサイズを150pxに指定します。
bodyのCSSの下に、コードを書いていきます。

```css:mysite.css
    #icon{
    width: 150px;
    }
```

すると、下のサイズになります。

![img-css04](https://gyakuten-app.s3-ap-northeast-1.amazonaws.com/texts/css_ad/img-html-css2/img-css04.png)

##### このままではアイコンがみにくいので、白い線を入れていきます。
#iconのCSSに追加していきます。

```css:mysite.css
    #icon{
    width: 150px;
    border: solid white;
    }
```

すると、白い線が引かれます。

##### 角も丸くしましょう。

CSSプロパティを書いていきます。
border: solid white;の下に追記していきます。

```css:mysite.css
    border-radius: 10%;
```

![img-css-05](https://gyakuten-app.s3-ap-northeast-1.amazonaws.com/texts/css_ad/img-html-css2/img-css05.png)
今回は10%ですが、50%にすると、丸になります。
試してみてください。
#iconのCSSは下記の通りになりました。

```css:mysite.css
    #icon{
    width: 150px;
    border: solid white;
    border-radius: 10%;
    }
```

### 自分の名前を白文字で目立たせます。
htmlファイルを見てみると、名前のところは

```css:mysite.css
    <span id=""myname"">中川　いちろう</span>
```


と記述されており、id=""myname""というのが付いています。

ですので、CSSファイルでは#mynameで作り、色と文字の大きさを変えます。
- colorがWhite（白）
- font-sizeが40px(大きさ)
- font-weightがbold(太さ)

を入力していきます。

```css:mysite.css
    #myname{
      color: white;
      font-size: 40px;
      font-weight:bold;
    }
```


![img-css06](https://gyakuten-app.s3-ap-northeast-1.amazonaws.com/texts/css_ad/img-html-css2/img-css06.png)

さらに、文字をもっとかっこよくします。

##### 文字に影をつけましょう。

#mynameに追加します。

```css:mysite.css
    text-shadow: 2px 2px 1px black;
```

ちなみに、この数値を変えると、影の大きさや位置を変えることができます。
詳しく知りたい方はtext-shadowで検索してみてください！

![img-css07](https://gyakuten-app.s3-ap-northeast-1.amazonaws.com/texts/css_ad/img-html-css2/img-css07.png)

これでかっこよくなりましたね！
#mynameのCSSは以下のようになりました。

```css:mysite.css
    #myname{
      color: white;
      font-size: 40px;
      font-weight:bold;
      text-shadow: 2px 2px 1px black;
    }
```

## ここまででCSSは下記のようになりました。

```css:mysite.css
    *{
      padding: 0;
      margin: 0;
    }

    body{
      background-color: #ddffcc;
    }

    #icon{
    width: 150px;
    border: solid white;
    border-radius: 10%;
    }

    #myname{
      color: white;
      font-size: 40px;
      font-weight:bold;
      text-shadow: 2px 2px 1px black;
    }

    header{
      background-image:url(/Users/ritsuko/Desktop/server/Atom/htmlcss-work/header-bg.jpg);
      background-size: cover;
    }
```

### ナビゲーションバーをデザインしていきます。

ナビゲーションバーはnavというのが付いています。
CSSに記入していきます。
##### ナビゲーションバーの背景色を変えます。
headerの下に書いていきましょう。

```css:mysite.css
    nav{
    background-color: #aacccc;
    }
```

CSSに記入しセーブして、ブラウザを更新します。

すると、blog twitter Instagram Facebookのナビゲーションの
色が変わっています。

![img-css08](https://gyakuten-app.s3-ap-northeast-1.amazonaws.com/texts/css_ad/img-html-css2/img-css08.png)

### ナビゲーションバーの要素を横並びにします。
##### blog twitter Instagram Facebookのナビゲーションを縦から横に揃える方法です。
ナビゲーションバーのHTMLは、下記のようになっています。

```html:mysite.html
    <nav>
      <ul>
        <li><a href=""https://job555.info"" target=""_blank"">blog</a></li>
        <li><a href=""https://twitter.com/nobuyasai2"" target=""_blank"">Twitter</a></li>
        <li><a href=""https://www.instagram.com/ichiro.nobuyasai/"" target=""_blank"">Instagram</a></li>
        <li><a href=""https://www.facebook.com/nakagawa.ichiro"" target=""_blank"">Facebook</a></li>
      </ul>
    </nav>
```

      この　<li>　はブロック要素の
      タグなので、自動で改行が入ってしまうわけです。

      改行を入れないようにするためには、
      小さな要素として扱うインライン要素として
      デザインで見せてあげればいいです！

      そのため、<nav>の下の<ul>の下の<li>に対して
      CSSを書きます。
では実際に書いてみます。

CSSのnavの下に書いていきます。

```css:mysite.css
    nav ul li{
        display: inline;
    }
```

![img-css09](https://gyakuten-app.s3-ap-northeast-1.amazonaws.com/texts/css_ad/img-html-css2/img-css09.png)
このように、横並びに変えることができました。

##### ナビゲーションバーにもう少しマージンをつけて見栄えよくしましょう
nav ul liの続きを書いていきます。

```css:mysite.css
    margin: 0 15px 0 15px;
```

![img-css10](https://gyakuten-app.s3-ap-northeast-1.amazonaws.com/texts/css_ad/img-html-css2/img-css10.png)

これで、間隔が見栄えよくなりました。
マージンの数字の順番についてはmarginで検索してみてください。


##### ナビゲーションバーのリンクの下線を消します。
リンクは aタグが割り当てられています。
a href=""https://job555.info"" の 最初のaのことです。

```html:mysite.html
    <li><a href=""https://job555.info"" target=""_blank"">blog</a></li>
このaタグの位置はというと・・・・

    <nav>
      <ul>
        <li><a href=""https://job555.info"" target=""_blank"">blog</a></li>
        <li><a href=""https://twitter.com/nobuyasai2"" target=""_blank"">Twitter</a></li>
        <li><a href=""https://www.instagram.com/ichiro.nobuyasai/"" target=""_blank"">Instagram</a></li>
        <li><a href=""https://www.facebook.com/nakagawa.ichiro"" target=""_blank"">Facebook</a></li>
      </ul>
    </nav>

    <nav>の下の<ul>の下の<li>の下の<a>
    ということになるので・・・
```

CSSに記述するのは、下記を書いていきます。
text decorationが、リンクの下線で、noneがなしです。

```css:mysite.css
    nav ul li a{
        text-decoration: none;
    }
```

![img-css11](https://gyakuten-app.s3-ap-northeast-1.amazonaws.com/texts/css_ad/img-html-css2/img-css11.png)

これで、リンクの下線がなくなりました。


##### ナビゲーションの文字の色と、太さを変えます。

先ほどの nav ul li aに追加していきます。

```css:mysite.css
    color: #444444;
    font-weight: bold;
```

だいぶかっこよくなってきましたね！

nav ul li a のCSSはこのようになりました。

```css:mysite.css
    nav ul li a{
        text-decoration: none;
        color: #444444;
        font-weight: bold;
    }
```


![img-css12](https://gyakuten-app.s3-ap-northeast-1.amazonaws.com/texts/css_ad/img-html-css2/img-css12.png)

##### サイトを中央揃えにします。

headerがどのようなHTMLで作られていたかというと

div class=""top""というのがついています。

なので、このtopというのを中央にします。
そうすることで、headerの中身を中央に揃えることができます。

```html:mysite.html
    <header>
      <div class=""top"">
        <img src=""profile2.jpg"" id=""icon"">
        <span id=""myname"">中川　いちろう</span>
        <nav>
          <ul>
            <li><a href=""https://job555.info"" target=""_blank"">blog</a></li>
            <li><a href=""https://twitter.com/nobuyasai2"" target=""_blank"">Twitter</a></li>
            <li><a href=""https://www.instagram.com/ichiro.nobuyasai/"" target=""_blank"">Instagram</a></li>
            <li><a href=""https://www.facebook.com/nakagawa.ichiro"" target=""_blank"">Facebook</a></li>
          </ul>
        </nav>
      </div>
    </header>
```

どのように記述するかというと

##### まず、幅を決めます。

```css:mysite.css
    .top{
    width: 800px
    }
```

![img-css13](https://gyakuten-app.s3-ap-northeast-1.amazonaws.com/texts/css_ad/img-html-css2/img-css13.png)

##### 中央に揃えます。

```css:mysite.css
    .top{
        width: 800px;
        margin: 0px auto 0px auto;
    }
```

![img-css14](https://gyakuten-app.s3-ap-northeast-1.amazonaws.com/texts/css_ad/img-html-css2/img-css14.png)
このように、中央に寄せることができました。
なぜautoにしたかというと、今回は中央に寄せたかったので、
左から●●px、右から●●pxと指定できません。

上下は0pxで大丈夫です。

画面のサイズによって変わってしまうからです。

###### ですから、左をauto,右をautoにすることで、自動的に真ん中にしてくれるというわけです。

あとは、細かいところを完成させていきましょう。

##### navの左側に余白を作ります。

```css:mysite.css
    nav ul{
      margin-left: 210px;
    }
```

![img-css15](https://gyakuten-app.s3-ap-northeast-1.amazonaws.com/texts/css_ad/img-html-css2/img-css15.png)
これで余白が入りました。

##### 自分の画像の写真の余白を整えます。

自分の画像の写真に割り当てられたidは　icon　というidでした。
前回　CSSに　#icon　というものを作りましたので、
それに追加していきます。

下記のCSSを#iconに追加します。

```css:mysite.css
    margin-top: 40px;
    margin-left: 30px;
```

追加したあとは、こんなCSSになりました。

```css:mysite.css
    #icon{
    width: 150px;
    border: solid white;
    border-radius: 10%;
    margin-top: 40px;
    margin-left: 30px;
    }
```

見た目はこんな感じです。

![img-css16](https://gyakuten-app.s3-ap-northeast-1.amazonaws.com/texts/css_ad/img-html-css2/img-css16.png)

##### 自分の名前にも、余白を加えて整えます。

ちょっとアイコン画像と名前がくっつき過ぎていますので、
CSSの#iconに余白を加えます。

下記のCSSを＃iconに追加します。

```css:mysite.css
    margin-right: 20px;
```

    追加したあとは、こんなCSSになりました。

```css:mysite.css
        #icon{
        width: 150px;
        border: solid white;
        border-radius: 10%;
        margin-top: 40px;
        margin-left: 30px;
        margin-right: 20px;
        }
```

見た目はこんな感じです。

![img-css17](https://gyakuten-app.s3-ap-northeast-1.amazonaws.com/texts/css_ad/img-html-css2/img-css17.png)

名前の余白を開けるのにも、隣の#iconの右側に
余白をつけることで代用できますし、
CSS的にもわかりやすくていいですね。

##### もう少しスタイリッシュにしてみます。

アイコンをナビゲーションバーに少し重ねてみましょう。
マージンをマイナスに指定すれば、めり込ませることができます。
下記のCSSを＃iconに追加します。

```css:mysite.css
    margin-bottom: -30px;
```

追加したあとは、こんなCSSになりました。

```css:mysite.css
        #icon{
        width: 150px;
        border: solid white;
        border-radius: 10%;
        margin-top: 40px;
        margin-left: 30px;
        margin-right: 20px;
        margin-bottom: -30px;
        }
```

見た目はこんな感じです。

![img-css18](https://gyakuten-app.s3-ap-northeast-1.amazonaws.com/texts/css_ad/img-html-css2/img-css18.png)

このように、画像をめり込ませることができました。
#iconのmarginの下記4つは、１行で書くことができます。

```css:mysite.css
    margin-top: 40px;
    margin-left: 30px;
    margin-right: 20px;
    margin-bottom: -30px;
    }
```

１行で書くときは、top right bottom leftの順で書きます。
###### 上から時計回りと覚えておくといいです。

```css:mysite.css
    margin: 40px 20px -30px 30px;
```

となります。

追加したあとは、こんなCSSになりました。

```css:mysite.css
        #icon{
        width: 150px;
        border: solid white;
        border-radius: 10%;
        margin: 40px 20px -30px 30px;
        }
```

見た目は変わりません。まとめたことによりコードが少なくなり
わかりやすくなりました。


##### ナビゲーションバーの角を丸くしましょう。
アイコンの角を丸くしたように、ナビゲーションバーも角を丸くします。
CSSのnavにborder-radiusを下記のように書いてきます。

```css:mysite.css
    border-radius: 10px 10px 0px 0px;
```

    となります。

追加したあとは、こんなCSSになりました。

```css:mysite.css
    nav{
    background-color: #aacccc;
    border-radius: 10px 10px 0px 0px;
    }
```

見た目はこんな感じです。

![img-css19](https://gyakuten-app.s3-ap-northeast-1.amazonaws.com/texts/css_ad/img-html-css2/img-css19.png)

## コンテンツのデザインをしよう
##### 本文の背景を白くしましょう。
本文の部分はこのようなHTMLになっていました。

```html:mysite.html
    <div class=""container"">
      <h2>自己紹介</h2>
        <div class=""profile"">
          <p>愛知県で初の有機JASニンジンを作り、高級スーパーフランテ２４店舗に流通。
          <br>
          年間1200人が受講する「健康セミナー」と有機JASニンジンのコラボ「家族で遊ぶ収穫祭」を10年開催中
          <br>
          副業のアフィリエイトで月収10万円を達成、Webディレクターとして
          個人で営業し、ホームページ制作を受注。
          <hr>
          <p>1986年10月16日生まれ</p>
          <p>愛知県出身</p>
          <p>名古屋経済大学管理栄養学科</p></p>
        </div>
    </div>
```


この本文はdiv class=""container""で囲まれていますので、
CSSは .container　に書いていきます。

背景色を白にします。

```css:mysite.css
    .container{
    background-color: white;
    }
```

これで、背景が白くなりました。
フッターの部分を除いて、背景が白くなっていますね。

![img-css20](https://gyakuten-app.s3-ap-northeast-1.amazonaws.com/texts/css_ad/img-html-css2/img-css20.png)

##### 次に、コンテンツ部分をナビゲーションの幅に合わせます。
以前に、headerのdiv class=""top""にサイトを中央揃えにしたCSSを
つけたのを覚えているでしょうか。

```css:mysite.css
    .top{
    width: 800px;
    margin: 0px auto 0px auto;
    }
```

このようなCSSを当てましたね。
これと同じように、widthを800px　margin: 0px auto 0px auto;
に指定することで、揃えることができます。
CSSの.container に下記のコードを書きます。

```css:mysite.css
    width: 800px;
    margin: 0px auto 0px auto;
```

これで、navと同じ幅になりました。

追加した後のCSSはこのようになりました。

```css:mysite.css
    .container{
    background-color: white;
    width: 800px;
    margin: 0px auto 0px auto;
    }
```

見た目はこんな感じです。

![img-css21](https://gyakuten-app.s3-ap-northeast-1.amazonaws.com/texts/css_ad/img-html-css2/img-css21.png)

ただ、これでは見栄えが悪いので、内側に余白をつけましょう。

###### 本文の内側に余白をつけていきます。

CSSの.containerに、paddingを追加していきます。
paddingは内側の余白をコントロールするものです。

では、.containerに下記のコードを追加していきましょう。

```css:mysite.css
    padding: 30px 30px 60px 30px;
```

追加したあとは、こんなCSSになりました。

```css:mysite.css
    .container{
    background-color: white;
    width: 800px;
    margin: 0px auto 0px auto;
    padding: 30px 30px 60px 30px;
    }
```

見た目はこんな感じになりました。

![img-css22](https://gyakuten-app.s3-ap-northeast-1.amazonaws.com/texts/css_ad/img-html-css2/img-css22.png)

しかし白い背景の横幅がちょっと出てしまっています。
これを修正しましょう。
このCSSをみてみると、
widthで800px paddingで右30px　左30pxとなっています。

```css:mysite.css
    .container{
    background-color: white;
    width: 800px;
    margin: 0px auto 0px auto;
    padding: 30px 30px 60px 30px;
    }
```

これを修正するには、paddingで左右に30pxずつ、合計
60px出ているので、widthを、-60pxすればいいということになります。
widthを下記のように修正します。

```css:mysite.css
    width 740px;
```

修正したあとは、こんなCSSになりました。

```css:mysite.css
    .container{
    background-color: white;
    width: 740px;
    margin: 0px auto 0px auto;
    padding: 30px 30px 60px 30px;
    }
```

見た目はこんな感じになりました。

![img-css23](https://gyakuten-app.s3-ap-northeast-1.amazonaws.com/texts/css_ad/img-html-css2/img-css23.png)

##### 次に、プロフィールの文章の余白をかっこよくしましょう

プロフィールの文章には、div class=""profile""というものがついています。
CSSに、.profileを書いていきましょう。

```css:mysite.css
    .profile{
      padding: 0px 20px 0px 20px;
    }
```

これで、h2タグで書いた「自己紹介」というタイトルと本文に段落ができて
見栄えが良くなりました。

![img-css24](https://gyakuten-app.s3-ap-northeast-1.amazonaws.com/texts/css_ad/img-html-css2/img-css24.png)

##### 次に１行あたりの幅を指定してみやすくします。

CSSの.profileに追記していきます。

```css:mysite.css
    line-height: 35px;
```

追加したあとは、こんなCSSになりました。

```css:mysite.css
    .profile{
      padding: 0px 20px 0px 20px;
      line-height: 35px;
    }
```

見た目はこんな感じになりました。

![img-css25](https://gyakuten-app.s3-ap-northeast-1.amazonaws.com/texts/css_ad/img-html-css2/img-css25.png)
間隔が空いて、かなりみやすくなりましたね。

##### 水平線の上下にも、余白をつけていきましょう。

水平線はhrというタグでした。
CSSにhrを書いていきます。
marginで余白をつけていきましょう。

```css:mysite.css
    hr{
      margin: 20px 0px 20px 0px;
    }
```

さらにみやすくなりました。
![img-css26](https://gyakuten-app.s3-ap-northeast-1.amazonaws.com/texts/css_ad/img-html-css2/img-css26.png)

##### 本文の背景に、角丸をつけていきます。

今までのナビゲーションの時のように、border-radiusをつけていきます。
本文の背景は.containaerでした。
CSSの.containaerに下記を追記していきます。

```css:mysite.css
    border-radius: 0px 0px 10px 10px;
```

追加したあとは、こんなcssになりました。

```css:mysite.css
    .container{
    background-color: white;
    width: 740px;
    margin: 0px auto 0px auto;
    padding: 30px 30px 60px 30px;
    border-radius: 0px 0px 10px 10px;
    }
```

見た目はこんな感じになりました。
![img-css27](https://gyakuten-app.s3-ap-northeast-1.amazonaws.com/texts/css_ad/img-html-css2/img-css27.png)

#### フッターの部分を整えていきましょう。

フッターにはfooterというタグがありました。
CSSの一番下の部分に、footerを追加します。

```css:mysite.css
    footer{

    }
```

場所を固定するためのコードをfooterの中に書きます。
position: fixed;とbottom: 0;を書くことで、一番下に
固定することができます。

```css:mysite.css
    position: fixed;
    bottom: 0;
```

見た目はこんな感じになりました。
![img-css28](https://gyakuten-app.s3-ap-northeast-1.amazonaws.com/texts/css_ad/img-html-css2/img-css28.png)

背景色を変えるため、background-colorを
footerの中に書きます。カラーコードは#9fbb9fとします。

```css:mysite.css
    background-color: #9fbb9f;
```

見た目はこんな感じになりました。

![img-css29](https://gyakuten-app.s3-ap-northeast-1.amazonaws.com/texts/css_ad/img-html-css2/img-css29.png)

文字だけ背景色がついているので、widthで幅を100%にしましょう。
そして、text-align: center;で中央揃えにします。
footerタグの中にさらに書いていきます。

```css:mysite.css
    width: 100%;
    text-align: center;
```

見た目はこんな感じになりました。

![img-css30](https://gyakuten-app.s3-ap-northeast-1.amazonaws.com/texts/css_ad/img-html-css2/img-css30.png)


文字の色を #228822　にし、paddingで
空間を開けましょう。
文字を少し小さくするために、font-sizeで小さくしましょう。
footerタグにさらに書いていきます。

```css:mysite.css
    text-color: #228822;
    padding: 30px 0px;
    font-size: 12px;
```

見た目はこんな感じになりました。

![img-css31](https://gyakuten-app.s3-ap-northeast-1.amazonaws.com/texts/css_ad/img-html-css2/img-css31.png)

これで、ひと通り自己紹介のサイトは完成しました。

![img-css32](https://gyakuten-app.s3-ap-northeast-1.amazonaws.com/texts/css_ad/img-html-css2/img-css32.png)

### ちょっと変更するだけで、自分のサイトに！
これは現在、私の自己紹介サイトになっていますが、

- アイコンの写真
- ヘッダーの写真
- 名前
- ナビゲーションバーのリンク先
- 自己紹介の文章
- フッターの名前

を変更するだけで、簡単にご自身の自己紹介サイトに
変えることができます。

あとは、どんどんポートフォリオをサイトに乗せていくだけで
自己紹介サイト＋ポートフォリオサイトができていきます。"
Git,Gitの基本,"Gitとは、プログラムのソースコードなどの変更履歴を記録・追跡するためのバージョン管理システムのことです。バージョン管理とは、その名の通り、複数存在するソースコードのバージョンを管理することを指します。

このGitを使用することによって、変更履歴をさかのぼってソースコードを元の状態に戻す事ができ、複数人での共同開発も可能になります。

![Gitでできること](/git_basic/git_basic.jpg)

チームでの共同開発をする上で、もはやGitは欠かせない存在となっています。

プログラマーというとコードを書いているイメージがあるかと思いますが、それ以前にGitなどのバージョン管理ツールが無ければ仕事になりません。ぜひ、ここで基礎を押さえておきましょう。


## Gitにおける開発の流れ
まずは基本的な用語から押さえておきましょう。

Gitがバージョン管理下におく場所を「リポジトリ」と言います。リポジトリには「ローカルリポジトリ」と「リモートリポジトリ」があります。

ローカルリポジトリは自分のパソコン内にあるリポジトリ、リモートリポジトリはネット上にあるリポジトリと覚えておきましょう。

リモートリポジトリに関しては、後ほど詳しくご説明いたします。

ユーザが変更の履歴を保存することをコミット（commit）と言います。

これはGitの持つ機能の中でも特によく使用するので、ぜひ覚えておいてください。

コミットは実行した順番で記録されるので、時系列に沿って変更履歴を追う事ができます。

そのため、過去にどういう変更を行ったのかを簡単に確認する事ができるのです。

また、コミットをする際にはコミットメッセージという形でメモを残す事ができます。

例えば、「デザインの変更をしました」とか「データベースへの登録処理を追加しました」といったメモを残す事ができるというわけです。それによって、より変更履歴の理解が容易になります。

複数人での開発を行う際は、この「コミット」と「コミットメッセージ」を利用し、誰がみても理解できるような変更履歴を作成し、任意の履歴に遡ることができるよう心がけましょう。

## gitの構成
詳細な説明に入る前に、まずはGitがファイルの状態を保存する場所についてご説明します。

実は、Gitにはファイルを保存するための場所がいくつかあります。その構成は以下の通りです。

1. ワーキングツリー（今作業しているファイルのある場所）
2. インデックス（コミットするためのファイルを登録する場所）
3. ローカルリポジトリ（リモートリポジトリに変更内容を送信するための場所）
4. リモートリポジトリ（複数人でファイルを共有するための場所）

## 同時並行で複数の開発を可能にする機能
Gitには、複数の開発を同時並行することができる機能があります。

例えば、Aさんはデータの登録を行う処理を実装し、Bさんはデータの表示形式を綺麗にするという実装をするとします。

そのとき、2人で同じファイルを編集すると、とても効率が悪くなります。

その問題を解決するための機能が「ブランチ」です。ブランチとは、文字通り開発を枝分かれさせる機能のことで、これを使用することによってAさんとBさんの開発を別々のものとして扱うことができます。

例）
Aさん　→ ブランチA
Bさん　→ ブランチB

## ローカルリポジトリとリモートリポジトリ
前述でGitのバージョン管理下にある場所をリポジトリというというお話をしました。

その中でも、ネットを介してどこからでも利用できるようにしたリポジトリのことをリモートリポジトリと言います。

それとは逆に、自分のパソコン内にあるリポジトリのことろローカルリポジトリと言います。

複数人での開発を行うときは、リモートリポジトリを複数のプログラマーで共有し、そのリモートリポジトリのクローンをそれぞれのプログラマーがローカルリポジトリにコピーして開発を行うというスタイルになります。

これによって、１つのプロジェクトを複数人で開発することが可能になるわけです。

## バージョン管理の流れ
Gitでのバージョン管理は基本的に以下のような流れになります。

- ローカルリポジトリの作成（git init）
- 変更ファイルをインデックスにあげる（git add）
- 変更履歴を保存する（git commit）

## 今回使用するサンプル
今回は、Hello World!!と表示する単純なHTMLファイルを利用して、Gitの使い方を学んでいきましょう。

`git_sample`というディレクトリを作成し、テキストエディタで`git_sample.html`というファイルを作成しましょう。

まずは、サンプルファイルを置くための`git_sample`ディレクトリをターミナルから作成しましょう。

```
mkdir git_sample
```

ディレクトリが作成できたら、cdコマンドで`git_sample`ディレクトリに移動しましょう。

```
cd git_sample
```

ディレクトリに移動できたら、`git_sample.html`を作成します。

ファイルに関しては、テキストエディタから作成してもいいのですが、ターミナルから作成することも可能です。

その際は、`touch`コマンドを使用します。`git_sample.html`という名前のファイルを作成する場合は、以下のコマンドを実行しましょう。

```
touch git_sample.html
```

これで、Gitの練習をする準備が整いました。それではさっそく、Gitコマンドについて学んでいきましょう。

## Gitをインストールする
Gitをパソコンで使用できるようにするためには、まずはインストールを行わなければいけません。

そのGitをインストールするためには、Homebrewというパッケージ管理ツールを使用すると楽なので、まずはHomebrewからインストールしましょう。

以下のコマンドをターミナルにコピー&ペーストして実行してください。それだけで、Homebrewがインストールできます。

```
/usr/bin/ruby -e ""$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)""
```

Homebrewのインストールが終わったら、以下のコマンドをターミナルに入力し、Homebrewを使用してGitをインストールします。

```
brew install git
```

インストールが完了したら、いよいよGitを利用したバージョン管理の方法について学んでいきます。なんども基礎を繰り返し、バージョン管理のスキルをしっかりと身につけていきましょう！

## ローカルリポジトリを作る
cdコマンドを利用してローカルリポジトリを作成したいディレクトリに移動できたら、`git init`というコマンドを実行します。

このコマンドで、ディレクトリ内に中身が空のローカルリポジトリを作成します。また、すでにリポジトリが存在している場合には、再度`git init`を実行する必要はありません。

```
git init
```

`ls`コマンドを入力し、gitのリポジトリができていることを確認しましょう。

以下のように.Gitというディレクトリが作成されて入れば成功です。

```
ls -la
```


## サンプルを編集する
それでは、先ほど作成した`git_sample.html`の内容を変更しましょう。以下のコードを追加してください。

```
<h1>Hello World!!</h1>
```

以上のように変更できたら、次はその変更履歴を`Git`を使用して保存します。

## ファイルをインデックスに登録する
`git init`実行後、現在作成したファイルの変更履歴を保存するために`git add .`を実行します。

このコマンドは、現在開発しているプロジェクトの中で変更があったファイルを見つけてインデックスに上げ、変更履歴を保存するための準備をしてくれます。

要するに、「変更した全てのファイル」を「Gitによってバージョン管理するための対象」に入れるということです。それでは、`git add .`を実行しましょう。

```
git add .
```

ちなみに、`git add .`は変更したファイルをまとめてインデックスにあげるためのコマンドになります。

そのほかにも、特定のファイルのみをインデックスに上げるコマンドもあります。

その場合は、`git add ファイル名`コマンドを実行します。

例） sample.rbというファイルのみをインデックスに上げる場合のコマンド

```
git add sample.rb
```

## 変更履歴を保存する
変更履歴を保存するには、`commit`というコマンドを実行します。

このコマンドを実行すると、ローカルリポジトリの変更内容を保存します。

また、`commit`を実行する際には`git add`において変更済みのファイルがインデックスにあることが必須となります。

もし変更済みのファイルがインデックスにない場合は、`commit`するものが無いというメッセージが表示されます。

```
nothing to commit, working tree clean
```

`commit`を実行する際は、以下のコマンドを入力します。`-m`や`--message`オプションをつけることによって、コミットに対するコメントを残すことができます。

これにより、各コミットにおいてどのような変更が行われたのかを把握しやすくすることができます。

```
git commit -m ""init commit""
```

## コミットまでの流れのおさらい
それでは、ファイルを変更してからコミットするまでの流れを改めておさらいしましょう。

先ほど作成した`git_sample.html`の内容を以下のように変更しましょう。

```
<h1>Good morning!!</h1>
```

変更したファイルをインデックスに登録します。

```
git add .
```

インデックスに登録したファイルをコミットします。

```
git commit -m ""change message""
```

これで、ファイルを変更してからコミットまでの一連の流れが終了です。

 `git add` を実行してから `git commit` という流れをなんども繰り返して体に覚えさせるようにしましょう。

## 変更履歴のメッセージを修正する
コミットメッセージを修正したい時には、以下のコマンドを実行します。

```
git rebase -i HEAD^
```

それでは、過去のコミットメッセージを変更してみましょう。

まずは、過去のコミットメッセージを確認してください。

```
git log
```

そうすると、過去のコミット一覧が表示され、それに対応するコミットメッセージも確認できます。


```
change message
```

今回は、`change message`というメッセージを`change hello to good morning`に変更しましょう。

それではさっそく、以下のコマンドを実行してください。

```
git rebase -i HEAD^
```

そうすると、以下のような画面が表示されます。

```
pick 65e1b59 change message

# Rebase d9a2c59..65e1b59 onto d9a2c59 (1 command)
#
# Commands:
# p, pick = use commit
# r, reword = use commit, but edit the commit message
# e, edit = use commit, but stop for amending
# s, squash = use commit, but meld into previous commit
# f, fixup = like ""squash"", but discard this commit's log message
# x, exec = run command (the rest of the line) using shell
# d, drop = remove commit
#
# These lines can be re-ordered; they are executed from top to bottom.
#
# If you remove a line here THAT COMMIT WILL BE LOST.
#
# However, if you remove everything, the rebase will be aborted.
#
# Note that empty commits are commented out
~
~
~
""~/git_sample/.git/rebase-merge/git-rebase-todo"" 20L, 680C
```

その表示の中で、一番上に書かれている`pick`の部分を`r`に変更するとコミットメッセージを編集することができます。

その際、`i`を押して表示を`INSERT`モードに切り替えてください。そうすると、以下のように画面の一覧下に`INSERT`という文字が表示されます

```
pick 65e1b59 change message

# Rebase d9a2c59..65e1b59 onto d9a2c59 (1 command)
#
# Commands:
# p, pick = use commit
# r, reword = use commit, but edit the commit message
# e, edit = use commit, but stop for amending
# s, squash = use commit, but meld into previous commit
# f, fixup = like ""squash"", but discard this commit's log message
# x, exec = run command (the rest of the line) using shell
# d, drop = remove commit
#
# These lines can be re-ordered; they are executed from top to bottom.
#
# If you remove a line here THAT COMMIT WILL BE LOST.
#
# However, if you remove everything, the rebase will be aborted.
#
# Note that empty commits are commented out
~
~
~
-- INSERT --
```

`INSERT`が表示されたら、`pick`の部分を`r`に書き換えましょう。

```
r 65e1b59 change message

# Rebase d9a2c59..65e1b59 onto d9a2c59 (1 command)
#
# Commands:
# p, pick = use commit
# r, reword = use commit, but edit the commit message
# e, edit = use commit, but stop for amending
# s, squash = use commit, but meld into previous commit
# f, fixup = like ""squash"", but discard this commit's log message
# x, exec = run command (the rest of the line) using shell
# d, drop = remove commit
#
# These lines can be re-ordered; they are executed from top to bottom.
#
# If you remove a line here THAT COMMIT WILL BE LOST.
#
# However, if you remove everything, the rebase will be aborted.
#
# Note that empty commits are commented out
~
~
~
""~/git_sample/.git/rebase-merge/git-rebase-todo"" 20L, 680C
```

書き換えられたら、キーボードの左上にある`esc`を押し、`:wq`で上書き保存します。そうすると、次にコミットメッセージが表示されます。

```
chnage message

# Please enter the commit message for your changes. Lines starting
# with '#' will be ignored, and an empty message aborts the commit.
#
# Date:      Mon Sep 10 12:58:07 2018 +0900
#
# interactive rebase in progress; onto d9a2c59
# Last command done (1 command done):
#    r 65e1b59 change hello to good morning
# No commands remaining.
# You are currently editing a commit while rebasing branch 'master' on 'd9a2c59'.
#
# Changes to be committed:
#       renamed:    .git_sample.rb.swp -> .git_sample.rb.swo
#       modified:   git_sample.rb
#
~
~
~
~
~
~
""~/git_sample/.git/COMMIT_EDITMSG"" 17L, 563C
```

コミットメッセージが確認できたら、`i`をクリックして`INSERT`モードに切り替え、コミットメッセージを変更します。

```
change hello to good morning

# Please enter the commit message for your changes. Lines starting
# with '#' will be ignored, and an empty message aborts the commit.
#
# Date:      Mon Sep 10 12:58:07 2018 +0900
#
# interactive rebase in progress; onto d9a2c59
# Last command done (1 command done):
#    r 65e1b59 change hello to good morning
# No commands remaining.
# You are currently editing a commit while rebasing branch 'master' on 'd9a2c59'.
#
# Changes to be committed:
#       renamed:    .git_sample.rb.swp -> .git_sample.rb.swo
#       modified:   git_sample.rb
#
~
~
~
~
~
~
""~/git_sample/.git/COMMIT_EDITMSG"" 17L, 563C
```

メッセージが変更できたら、`esc`を押し、`:wq`で変更内容を保存しましょう。そのあと、以下のコマンドを入力してコミットメッセージが変更されていることを確認してください。

以上で、コミットメッセージの変更は終了です。

## ブランチを作成する
ブランチとは、複数の開発を同時並行して行うために必要な仕組みです。

変更履歴の管理を分岐させることによって、各プログラマーで別々の機能を実装する事ができます。「ブランチ」という名前の通り、開発を枝分かれさせるという事ですね。そのブランチを作成するには、以下のコマンドを実行します。

ブランチは、他のブランチに合体（マージ）させる事で、一つにまとめる事ができます。

`master`と呼ばれるブランチが存在し、開発用に分岐させた他のブランチは、最終的にこの`master`にマージさせるというのが、一般的な開発の流れです。

```
git branch ブランチ名
```

`git branch`の後ろに任意のブランチ名をつける事によって、その名前で新しいブランチを作り出す事ができます。

例えば、`sample`という名前のブランチを作成したいときは、以下のようにコマンドを入力します。

```
git branch sample
```

現在存在するブランチを確認したい場合は、`git branch`を実行するだけで大丈夫です。

```
git branch
```

新しくブランチを作成し切り替えるコマンドは以下の通りです。

```
git checkout -b sample
```

## ブランチを切り替える
ブランチが作成できたら、つぎにその切り替え方を学んでいきましょう。現在、`git branch`を実行すると以下のような表示がされるかと思います。

```
* sample
  master
```

その状態で、`git_sample.html`の内容を以下のように編集してみましょう。

```
<h1>こんにちは！！</h1>
```

上記のようにコードを変更できたら、次はその変更履歴を保存します。

これまでの一連の流れを、ここで改めて確認しましょう。

変更したファイルをインデックスにあげる

```
git add .
```

変更履歴を保存する

```
git commit -m ""changed english to japanese""
```

変更履歴が保存できたら、

## ブランチをマージする（ローカルで完結）
開発が完了したブランチを他のブランチに合体することをマージと言います。

今回は、`sample`ブランチから`master`ブランチへマージする例を見て見ましょう。

まず、今存在しているブランチを確かめます。

```
git branch
```

出力結果

```
* sample
  master
```

`sample`ブランチから、`master`ブランチへと切り替えます。その際、使用するコマンドは`checkout`です。

```
git checkout master
```

次に、`merge` コマンドを利用して、 `sample` ブランチを `master` にマージさせます。これでマージは完了です。

```
git merge sample
```

ブランチを消すときは以下のコマンドを実行します。マージが終わったらいらないブランチは削除するようにしましょう。

```
git branch -d sample
```

# まとめ
以上でGitの基本操作は終わりです。

基本といっても、初心者の方にはとても難易度の高い作業であり、わからない部分があって当然です。

不明点がある場合はすぐに神里に聞いてください。また、この項目をなんども繰り返してちょっとずつ理解を深めていってください。

プログラミングは一回やれば身につくというものではありません。しかし、何度もやると以前は1時間かかったものが一瞬で終わるようになることもよくあります。

なので、ぜひご自身の成長を楽しみながら続けていっていただけると幸いです。

お疲れ様でした！"
Git,Gitで使用するテキストエディタ、Vimの使い方,"Vimとは、かなり歴史のあるテキストエディタです。初心者からすると難しそうな印象ですが、コアなユーザーの多いエディタです。

# Vimの使い方
Vimはモードを使い分けることによって色々な操作ができるようになっています。

|操作|入力キー|
|---|---|
|カーソルを↑に移動|k|
|カーソルを↓に移動|j|
|カーソルを←に移動|h|
|カーソルを→に移動|l|
|一文字削除|x|
|インサートモードへ|i|
|次行を新規行として挿入してインサートモードへ|o|
|現在行に新しい行を追加してインサートモードへ|O|
|インサートモードからノーマルモードへ |esc|

以上のような操作を使い分けて、行いたい処理を実行します。

例えば、コードの編集を行いたいときは`i`でインサートモードに切り替え、編集が終わったら`esc`でノーマルモードに戻すわけです。

# 保存や終了に関する操作
Vimでは、ファイルを編集した後の操作にもコマンドを使用します。

|操作|入力キー|
|---|---|
|上書き保存|:w|
|名前をつけて保存|:w ファイル名|
|編集終了|:q|
|保存して終了|:wq または :x|
|ファイルを開く|:e ファイル名|

ファイルを編集した場合は、一度`esc`を押してインサートモードからノーマルモードへ切り替えて行いましょう。

その後、`:w`を入力すると上書き保存ができ、`:q`通すとVimを終了させることができます。

ちなみに、`:wq`を入力すると上書き保存と終了を一度に行うことができます。

# まとめ
Vimは使い方にちょっと癖がありますが、慣れれば普段のテキストエディタと同じように使えます。人によっては、Vimの方が圧倒的にいいという人もいるくらいです。

AWSやGitでも、Vimを使用してファイルを編集することがあるので、基本的な使い方はマスターしておきましょう。現場でも、きっと使う場面が出てくるはずですよ。
"
Git,Gitコマンド一覧,"Gitに関して、よく使うコマンドを一覧にしています。復習にお役立てください。

Gitでのバージョン管理を開始する

```
git init
```

変更したファイルをインデックスにあげる

```
git add .
```

特定のファイルのインデックスへの追加を取り消す

```
git reset HEAD config/database.yml
```

変更履歴を保存

```
git commit -m ""message""
```

コミットの履歴を確認

```
git log
```

変更内容を一時的に退避（コミットする前の変更内容）

```
git stash
```

退避した変更を復元する

```
git stash pop
```

変更したファイルをリモートリポジトリに反映

```
git push origin remote_url
```

リモートリポジトリの状態を無視して強制プッシュ

```
git push -f origin remote_url
```

ブランチの確認

```
git branch
```

ブランチの切り替え

```
git checkout branch_name
```

ブランチを新規作成して切り替えまでを一気にやる

```
git checkout -b new_branch_name
```

ブランチ名の変更

```
git branch -m new_branch_name
```

過去のコミットの状態にファイルを戻す（1つ前に戻す）

```
git checkout HEAD^
```

過去のコミットの状態にファイルを戻す（3つ前に戻す）

```
git checkout HEAD^^^
```

リポジトリをクローンする

```
git clone github_url
```

前回のコミットとの変更点の差分を確認する

```
git diff HEAD^
```

2つ前のコミットとの変更点の差分を確認する

```
git diff HEAD^^
```

リモートリポジトリの変更内容をローカルリポジトリに反映させる（リモートリポジトリにあるブランチがローカルリポジトリに反映される）

```
git fetch
```

リモートリポジトリのブランチを確認する

```
git branch -a
```

HEADにマージしたローカルリポジトリのブランチを消す

```
git branch --delete branch_name
```

マージの有無にかかわらずローカルリポジトリのブランチを消す

```
git branch -D branch_name
```

過去のコミット3つ分をまとめる（コミットメッセージの変更もできる）

```
git rebase -i HEAD^^^
```

ローカルの変更内容を取り消す（新規追加したファイルは削除されない）

```
git checkout .
```"
Git,GitとGithubを利用した共同開発,"GitとGithubは、共同開発を可能にするためのツールとして様々な現場で採用されています。今回は、それをできるだけスムーズに行うためのコツを書いて見ました。「Gitのコマンドを学んだけど、それをどう活かしていいかわからない」と考えている初心者は、こちらの記事を読んでやり方をマスターしていってください。コツを掴めば簡単です。心配せずいきましょう！

## リモートリポジトリをクローンする
まず、共同開発を行うにはリモートリポジトリを自分のパソコン（ローカル）にコピーしてこなければなりません。そのときに使用するのが`git clone`というコマンドです。このコマンドをターミナルから使用すると、現在ターミナルで操作している場所に、リモートリポジトリのコピーとなるディレクトリが作成されます。

```
git clone github_url
```

`github_url`には、実際に共同開発にしようするリモートリポジトリのURLを指定しましょう。そうすることで、そのURLのGithubリポジトリからディレクトリやファイルがクローンされます。

## クローンしたディレクトリに移動する
`git clone`によってリモートリポジトリのクローンができたら、次はクローンによって作成されたディレクトリに`cd`コマンドを使って移動します。

```
cd cloned_project
```

上記のコマンドの`cloned_project`は、実際にクローンを行なった際に作成されたディレクトリを指します。クローン後に作成されたディレクトリ名を`cloned_project`に置き換えてコマンドを実行しましょう。

## 開発を行う
クローンで作成されたディレクトリ内にターミナルから移動できたら、そこで初めてバージョン管理が始まります。まずは、ディレクトリをテキストエディタで立ち上げ、自分が行いたい機能の開発を行いましょう。それができたら、`git`コマンドを利用してバージョン管理を行います。

まず、色々とコードを書き加える前にブランチを作成してください。そこから、自身が行いたい開発を進めていきます。

```
git checkout -b your_branch_name
```

`your_branch_name`の部分には、あなたが作成したいブランチ名をつけてあげてください。基本的に、行いたい開発内容によってブランチ名をつけてあげるとわかりやすいでしょう。

ブランチ名の例
- add_search_funciton
- modify_import_method

ブランチが作成できたら、いよいよ機能の実装にはいります。自身が行いたい開発を進めていってください。ファイルやディレクトリを変更したら、その都度`git`コマンドを利用し、バージョン管理を行いましょう。

**自身の開発を行う際、絶対にやらなければいけないのが「動作確認」です。プルリクを送る際は、必ず正常に動作することを確認した上で送ってください。そうしないと、他のプログラマーに大きな迷惑をかけてしまうことがあります。**

また、もう１つの注意点として、`git clone`でコピーしてきたディレクトリに関しては、`git init`は必要ありません。`git add .`や`git commit`を利用してバージョン管理を行えば大丈夫です。

変更したファイルやディレクトリをインデックスにあげる場合は、以下のコマンドを実行しましょう。

```
git add .
```

変更履歴をローカルリポジトリに保存する場合は、以下のコマンドを実行しましょう。

```
git commit -m ""commit message""
```

変更内容をリモートリポジトリに反映させたい場合は、以下のコマンドを実行しましょう。

```
git push origin your_branch_name
```

## リモートリポジトリの変更内容をローカルリポジトリに反映
リモートリポジトリの変更内容をローカルリポジトリに反映させたい場合は、`git checkout master`と`git pull`を実行しましょう。

masterブランチに切り替え

```
git checkout master
```

リモートリポジトリの変更内容をローカルリポジトリに反映（マージ）

```
git pull
```

自分が作業を行いたいブランチに切り替え

```
git checkout your_branch_name
```

リモートリポジトリの変更を`pull`した`master`をマージ

```
git merge master
```

# コンフリクトの解消
コンフリクトとは、同じ箇所に対して2人以上のプログラマーが違う内容の変更を行う場合に発生するもので、変更内容が衝突することを指します。

これは、イメージしづらいので例を出してみます。余裕があれば、一緒にやってみてください。

以下が、今回の例に使用する`sample.rb`の内容です。

```ruby
puts ""Hello World!!""
```

まずは、このソースコードを管理するため、以下のコマンドを実行しましょう。

バージョン管理を開始

```
git init
```

ソースコードをインデックスに登録

```
git add .
```

変更したファイルをコミット

```
git commit -m ""first commit""
```

コミットまでできたら、Githubで新しくリポジトリを作成しましょう。リポジトリ名は`conflict_sample`にしてください。

リポジトリが作成できたら、そのリポジトリのURLをコピーしてローカルリポジトリと紐づけをします。`github_url`には、作成した`conflict_sample`のURLを入力してください。

```
git remote add origin github_url
```

次に、ローカルでソースコードを編集していきます。まずは、新しく`branch_a`を作成しましょう。

```
git checkout -b branch_a
```

ブランチが作成できたら、`sample.rb`に以下のような変更を加えましょう。

```ruby
puts ""こんにちは!!""
```

変更を加えたら、以下のコマンドを実行し、変更したファイルを保存します。

ソースコードをインデックスに登録

```
git add .
```

変更したファイルをコミット

```
git commit -m ""add branch_a""
```

コミットができたら、リモートリポジトリにプッシュします。

```
git push origin branch_a
```

リモートリポジトリにプッシュができたら、リモートリポジトリでプルリクを送ってください。それができたら、マージまでやりましょう。`branch_a`をマージできたら、ローカルでの作業に戻ります。

次は、`master`にブランチを切り替えましょう。

```
git checkout master
```

`master`に切り替えたら、新しく`branch_b`をBさんが作成したと仮定します。

```
git checkout -b branch_b
```

ブランチが作成できたら、`sample.rb`に以下のような変更を加えましょう。

```ruby
puts ""おはよう!!""
```

変更を加えたら、以下のコマンドを実行し、変更したファイルを保存します。

ソースコードをインデックスに登録

```
git add .
```

変更したファイルをコミット

```
git commit -m ""add branch_b""
```

コミットができたら、リモートリポジトリにプッシュします。

```
git push origin branch_b
```

リモートリポジトリにプッシュができたら、リモートリポジトリでプルリクを送ってください。ここでコンフリクトが発生します。

```ruby
<<<<<<< branch_a
puts ""こんにちは！""
=======
puts ""おはよう!!""
>>>>>>> master
```

Aさんのプルリクエストにより、`master`の内容は`puts ""Hello World!!""`から、`puts ""こんにちは！""`に書き換わりました。

その変更を行った部分に対して、今度はBさんが`puts ""おはよう!!""`という変更を加えようとしています。

そのため、「AさんとBさんの変更内容が衝突してますよ！」という内容のコンフリクトが発生するわけです。

この解決方法は、以下の通りになります。

まず、ローカルリポジトリで`master`ブランチに切り替え、リモートリポジトリの`master`を`pull`します。

```
git pull origin master
```

その後、ブランチを`branch_b`に切り替えましょう。

```
git checkout branch_b
```

ブランチを切り替えたら、変更を反映させた`master`を`branch_b`にマージさせます。

```
git merge master
```

その後、改めて自分が行いたい変更を加えましょう。

```ruby
puts ""おはよう!!""
```

その後、リモートリポジトリに`push`してプルリクエストを送ると、今度はコンフリクトが発生せずに変更をマージすることができます。

コンフリクトを解消する練習は現場でもめちゃくちゃ役に立つので、ぜひ今回の流れを自分でも試してみてください。
現場でコンフリクトに出くわして焦る前に、解決するスキルを身につけちゃいましょう。
何事も予防が大切です！

## まとめ
以上が共同開発を行う時のコツになります。共同開発に関しては複数の人が関わる分、イレギュラーなトラブルも多いかと思います。ですが、そのトラブルも自分の血肉になることを理解し、楽しみながら乗り越えていきましょう。ここが理解できるようになると、開発はだいぶ楽になります。ぜひ、初心者のうちから慣れていってください。"
Git,Gitコマンドの状況に応じた使い分け,"Gitコマンドは、その時々に応じて使い分けられるようになることが重要です。こちらでは、ただのコマンドの羅列ではなく、状況に応じてどのような対処をすべきなのかを書いていきます。緊急時の対応策としてお役立てください。

## いらないファイルをリモートリポジトリにpushしてしまった場合
本来ならpushするはずでなかったいらないファイルをリモートリポジトリにpushしてしまった場合、そのコミットをローカルリポジトリで取り消して、いらないファイルを取り除いた後にリモートリポジトリに反映させる必要があります。そのときの手順は以下の通りです。

直前のコミットのみを取り消す（インデックスにあげたファイルはそのまま）

```
git reset --soft HEAD^
```

現在の`commit`の状況を確認する

```
git status
```

実行結果を確認し、コミットの対象にしたくないファイルのパスを確認する

```
modified:   app/models/item.rb
modified:   app/views/users/index.html.erb
```

以下のコマンドを実行し、コミットしたくないファイルをインデックスから取り除く(`file_path`がコミットをしたくないファイルのパス)

```
git reset HEAD file_path
```

使用例

```
git reset HEAD app/views/users/index.html.erb
```

インデックスに上がっているファイルのみをコミット

```
git commit -m ""commit message""
```

リモートリポジトリに強制的に変更内容を反映させる（masterには絶対やらないように）

```
git push -f origin branch_name
```

## 作業するブランチを間違えて実装しちゃった場合
作業するブランチ間違ってたんだけど、気づかずにそのまま実装しちゃって、コミットするときに気づいたよって場合に以下の手順で解決してください。（コミットしちゃった場合はまた別の方法で解決しましょう）

変更内容を退避させる

```
git stash
```

ブランチを切り替える

```
# ブランチを新しく作る場合
git checkout -b new_branch_name
```

```
# すでにあるブランチ使用する場合
git checkout branch_name
```

退避した変更を確認する

```
git stash list
```

出力結果（例）

```
stash@{0}: WIP on sub: a0d2f1b add fourth line
stash@{1}: WIP on sub: 1a61919 add second line
```


復活させたい変更内容を指定し、復活させる

```
git stash apply stash@{0}
```"
Ruby,入出力を行うためのメソッド一覧,"Rubyには、ターミナルに様々なデータを表示するためのメソッドがいくつか用意されています。

- puts
- p
- print

特に、 `puts` と `p` に関しては、ログの表示、テスト、デバッグなど、様々な場面で利用されます。

基本的、かつ、非常に汎用性の高いメソッドなので、ぜひ使えるようにしてみてください。

# puts
`puts` は、データを出力する際に、最後に改行が入ります。

ターミナルに値を出力する際には、この `puts` が非常によく使われるので、ここで使い方を理解しておきましょう。

## 文字の表示
putsの基本的な使い方は以下の通りです。

```ruby
puts ""Hello World!!""
```

以上のように書くと、ターミナルに `Hello World!!` という文字列が表示されます。ここで注意しなければいけないのは、文字列を表示するときは `""""（ダブルクウォーテーション）` で囲むということです。これがないと文字列として認識してもらえずエラーになるので注意してください。

それでは実際に、 `puts` を使って `Hello World!!` を表示してみましょう。そのためにまずは、Rubyのファイルを作成します。テキストエディタを立ち上げ、 `command + s` で保存しましょう。

上書き保存（最初の一回は名前をつけて保存）

```
command + s
```

ファイル名は `hello.rb` にしてください。その時に使用する `.rb` は `拡張子` と呼ばれるものです。

これにより、どういう種類のファイルなのかをコンピュータに認識させることができます。

拡張子には、 `.rb` の他にも `Word` ファイルを表す `.docx` や `PDF` ファイルを表す `.pdf` などいろんな種類があります。

今回は、Rubyのファイルなので拡張子に `.rb` とつけて保存します。保存先はデスクトップにしてください。

```
hello.rb
```

ファイルが保存できたら、 `hello.rb` に以下のコードを書きましょう。

`puts` のコードを入力する際には、 `""Hello World!!""` との間に半角スペースを入れてください。

```ruby
puts ""Hello World!!""
```

そして、コードを書いたら必ず `command + s` で上書き保存する癖をつけてください。本当によく使う機能なので、このショートカットキーは覚えておくとかなり楽です。

ではさっそく、`hello.rb`の中に記述したコードをターミナルから実行してみましょう。まずは、`cd`コマンドを使用して、ターミナルでデスクトップに移動します。

```
cd desktop
```

このように、Rubyのコードを実行する場合は、コードを書いたファイルがある場所まで移動します。

もし、今回作成した `hello.rb` を `ruby_sample` というフォルダ（ディレクトリ）に保存した場合は `cd ruby_sample` というコマンドをターミナルに入力して移動します。

ちなみに、 `cd` は `change directory` という意味になります。

`cd` コマンドで移動ができたら、以下のコマンドを入力してコードを実行してください。

```
ruby hello.rb
```

実行結果

```
Hello World!!
```

今回出力した `Hello World` は、「文字列」と呼ばれるものです。

プログラミングでは、文字のことを文字列、数字のことを整数や少数などという風に区別します。

例えば、 `""1""` は文字列 `1` は整数となり、全く別のデータとして扱われることに注意してください。

`1 + 2` は答えが `3` として計算できますが、 `""1 + 2""` はただの文字列なので計算できません。

また、文字列の場合は `'（シングルクウォーテーション）` または `""（ダブルクウォーテーション）` で値を囲む必要があります。

基本的にはダブルクウォーテーションが多いのですが、2種類の表現方法があることを頭に入れておいてください。

それでは、以下のコードを `hello.rb` に記述してください。

```ruby
puts 'Single Hello World'
puts ""Double Hello World""
```

ターミナルで以下のコマンドを入力し、プログラムを実行しましょう。

```
ruby hello.rb
```

そうすると以下のような表示になります。シングルクウォーテーションもダブルクウォーテーションも、どちらも表示には違いがないことを確認しましょう。

```
Single Hello World
Double Hello World
```

また、コード内にはメモが書けるということもここで理解しておきましょう。

以下のように `#` を使用してメモを追加してみてください。

```ruby
# 文字を出力するコード
puts 'Single Hello World'
puts ""Double Hello World""
```

ターミナルで以下のコマンドを入力し、プログラムを実行しましょう。

```
ruby hello.rb
```

そうすると以下のような表示になります。

```
Single Hello World
Double Hello World
```

このように、 `#` の後にコメントを書いても実行結果には影響を与え無いことを理解しておきましょう。

なので、自分自身が気づいたことや説明などは、 `#` の後にメモとして記述してください。そうすると、復習するときにとても役に立ちます。

```ruby
# 文字を出力するコード
# シングルクウォーテーションでの記述
puts 'Single Hello World'
# ダブルクウォーテーションでの記述
puts ""Double Hello World""
```

## 数字の表示
`puts` を使って数字を表示するときは以下のように書きます。

```ruby
puts 3
```

文字列のように `""""` を書く必要はありません。

それでは、 `number.rb` をデスクトップに作成し、以下のコードを書いて実行してみましょう。

コードを実行する際は、 `cd` コマンドを使用してファイルのある場所まで移動することを忘れず行ってください。

今回も、 `number.rb` をデスクトップに作成したので、ターミナルでも以下のコマンドを実行してデスクトップに移動します。（すでにデスクトップに移動できている場合は実行しなくて大丈夫です）

```
cd desktop
```

 `number.rb` に、以下のコードを書いてください。

```ruby
puts 1
```

実行結果

```
1
```

以上のように、整数を表示するときは `""""` で囲む必要がないことを理解しておきましょう。

また、計算式を書くと自動で値を計算し、その結果を出力してくれます。

```ruby
# 数字の場合
puts 1 + 3
# 文字列の場合
puts ""1 + 3""
```

実行結果

```
4
1 + 3
```

このように、Rubyでは計算結果を `puts` で出力することもできます。また、`""""` で囲んだ場合は数字ではなく文字列として認識されるので、計算はできないことに注意しましょう。

今回は足し算を例に出しましたが、Rubyに用意されている計算方法はそれだけではなく、引き算、掛け算、割り算などの計算も行えます。良い機会なので、Rubyでの四則演算についてもついでに理解しておきましょう。

また、この計算方法についてはだいたいどの言語でも同じなので、頭に入れておくと他の言語にも幅広く応用できます。

## 四則演算
Rubyでの四則演算には以下の種類があり、計算する時に使用される記号は`演算子`と呼ばれます。

|演算子|内容|例|
|---|---|---|
|+|足し算（加算）|2 + 2|
|-|引き算（減算）|3 - 3|
|*|かけ算（乗算）|4 * 4|
|/|割り算（除算）|5 / 5|

ではさっそく`puts`を利用し、四則演算の計算結果を表示してみましょう。

```ruby
puts 2 + 2
puts 3 - 3
puts 4 * 4
puts 5 / 5
```

実行結果

```
4
0
16
1
```

もちろん、演算子は複数続けて記述することもできます。

```ruby
puts 2 + 2 + 2
```

ただし、文字と数字を続けて表示する場合、以下のように書くとエラーになります。

```ruby
puts ""2 + 2 = "" + 4
```

実行結果

```
TypeError: no implicit conversion of Fixnum into String
```

その理由は、「文字」と「数字」という種類の異なるデータで足し算しようとしたためです。

これだと、正常な処理ができません。

もし、上記のやり方でエラーを回避したい場合は、`to_s`メソッドを使用して数字を文字に変換してあげます。

```ruby
puts ""2 + 2 = "" + 4.to_s
```

実行結果

```
2 + 2 = 4
```

このように、「文字」と「数字」という種類の異なるデータを表示する場合は特別な変換をする必要があることを理解しておいてください。

そして、変換が必要かどうかを判断できるようなるためにはオブジェクトの種類を理解しておく必要があります。

#＃ Rubyのオブジェクト
Rubyには、以下のような種類のオブジェクトが存在ます。

一度に全て覚える必要はないですし、使っていくうちにだんだん覚えるものなので、最初は「こういうものがあるんだな」くらいの認識で大丈夫です。

さらっと確認してみてください。

|種類|オブジェクト名|
|---|---|
|整数|Integer|
|少数|Float|
|文字列|String|
|配列|Array|
|連想配列|Hash|
|true|TrueClass|
|false|FalseClass|
|nil(存在なし)|NilClass|


それぞれのオブジェクトは、実際には以下のように記述されます。

```ruby
# 整数:Integer
1
# 小数:Float
1.0
# 文字列:String
""文字列""
# 配列:Array
[1, 2, 3]
# 連想配列:Hash
{""key"" => ""value""}
# true:TrueClass
true
# false:FalseClass
false
# nil（存在なし:NilClass
nil
```

Rubyでは以上のようなオブジェクトの種類を意識する必要がありますが、今は「文字列」と「数字」だけ把握しておきましょう。

# p
`puts`の場合は出力されたデータがどのデータ型かわかりませんでした。しかし、`p`メソッドを利用すると、データ型の種類を確認することができます。

```ruby
p ""こんにちは""
p 1
```

実行結果

```
""こんにちは""
1
```

`puts`と`p`を比較してみると、`p`を利用するメリットがわかりやすいかと思います。

```
puts ""1""
p ""1""
```

実行結果

```
1
""1""
```

以上のように、`puts`で出力すると`1`という値が文字列なのか数字なのか判断できないのですが、`p`で出力するとそれが文字列だとわかります。このように、プログラムの中で使用されているデータがどのデータ型なのかを把握したい場合、`p`がとても役に立ちます。

# print
`print`は、改行を行わずに処理結果を表示するメソッドです。そこまで使用頻度は高くないので、特に意識して覚える必要はありません。`print`に関しては、`puts`と比較すると違いがわかりやすいので以下のコードを書いてみましょう。

```ruby
puts ""私の""
puts ""名前は""
puts ""神里です。""
puts ""-----------""
print ""私の""
print ""名前は""
print ""神里です。""
```

# 複数のデータを出力
`puts` `p` `print`に関しては、複数の値を出力させることも可能です。

```ruby
puts ""お"", ""は"", ""よ"", ""う""
p ""お"", ""は"", ""よ"", ""う""
print ""お"", ""は"", ""よ"", ""う""
```

実行結果

```
お
は
よ
う
""お""
""は""
""よ""
""う""
おはよう
```

# ヒアドキュメント
複数行の文字を出力したい場合、もちろん`puts`でも可能なのですが、ヒアドキュメントを使用するともっと楽になります。ヒアドキュメントの基本的な書き方は以下の通り。

```ruby
puts <<~TEXT
私の
名前は
神里です
TEXT
```

実行結果

```
私の
名前は
神里です
```

`puts`と比べると、ヒアドキュメントの方がはるかに楽なのがわかるかと思います。

```ruby
# putsを使用した場合
puts ""おはよう""
puts ""こんにちは""
puts ""こんばんは""

# ヒアドキュメントを使用した場合
puts <<~TEXT
おはよう
こんにちは
こんばんは
TEXT
```

実行結果

```
おはよう
こんにちは
こんばんは
おはよう
こんにちは
こんばんは
```

ちなみに、ヒアドキュメントを使用する際に文字列を`TEXT`で囲んでいるのですが、こちらは同じワードを使用して入れば記号以外ならなんでも大丈夫です。

```ruby
puts <<~TEXT
おはよう
こんにちは
こんばんは
TEXT

puts <<~亜亜亜
おはよう
こんにちは
こんばんは
亜亜亜

puts <<~あああ
おはよう
こんにちは
こんばんは
あああ

puts <<~aaa
おはよう
こんにちは
こんばんは
aaa

puts <<~111
おはよう
こんにちは
こんばんは
111
```

実行結果

```
おはよう
こんにちは
こんばんは
おはよう
こんにちは
こんばんは
おはよう
こんにちは
こんばんは
おはよう
こんにちは
こんばんは
おはよう
こんにちは
こんばんは
```

途中の改行も、ちゃんと反映されます。これを`puts`でやるとかなりめんどくさい。

```ruby
# putsを使用した場合（空文字で改行）
puts ""おはよう""
puts """"
puts ""こんにちは""
puts ""こんばんは""

# ヒアドキュメントを使用した場合（Enterで改行）
puts <<~TEXT
おはよう

こんにちは
こんばんは
TEXT
```

実行結果

```
おはよう

こんにちは
こんばんは
おはよう

こんにちは
こんばんは
```

以上のように、ヒアドキュメントを利用すると`puts`を連打するより複数行のデータ出力がかなり楽になります。

# まとめ
今回は、入出力に関して以下のメソッドについて学びました。

- puts
- p
- print

これらのメソッドは、現場でもいろんな場面で利用されます。うまく使いこなせれば開発が楽になるので、ぜひ使ってみてください。"
Ruby,変数,"変数とは、値を入れておく箱のようなものです。この変数を使用すると、以下のようなメリットがあります。

- 値を使いまわせる
- 値を覚える必要がなくなる
- 変更に強いプログラムが組める

プログラムを組む上で、変数はかなり使用しますのでしっかりと理解しておきましょう。といっても、コードを書いていくうちに理解できるものなので、そこまで身構える必要はありません。

# 定義と代入
変数は、以下のように定義します。

```ruby
# name が変数
# ""satou"" が変数に格納する値
name = ""satou""
```

上のコードのように、`name`という入れ物を用意することで、`satou`という文字列が変数に格納されます。また、`name`の部分は自分の好きなように名前をつけてあげて大丈夫です。例えば、以下のようにいろんな変数を定義することができます。

```ruby
name = ""satou""
item = ""book""
price = 10000
```

# 式展開
変数の値を文字列の中で表示したい場合、以下のように記述します。

```ruby
name = ""Tanaka""

# 式展開を書くと表示される
puts ""Hello!! #{name}""

# そのまま変数名を書くと変数の値は表示されない
puts ""Hello!! name""
```

実行結果

```
Hello!! Tanaka
Hello!! name
```

また、式展開はヒアドキュメントの中で使用することもできます。

```ruby

name = ""Tanaka""

# ヒアドキュメントの中で式展開
puts <<~TEXT
Hello!! #{name}

You are very cool!!
Let's enjoy programming together!!
TEXT
```

# サンプルプログラム
では、変数を利用して、人の名前、年齢、住所、電話番号などの個人情報を表示するプログラムを書いてみましょう。

まずはファイルを作成します。テキストエディタを開いて「名前をつけて保存」を選択し、ファイル名を以下のようにして保存しましょう。`variable`は、「変数」という意味です。

```
variable.rb
```

ファイルが作成できたら、`variable.rb`にどんどんコードを追加していきます。

その際、随時`command + s(windowsは ctrl + s)`で上書き保存してから実行するようにしましょう。

記述したコードを実行するときは、以下のコマンドをターミナルから入力します。コー
ドが書けたら、このコマンドを実行して動作確認を行いましょう。

```
ruby variable.rb
```

それではさっそく、コードを書いていきます。

まずはそれぞれの変数を定義し、値を格納するところから。その際、どういうデータを格納する変数かがわかりやすいような変数名をつけてあげると、コードがグッと読みやすくなります。

```ruby
# 名前情報を入れる変数
name = ""Satou""
# 年齢情報を入れる変数
age = 33
# 住所情報を入れる変数
address = ""Tokyo""
# 電話番号を入れる変数
tell = ""080-2343-9183""
```

次に、それらの変数に格納した値を、式展開を用いてわかりやすい文章で表示してみましょう。

```ruby
# 名前情報を入れる変数
name = ""Satou""
# 年齢情報を入れる変数
age = 33
# 住所情報を入れる変数
address = ""Tokyo""
# 電話番号を入れる変数
tell = ""080-2343-9183""

# 変数に格納したデータを式展開で表示
puts ""【自己紹介】""
puts ""私の名前は#{name}です。""
puts ""年齢は#{age}です。""
puts ""今住んでいるところは#{address}です。""
puts ""電話番号は#{tell}です。""
puts ""宜しくお願いいたします！""
```

式展開で変数に格納したデータを表示することができたら、次はそれらのコードをヒアドキュメントに置き換えてリファクタリングしていきます。

ちなみに、リファクタリングとは、実行結果を変えずにコードを改善することです。これにより、コードの見通しや処理の効率が向上します。

```ruby
# 名前情報を入れる変数
name = ""Satou""
# 年齢情報を入れる変数
age = 33
# 住所情報を入れる変数
address = ""Tokyo""
# 電話番号を入れる変数
tell = ""080-2343-9183""

# ヒアドキュメントを使って式展開
puts <<~TEXT
【自己紹介】
私の名前は#{name}です。
年齢は#{age}です。
今住んでいるところは#{address}です。
電話番号は#{tell}です。
宜しくお願いいたします！
TEXT
```

# まとめ
変数はプログラミングの中でも使用する頻度がかなり高いです。これを使用することにより、コードの見通しが良くなったり、変更に強いプログラムを組むことができるようになります。

ぜひ、コードを書くときも、変数に置き換えられる箇所はないかを考えてみてください。"
Ruby,条件分岐,"条件分岐とは、「もし〜だったら〜の処理をする」というように、条件によって行う処理を変えるために使用されるものです。条件分岐を実装するときには`if`や`unless`を使用します。ではさっそく、それぞれの使い方を学んでいきましょう。

## if
`if`の基本的な書き方は以下の通りとなります。

```ruby
hp = 10

if hp >= 10
  puts ""勇者のHPは10以上だ""
end
```

`if`の右側に書かれている`hp >= 10`が条件式となります。こちらの評価結果が成り立つ場合に、`if`と`end`で囲まれた部分の処理が実行されます。条件式にかかれている`>=`の部分は比較演算子と呼ばれ、以下のような種類があることを理解しておきましょう。

|比較演算子|意味|
|---|---|
|a >= b|aはb以上|
|a <= b|aはb以下|
|a > b|aはbより大きい|
|a < b|aはbより小さい|
|a == b|aはbと等しい|

比較演算子の中でも`a == b`の部分を`a = b`という風に`=`を1つ書き忘れることがよくあるので気をつけてください。それだと「代入」という意味になってしまいます。また、比較演算子は実行されると`true`か`false`が結果として返ってくることを理解しておきましょう。

それでは、以下の名前のファイル名を作成しましょう。

```
if_sample.rb
```

`if_sample.rb`が作成できたら、次のコードを書いてください。

```ruby
a = 10
b = 15

print ""aはb以上？：""
puts a >= b
print ""aはb以下？：""
puts a <= b
print ""aはbより大きい？：""
puts a > b
print ""aはbより小さい？：""
puts a < b
print ""aはbと同じ？：""
puts a == b
```

コードが記述できたら、以下のコマンドをターミナルから実行し、結果を確認してみましょう。

```
ruby if_sample.rb
```

実行結果

```
aはb以上？：false
aはb以下？：true
aはbより大きい？：false
aはbより小さい？：true
aはbと同じ？：false
```

`if`は比較演算子の評価結果が`true`になるか`false`になるかを判断し、行う処理を決めています。

そのため、以下のように記述してもエラーは表示されず、きちんと処理が実行されます。

```ruby
# 条件がtrueの場合は実行される
if true
  puts ""実行されます""
end

# 条件がfalseの場合は実行されない
if false
  puts ""実行されません""
end
```

実行結果

```
実行されます
```

このように、`if`の条件式に使用されている比較演算子では、評価結果として`true`か`false`かの判定が行われていることを理解しておいてください。

## else
`if`の部分に書いた条件式の評価結果が`false`のときに行いたい処理がある場合は`else`を使用します。

```ruby
hp = 5

if hp >= 10
  puts ""勇者のHPは10以上だ""
else
  # ifの条件が成り立たない場合の処理
  puts ""勇者のHPは10より下だ""
end
```

`else`を使用することによって、わざわざもう１つ`if`文を書かなくてもよくなり、コードがスマートになります。

以下が、ちょっとイマイチな例です。

```ruby
hp = 5

if hp >= 10
  puts ""勇者のHPは10以上だ""
end

if hp < 10
  puts ""勇者のHPは10より下だ""
end
```

`if`をわざわざ２つ書いているので、表現が冗長ですね。このような場合は、`else`を使った方がスッキリします。

## elsif
`elsif`は`if`の部分に加え、さらに条件を追加したいときに使用します。

`elseif`ではなく、`elsif`だということに注意してくださいね！

```ruby
hp = 3

if hp > 10
  puts ""勇者は元気だ""
# 複数の条件を指定するときに使う
elsif hp > 5
  puts ""勇者は弱っている""
elsif hp > 3
  puts ""勇者はかなり弱っている""
elsif hp > 0
  puts ""勇者は瀕死だ""
else
  puts ""勇者はしんだ""
end
```

この`elsif`も、複数条件で処理を行いたいときに、冗長な表現を避けることができます。

ちなみに、`elsif`を使わないとこんな感じになります。

```ruby
hp = 3

if hp > 10
  puts ""勇者はピンピンしている""
end

if hp > 10
  puts ""勇者は元気だ""
end

if hp > 5
  puts ""勇者は弱っている""
end

if hp > 3
  puts ""勇者はかなり弱っている""
end

if hp > 0
  puts ""勇者は瀕死だ""
end

if hp <= 0
  puts ""勇者はしんだ""
end
```

うん、超めんどくさい！笑

ちなみに、条件がたくさんあり、かつ、「〜と〜が等しい」みたいな条件を判定する場合は、`case`を使うこともあります。

|文法|特徴|
|---|---|
|if|~以上、~以下と行った判定ができる|
|case|1つの比較対象に対して複数の条件分岐を行う|

以下が、`case`の使用例です。

```ruby
month = 6

# 比較対象をcaseの後に記述
case month
# 比較対象と比較する値を記述
when 3, 4, 5
  puts ""春です""
when 6, 7, 8
  puts ""夏です""
when 9, 10, 11
  puts ""秋です""
when 12, 1, 2
  puts ""冬です""
else
  puts ""不正な値です""
end
```

ちなみに、この`case`に対しても、条件判定の部分で範囲オブジェクト（`3..5`など）を使用できます。

```ruby
month = 6

# 比較対象をcaseの後に記述
case month
# 比較対象と比較する値を記述
when 3..5
  puts ""春です""
when 6..8
  puts ""夏です""
when 9..11
  puts ""秋です""
when 1..12
  puts ""冬です""
else
　puts ""不正な値です""
end
```

実行結果

```
夏です
```

# ifの省略形
実は、`if`は1行で書くこともできます。条件を１つしか判定しない場合はこのほうがスッキリするので、意識して使うようにして見てください。実際に現場でもこの使い方はよく見ます。

```ruby
# 省略形
puts ""勇者のHPは10以上だ"" if hp >= 10
```

## 三項演算子
見慣れていない方はちょっと混乱されるかもしれませんが、条件分岐には`三項演算子`というものも存在します。ちょっと書き方は複雑ですが、こちらも現場ではよく用いられるものなので、使えるように意識してみてください。

```ruby
hp = 11

# 条件式(true or false) ? trueの時に行いたい処理 : falseの時に行いたい処理
puts hp > 10 ? ""勇者のHPは10より大きいです"" : ""勇者のHPは10以下です""
```

# サンプルプログラム
それでは、`if`を利用したサンプルプログラムを作っていきましょう！

まずは、以下のような名前のファイルを作成し、保存します。

```
conditional.rb
```

それでは、`conditional.rb`にコードを書いていきましょう。今回は、`if`を使用して戦闘ゲームを再現していきます。

まずは、それぞれのキャラクターのパラメータを変数に入れましょう！慣れない人は、`#`でコメントも書いておくと、後から見返したときに理解しやすいです。

```ruby
# 勇者のhp
brave_hp = 30
# 勇者の攻撃力
brave_attack = 10
# 勇者の防御力
brave_defense = 5
# 敵のhp
enemy_hp = 30
# 敵の攻撃力
enemy_attack = 5
# 敵の防御力
enemy_defense = 10
```

それでは次に、キャラクターが攻撃をするときの処理を書いていきましょう。

```ruby
brave_hp = 30
brave_attack = 10
brave_defense = 5

enemy_hp = 30
enemy_attack = 5
enemy_defense = 10

# 敵に与えるダメージの計算
enemy_damage = brave_attack - enemy_defense
```

敵に与えるダメージの計算ができたら、それを敵のHPから引き算してダメージを与える処理を書きます。

```ruby
brave_hp = 30
brave_attack = 10
brave_defense = 5

enemy_hp = 30
enemy_attack = 5
enemy_defense = 10

enemy_damage = brave_attack - enemy_defense
# 敵のHPにダメージを与える
enemy_hp = enemy_hp - enemy_damage
```

敵にダメージを与えるコードが追加できたら、`if`を利用して、残りHPによって敵キャラのリアクションを変えるようにしましょう！

```ruby
brave_hp = 30
brave_attack = 10
brave_defense = 5

enemy_hp = 30
enemy_attack = 5
enemy_defense = 10

enemy_damage = brave_attack - enemy_defense
enemy_hp = enemy_hp - enemy_damage

# 敵に与えるダメージと残りHPの表示
puts ""敵に#{enemy_damage}のダメージを与えた。""
puts ""残りHPは#{enemy_hp}だ。""

# 残りHPによってリアクションを変える
if enemy_hp > 20
  puts ""敵は元気だ""
elsif enemy_hp > 10
  puts ""敵はちょっと弱っている""
elsif enemy_hp > 5
  puts ""敵はかなり弱っている""
elsif enemy_hp > 0
  puts ""敵は瀕死だ""
else
  puts ""敵はしんだ""
end
```

それでは同様に、敵から勇者へ攻撃を行うときの処理も追加していきましょう！できるひとは、サンプルコードを見ずに自分で考えてコードを書いて見てください。自分で考えてコードを書くと、かなり勉強になりますよ。

```ruby
brave_hp = 30
brave_attack = 10
brave_defense = 5

enemy_hp = 30
enemy_attack = 5
enemy_defense = 10

enemy_damage = brave_attack - enemy_defense
enemy_hp = enemy_hp - enemy_damage

puts ""敵に#{enemy_damage}のダメージを与えた。""
puts ""残りHPは#{enemy_hp}だ。""

if enemy_hp > 20
  puts ""敵は元気だ""
elsif enemy_hp > 10
  puts ""敵はちょっと弱っている""
elsif enemy_hp > 5
  puts ""敵はかなり弱っている""
elsif enemy_hp > 0
  puts ""敵は瀕死だ""
else
  puts ""敵はしんだ""
end


# 敵に与えるダメージの計算
brave_damage = enemy_attack - brave_defense
# 敵のHPにダメージを与える
brave_hp = brave_hp - brave_damage

# 敵に与えるダメージと残りHPの表示
puts ""敵から#{brave_damage}のダメージを受けた。""
puts ""残りHPは#{brave_hp}だ。""

# 残りHPによってリアクションを変える
if brave_hp > 20
  puts ""勇者は元気だ""
elsif brave_hp > 10
  puts ""勇者はちょっと弱っている""
elsif brave_hp > 5
  puts ""勇者はかなり弱っている""
elsif brave_hp > 0
  puts ""勇者は瀕死だ""
else
  puts ""勇者は死んだ""
end
```

コードを書いたら、プログラムを実行して動作確認してみましょう。
エラーが表示されていなければ完成です。

以上で簡単なゲームの再現はできました。
しかし、こちらのコードにはまだまだ改善の余地があります。

では、これからサンプルコードを改善（リファクタリング）していきましょう。

まずは、ヒアドキュメントを使用し、`puts`を使用している部分をもう少しスッキリ記述できるようにします。

```ruby
brave_hp = 30
brave_attack = 10
brave_defense = 5

enemy_hp = 30
enemy_attack = 5
enemy_defense = 10

enemy_damage = brave_attack - enemy_defense
enemy_hp = enemy_hp - enemy_damage

# ヒアドキュメント
puts <<~TEXT
敵に#{enemy_damage}のダメージを与えた。
残りHPは#{enemy_hp}だ。
TEXT

if enemy_hp > 20
  puts ""敵は元気だ""
elsif enemy_hp > 10
  puts ""敵はちょっと弱っている""
elsif enemy_hp > 5
  puts ""敵はかなり弱っている""
elsif enemy_hp > 0
  puts ""敵は瀕死だ""
else
  puts ""敵は死んだ""
end

brave_damage = enemy_attack - brave_defense
brave_hp = brave_hp - brave_damage

# 敵に与えるダメージと残りHPの表示
puts <<~TEXT
敵から#{brave_damage}のダメージを受けた。
残りHPは#{brave_hp}だ。
TEXT

# 残りHPによってリアクションを変える
if brave_hp > 20
  puts ""勇者は元気だ""
elsif brave_hp > 10
  puts ""勇者はちょっと弱っている""
elsif brave_hp > 5
  puts ""勇者はかなり弱っている""
elsif brave_hp > 0
  puts ""勇者は瀕死だ""
else
  puts ""勇者はしんだ""
end
```

これで、表示の部分はスッキリさせることができました。

他に、もう１つ改善点としてあげられるのは、攻撃の処理において決まった値しか計算されないことです。
これではゲーム性がないので、次に、与えるダメージがある一定の範囲で変化するような処理を書いて見ましょう。

この処理を実装するときには`rand`というメソッドを使います。

この`rand`は、数字を指定するとその中からランダムな値を表示してくれます。これを利用して、攻撃の処理をするさいのダメージを変化するように実装して見ましょう。

その際、`3..5`といった`範囲オブジェクト（Range）`というものを使用して`rand`を記述すると、指定した範囲の中でランダムな値を表示してくれるようになります。

```ruby
brave_hp = 30
brave_attack = 10
brave_defense = 5

enemy_hp = 30
enemy_attack = 5
enemy_defense = 10

# 攻撃にランダム要素を入れる
# 範囲オブジェクト　3..5
enemy_damage = brave_attack - enemy_defense + rand(3..5)
enemy_hp = enemy_hp - enemy_damage

puts <<~TEXT
敵に#{enemy_damage}のダメージを与えた。
残りHPは#{enemy_hp}だ。
TEXT

if enemy_hp > 20
  puts ""敵は元気だ""
elsif enemy_hp > 10
  puts ""敵はちょっと弱っている""
elsif enemy_hp > 5
  puts ""敵はかなり弱っている""
elsif enemy_hp > 0
  puts ""敵は瀕死だ""
else
  puts ""敵はしんだ""
end

# 攻撃にランダム要素を入れる
# 範囲オブジェクト　3..5
brave_damage = enemy_attack - brave_defense + rand(3..5)
brave_hp = brave_hp - brave_damage

puts <<~TEXT
敵から#{brave_damage}のダメージを受けた。
残りHPは#{brave_hp}だ。
TEXT

if brave_hp > 20
  puts ""勇者は元気だ""
elsif brave_hp > 10
  puts ""勇者はちょっと弱っている""
elsif brave_hp > 5
  puts ""勇者はかなり弱っている""
elsif brave_hp > 0
  puts ""勇者は瀕死だ""
else
  puts ""勇者はしんだ""
end
```

また、`rand`を使用すれば通常攻撃とクリティカルヒットをランダムに発生させることもできます。その際、`rand(4)`とかくと`0~3`のうちでランダムな数字を発生させることができます（1~4ではないことに注意してください）

```ruby
brave_hp = 30
brave_attack = 10
brave_defense = 5

enemy_hp = 30
enemy_attack = 5
enemy_defense = 10

# 攻撃にランダム要素を入れる
# rand(4)にすると0~3のうちランダムに数字を発生させる
select_attack = rand(4)

if select_attack == 0
  puts ""かいしんのいちげき""
  # randの範囲を20~30と大きな値にする
  enemy_damage = brave_attack - enemy_defense + rand(20..30)
  enemy_hp = enemy_hp - enemy_damage
else
  puts ""つうじょうこうげき""
  enemy_damage = brave_attack - enemy_defense + rand(3..5)
  enemy_hp = enemy_hp - enemy_damage
end

puts <<~TEXT
敵に#{enemy_damage}のダメージを与えた。
残りHPは#{enemy_hp}だ。
TEXT

if enemy_hp > 20
  puts ""敵は元気だ""
elsif enemy_hp > 10
  puts ""敵はちょっと弱っている""
elsif enemy_hp > 5
  puts ""敵はかなり弱っている""
elsif enemy_hp > 0
  puts ""敵は瀕死だ""
else
  puts ""敵はしんだ""
end

# 攻撃にランダム要素を入れる
# rand(4)にすると0~3のうちランダムに数字を発生させる
select_attack = rand(4)

if select_attack == 0
  puts ""かいしんのいちげき""
  # randの範囲を20~30と大きな値にする
  brave_damage = enemy_attack - brave_defense + rand(10..20)
  brave_hp = brave_hp - brave_damage
else
  puts ""つうじょうこうげき""
  brave_damage = enemy_attack - brave_defense + rand(3..5)
  brave_hp = brave_hp - brave_damage
end

puts <<~TEXT
敵から#{brave_damage}のダメージを受けた。
残りHPは#{brave_hp}だ。
TEXT

if brave_hp > 20
  puts ""勇者は元気だ""
elsif brave_hp > 10
  puts ""勇者はちょっと弱っている""
elsif brave_hp > 5
  puts ""勇者はかなり弱っている""
elsif brave_hp > 0
  puts ""勇者は瀕死だ""
else
  puts ""勇者はしんだ""
end
```

これでだいぶリファクタリングができました。他にも自分なりに工夫できる部分はあるかと思いますので、ぜひこちらのコードをカスタマイズしてオリジナルプログラムを組んでみてください。

## 条件分岐課題
旅行プログラムを作成してください。

条件
条件分岐を使用してください

仕様
・旅行プランの選択を要求（getsを使用）
・人数の入力を要求（getsを使用）
・5人以上なら10%割引

実行例

```
旅行プランを選択してください
1. 沖縄旅行（¥10,000）
2. 北海道旅行（¥20,000）
3. 九州旅行（¥15,000）

プランを選択 > 1

沖縄旅行ですね、何人で行きますか？

人数を入力 > 5

5人以上なので10%割引となります

合計料金：¥45,000
```

# まとめ
`if`が使えるようになると、行える処理もかなり柔軟になります。現場でもよく使用するので、`if`を使って無駄なく柔軟にプログラムを書く練習をなんどもやってみてください。

お疲れ様でした！"
Ruby,メソッド,"メソッドとは一言で言うと「処理のかたまり」です。

例えば、「選んだ商品と購入する数によって合計金額を計算する」とか「入力したIDとパスワードを判定してログインできるかどうかを判定する」などの一連の処理をまとめ、プログラムの中でいつでもどこでも簡単に必要な処理を呼び出せるようにしたものです。

とはいっても、実際にメソッドを利用してみないとイメージがわかないので、さっそくメソッドを定義してみましょう。

# メソッドの定義と使い方
メソッドの定義は以下のようになります。

```ruby
def メソッド名

end
```

「メソッド名」の部分には、任意の名前をつけてあげます。

大体の場合は、「どう言う処理を行うメソッドか？」と言うことがわかりやすいように、動詞で名前をつけてあげます。

それでは、「選んだ商品と購入する数によって合計金額を計算するメソッド」を定義していきましょう。

まず、メソッド名は以下のようにします。

```ruby
# 合計金額を表示するメソッド
def disp_sum

end
```

以上で `disp_sum` という名前のメソッドが定義できました。

それでは、 `disp_sum` の中に具体的な処理を書いていきましょう。

```ruby
def disp_sum

  # 商品の値段(price)と個数(num)
  price = 1980
  num = 20

  # 商品の合計購入金額を計算
  price * num

end
```

メソッドの定義が終わったら、さっそくメソッドを呼び出してみましょう。

呼び出す際は以下のように記述します。

```ruby
def disp_sum

  price = 1980
  num = 20

  price * num

end

puts disp_sum
```

実行結果

```
39600
```

これではちょっと味気ないので、式展開を使って意味がわかりやすいような表示にしてみましょう。

```ruby
def disp_sum

  price = 1980
  num = 20

  ""#{price}円の商品を#{num}個買ったので、合計金額は#{price * num}です""

end

puts disp_sum
```

実行結果

```
1980円の商品を20個買ったので、合計金額は39600です
```

Rubyにおいて、メソッドは最後に評価した値を呼び出し元に戻します。

先ほどのコードにおいて呼び出し元とは `puts disp_sum` の部分です。

この部分に、メソッドの最後に実行された `price * num` の値が返ってきます。

そのため、 `price * num` の計算結果である `39600` という値が返ってきたわけです。

ちなみに、以下のようにメソッドの中に `return` を加えても同じように処理ができます。


```ruby
def disp_sum

  price = 1980
  num = 20

  # return を記述
  return ""#{price}円の商品を#{num}個買ったので、合計金額は#{price * num}です""

end

puts disp_sum
```

実行結果

```
1980円の商品を20個買ったので、合計金額は39600です
```

このようにメソッドの中では `return` を記述しても `price * num` の実行結果を呼び出し元である `puts disp_sum` の部分に返すことができます。

また、他の言語でも同様にメソッドの中では戻り値を返すためによく `return` を使用します。

しかし、Rubyのメソッドでは、先ほども説明したように最後に評価した値を呼び出し元に返してくれます。

そのため、ほとんどの場合メソッドの中には `return` を記述しません。

`return` を使うのは、メソッドの途中で処理を抜けたいときです。

例えば、以下の場合をみてみましょう。

```ruby
def disp_sum

  price = 1980
  num = -1

  # return を記述
  return ""商品の購入数は0以上にしてください"" if num <= 0

  ""#{price}円の商品を#{num}個買ったので、合計金額は#{price * num}です""

end

puts disp_sum
```

実行結果

```
商品の購入数は0以上にしてください
```

このように、メソッドの途中で処理を抜けたい場合に `if` などの条件分岐と合わせて使用することがよくあります。

この使い方を覚えておくと、現場でも役に立つことがありますよ。

# メソッドの引数
メソッドには「引数」という処理の材料を渡すことができます。

この引数を使用することにより、より柔軟な処理ができるようになります。

では、以下のコードを例に説明していきましょう。

```ruby
def disp_sum

  price = 1980
  num = 20

  return ""商品の購入数は0以上にしてください"" if num <= 0

  ""#{price}円の商品を#{num}個買ったので、合計金額は#{price * num}です""

end

puts disp_sum
```

上のコードでは、何度実行しても `price` の値は `1980` で、 `num` の値は `20` の計算しかできません。これでは、全く柔軟性のないメソッドになってしまいますね。

しかし、このメソッドに引数を使えば、とても柔軟に値の計算ができるようになります。

それではさっそく、引数を使ったメソッドを定義していきましょう。

```ruby
# ()の中のprice, numが引数を受け取る変数
def disp_sum(price, num)

  return ""商品の購入数は0以上にしてください"" if num <= 0

  ""#{price}円の商品を#{num}個買ったので、合計金額は#{price * num}です""

end

# ()の中の値がdisp_sumの引数：左からprice, numの順番となる
puts disp_sum(1980, 20)
puts disp_sum(2480, 20)
puts disp_sum(72980, 20)
```

実行結果

```
1980円の商品を20個買ったので、合計金額は39600です
2480円の商品を20個買ったので、合計金額は49600です
72980円の商品を20個買ったので、合計金額は1459600です
```

これでかなり柔軟に計算ができるようになりましたね。

`disp_sum(1980, 20)` や `puts disp_sum(2480, 20)` のように、引数に渡してあげる値を変えれば、それに応じて柔軟に計算結果を変えることができます。

また、試しに `num` の部分に入る数を `-1` にしてみましょう。

```ruby
def disp_sum(price, num)

  return ""商品の購入数は0以上にしてください"" if num <= 0

  ""#{price}円の商品を#{num}個買ったので、合計金額は#{price * num}です""

end

# 引数を-1にする
puts disp_sum(1980, -1)
```

実行結果

```
商品の購入数は0以上にしてください
```

`num` の引数を `-1` にすると、きちんと注意文が表示されました。

この注意文に関しても、入力した値が表示されるようにちょっと改善しましょう。

```ruby
def disp_sum(price, num)

  return ""商品の購入数は0以上にしてください：入力値 #{num}"" if num <= 0

  ""#{price}円の商品を#{num}個買ったので、合計金額は#{price * num}です""

end

# 引数を-1にする
puts disp_sum(1980, -1)
```

実行結果

```
商品の購入数は0以上にしてください：入力値 -1
```

このように、引数を使用するとだいぶ処理の柔軟性が出てきます。

# デフォルト値付きの引数
先ほど引数付きのメソッドを定義する方法を学びました。

しかし、メソッドに引数を設定した場合、呼び出し元で引数を渡してあげないとエラーが出ます。

```ruby
def disp_sum(price, num)

  return ""商品の購入数は0以上にしてください：入力値 #{num}"" if num <= 0

  ""#{price}円の商品を#{num}個買ったので、合計金額は#{price * num}です""

end

# 引数を無しにしてメソッドを呼び出し
puts disp_sum()
```

実行結果

```
ArgumentError (wrong number of arguments (given 0, expected 2))
```

これだと、引数に渡すデータが存在しない場合にはプログラムが途中で止まってしまいます。

しかし、Rubyのメソッドにはこのようなエラーを防ぐための仕組みがあります。

それが、引数のデフォルト値の設定です。

引数にデフォルト値を設定すると、「引数が存在する場合は引数を元に処理を行い、引数がない場合はデフォルト値を使って処理を行う」といった処理が可能になります。

引数に対するデフォルト値は以下のように設定することができます。

```ruby
# 引数にデフォルト値を設定
def disp_sum(price = 1980, num = 20)

  return ""商品の購入数は0以上にしてください：入力値 #{num}"" if num <= 0

  ""#{price}円の商品を#{num}個買ったので、合計金額は#{price * num}です""

end
# 引数を無しにしてメソッドを呼び出し
puts disp_sum()
```

実行結果

```
1980円の商品を20個買ったので、合計金額は39600です
```

このように、引数にデフォルト値を設定すると、呼び出し元で引数を渡さなかったとしてもエラーが表示されなくなります。

こちらも現場ではよく使う書き方なのでぜひ、使えるようにしておいてください。

## メソッド課題
条件分岐の課題で作成した旅行プログラムをメソッドで分割してください。

条件
条件分岐とメソッドを活用してプログラムを作成してください

仕様
・旅行プランの選択を要求（getsを使用）
・人数の入力を要求（getsを使用）
・5人以上なら10%割引

実行例

```
旅行プランを選択してください
1. 沖縄旅行（¥10,000）
2. 北海道旅行（¥20,000）
3. 九州旅行（¥15,000）

プランを選択 > 1

沖縄旅行ですね、何人で行きますか？

人数を入力 > 10

5人以上なので10%割引となります

合計料金：¥90,000
```

# まとめ
メソッドは、効率よく複雑な処理を実装するためによく利用されます。

このメソッドの中でいかに効率の良い処理をかけるかどうかがプログラマーの腕の見せ所です。

メソッドの定義や使い方をしっかりと覚え、かつ、ほかの文法とどうやって組み合わせるかを常に考える癖をつけてみてください。

そうすることで、シンプルで効率の良い処理を素早く実装できるプログラマーになることができます。"
Ruby,配列,"配列は、複数のデータを格納することができるクラスです。データベースからユーザーや商品のデータを取り出す際、この配列がよく利用されるので、配列の定義の仕方や繰り返し分を活用したデータの取り出し方をよく確認しておきましょう。

## 配列の定義
配列は以下のように定義します。

```ruby
users = [""Saitou"", ""Tanaka"", ""Suzuki"", ""Yamada""]
```

上のサンプルの場合、`users`という変数には`Saitou`, `Tanaka`, `Suzuki`, `Yamada`の4人の名前が格納されています。このように、複数のデータを一括で管理することができるので、配列を利用すると大量のデータを簡単に扱うことができるようになります。

また、配列は文字列だけでなく数字も格納することができます。

```ruby
ages = [22, 34, 12, 45]
```

# 配列から要素を取り出す
配列から要素を取り出すには、以下のように記述します。

```ruby
ages = [22, 34, 12, 45]

puts ages[0]
```

出力結果

```
22
```

上の例では、`ages[0]`の部分で配列の中の要素を取り出すことができます。その際使用する`0`という数字はインデックス番号を示しており、`配列の中の0番目の要素を指定する`という意味になります。では、0番目の要素とはどれを指すのでしょう？

実は、配列においては一番最初の要素が`0番目`というふうに決められています。つまり、今回のサンプルで使用した`ages`という配列だと、`22 => 0番目`、`34 => 1番目`、`12 => 2番目`、`45 => 3番目`となります。

```ruby
ages = [22, 34, 12, 45]

# 0番目の要素：22を取り出す
puts ages[0]

# 1番目の要素：34を取り出す
puts ages[1]

# 2番目の要素：12を取り出す
puts ages[2]

# 3番目の要素：45を取り出す
puts ages[3]
```

## 配列と繰り返し処理
配列は、繰り返し処理と組み合わせると処理の効率が格段に上がります。その際、配列との組み合わせでよく利用されるのが、[繰り返し処理](/ruby/loop.md)の部分で学んだ`each`です

```ruby
users = [""satou"", ""tanaka"", ""yamada"", ""shimizu""]

users.each do |name|
  puts ""Hello!! #{name}.""
end
```

実際に現場では、1万件以上のユーザーのデータをデータベースから取り出して表示することもあるので、配列と繰り返し処理を組み合わせて使用しないと大変なことになります。「配列から要素を取り出すときは繰り返し処理で取り出す」ということを頭に入れておきましょう。`ages[0]`のような取り出し方は、現場ではほとんど使用しません。

## 配列課題
Ruby、PHP、Javaそれぞれの言語で「Hello World」をコンソール（ターミナル、コマンドプロンプトなど）に出力するためのコードを提示するプログラムを作成してください。

条件
条件分岐と配列を使用してください

実行結果

```
様々な言語のHello World

Ruby：puts ""Hello World!""
PHP：echo ""Hello World!"";
Java：System.out.println(""Hello World!"");
```

## まとめ
配列はWEBアプリを開発するときにも頻繁に使用します。ぜひ、配列を活用して効率よく大量のデータを扱えるよう意識していきましょう。"
Ruby,繰り返し処理,"繰り返し処理は、何度も同じ処理を繰り返したい時に使用するものです。他の言語では`while`や`for`を使用すると思いますが、Rubyではこれらの文法はほとんど使用しません。（実際、現場で一度も見たことない）

というわけで、Ruby特有の繰り返し処理について勉強していきましょう。まずは`each`を知ることから！

# each
`each`は配列や範囲オブジェクトに対して使用することができる繰り返し処理です。ちなみに、配列とは何個も要素を格納することができるもので、範囲オブジェクトとは`0~100`のように、数値的な範囲を表すデータのことです。

それではさっそく、`each`の使い方を確認していきましょう。以下のようにコードを記述してください。

```ruby
# 配列 複数のデータを格納できる
users = [""satou"", ""tanaka"", ""yamada"", ""shimizu""]

# 配列に対してeach文で中身を表示
# usersの要素１つ１つをnameに代入してブロック内の処理を実行
users.each do |user|
  puts ""Hello!! #{user}.""
end
```

実行結果

```
Hello!! satou
Hello!! tanaka
Hello!! yamada
Hello!! shimizu
```

はじめて`each`を見る人なら混乱するかと思います。落ち着いて、1つ1つ確認しながら進めていきましょう。まず、`each`のこの部分から。

```ruby
users.each do |user|
  # 行いたい処理
end
```

上の中で`users`は複数の要素が入った配列になります。その配列に対して`each`を実行することによって、要素を1つ1つ取り出して処理を行うことができるわけです。で、そのときに大切になってくるのが配列から取り出された各要素が`||`の中に囲まれた`user`に代入されることです。

まとめると、配列の`users`に対して`each`を使用すると、1つ1つの要素が`user`に代入され、`do`と`end`で囲まれた部分の処理が実行されるということになります。

この`each`については、構文がわりと複雑なので理解がしにくいかと思いますが、いろんなサンプルを書いて実行し、`each`を書くことに慣れていきましょう。

```ruby
ages = [20, 60, 27, 23]

ages.each do |age|
  puts ""I'm #{age} years old.""
end
```

```ruby
items = [""book"", ""food"", ""movie"", ""music""]

items.each do |item|
  puts ""I bought #{item}""
end
```

```ruby
prefectures = [""Hokkaido"", ""Okinawa"", ""Saitama"", ""Ibaraki""]

prefectures.each do |prefecture|
  puts ""#{prefecture} is awesome!!""
end
```

# each.with_index
`each`と似た繰り返し処理として、`each.with_index`があります。これは、名前の通り繰り返し処理である`each`を`index`番号付きで実行するということになります。基本的な書き方は以下の通り。

```ruby
users = [""satou"", ""tanaka"", ""yamada"", ""shimizu""]

# インデックス番号と配列の要素を同時に出力
users.each.with_index do |name, i|
  puts ""No.#{i} #{name}""
end
```

実行結果

```
No.0 satou
No.1 tanaka
No.2 yamada
No.3 shimizu
```

実行結果のように、`each.with_index`を利用すると、番号付きで繰り返し処理を実行してくれます。今回のサンプルのように会員No.を表示したいときなどに非常に便利です。

では、コードの解説に移りましょう。

`each.with_index`では、配列の中身が`||`で囲んだ部分に代入されるのは、前項で学んだ`each`と同じです。異なる部分は、`||`の中の変数が２つになることです。この2番目の変数の中に、インデックス番号の情報が格納されます。

```ruby
# 変数iにインデックス番号の情報が入る（iでなくてもindexやnumなどでも良い）
users.each.with_index do |name, i|
  # iを利用してカウント
  puts ""No.#{i} #{name}""
end
```

ただ、実行結果をよく見ると一番最初の番号が0になっていますね。

```
No.0 satou
No.1 tanaka
No.2 yamada
No.3 shimizu
```

これはちょっと不自然なので、No.1からカウントを開始できるようにしてみましょう。

実は`each.with_index`は、インデックスの開始番号を指定できるようになっています。

```ruby
users = [""satou"", ""tanaka"", ""yamada"", ""shimizu""]

# インデックスの開始番号を指定
users.each.with_index(1) do |name, i|
  puts ""No.#{i} #{name}""
end
```

実行結果

```
No.1 satou
No.2 tanaka
No.3 yamada
No.4 shimizu
```

`each.with_index`は`each`と合わせて非常によく使われるので、ぜひ練習してみてください。

```ruby
ages = [20, 60, 27, 23]

ages.each.with_index(1) do |age, i|
  puts ""No.#{i} I'm #{age} years old.""
end
```

```ruby
items = [""book"", ""food"", ""movie"", ""music""]

items.each.with_index(1) do |item, i|
  puts ""No.#{i} I bought #{item}""
end
```

```ruby
prefectures = [""Hokkaido"", ""Okinawa"", ""Saitama"", ""Ibaraki""]

prefectures.each.with_index(1) do |prefecture, i|
  puts ""No.#{i} #{prefecture} is awesome!!""
end
```

# サンプルプログラム
では、これから繰り返し処理を使用してサンプルプログラムを作っていきましょう

今回は、「任意のメンバーを2つのチームに分ける」というプログラムをサンプルにコードを書いていきます。

まずはじめに、名前を格納するための配列を作成しましょう。

```ruby
# チーム分けするメンバーの名前を格納する配列を定義
user_list = [""Yanagi"", ""Saitou"", ""Aoyagi"", ""Imai"", ""Obata"", ""Takahashi""]
```

配列が作成できたら、その配列から要素を取り出すための`each`を書いていきます。

```ruby
user_list = [""Yanagi"", ""Saitou"", ""Aoyagi"", ""Imai"", ""Obata"", ""Takahashi""]

# 配列を取り出すためのeach
user_list.each.with_index do |user, i|

end
```

`each`を書いたら、その中に各メンバーをチーム分けするための処理を書いていきます。

その際、`odd?`というメソッドを使用します。この`odd?`は整数オブジェクト（`Integer`）で使用できるメソッドで、整数が奇数だったら`true`を返し、そうじゃなかった場合は`false`を返します。そのため、`if`などの条件分岐を併せて利用されることが多いです。

ちなみに、`odd?`の他には`even?`もあります。`even?`は、整数オブジェクトが偶数なら`true`を返し、そうじゃなかった場合は`false`を返します。

|メソッド|処理|
|---|---|
|odd?|奇数ならtrue、偶数ならfalse|
|even?|偶数ならtrue、奇数ならfalse|

それでは、`odd?`を使用してチーム分けの処理を書いてみましょう。その際、チーム分けしたメンバーを格納するための配列を用意します。

```ruby
user_list = [""Yanagi"", ""Saitou"", ""Aoyagi"", ""Imai"", ""Obata"", ""Takahashi""]

# チームA,Bのメンバーを格納するための配列
team_a = []
team_b = []

user_list.each.with_index do |user, i|
  if i.odd?
    # 配列に要素を格納する
    team_a << user
  else
    # 配列に要素を格納する
    team_b << user
  end
end
```

各チームの配列にメンバーを格納する処理ができたら、次はそのメンバーを表示するための処理を書きましょう。

```ruby
user_list = [""Yanagi"", ""Saitou"", ""Aoyagi"", ""Imai"", ""Obata"", ""Takahashi""]

team_a = []
team_b = []

user_list.each.with_index do |user, i|
  if i.odd?
    team_a << user
  else
    team_b << user
  end
end

# チームAのメンバーを表示
puts ""チームA""
puts team_a
puts """"
# チームBのメンバーを表示
puts ""チームB""
puts team_b
```

これで一通り、チーム分けのプログラムは完了しました。

しかし、まだまだ改善の余地はあります。ここからどんどんリファクタリングしていきましょう。

まずは、チームメンバーの情報を変数に格納して一気に表示できるようにします。その際、`+=`を使用することで、変数の中に格納された文字列に対して、追加で文字列を足し合わせていきます。このような処理を`文字列連結`といいます。

```ruby
user_list = [""Yanagi"", ""Saitou"", ""Aoyagi"", ""Imai"", ""Obata"", ""Takahashi""]

team_a = []
team_b = []

user_list.each.with_index do |user, i|
  if i.odd?
    team_a << user
  else
    team_b << user
  end
end

# チームAのメンバーを表示
text = ""チームA""
team_a.each do |member|
  # テキストに文字列連結
  text += member
end
# チームBのメンバーを表示
text += ""チームB""
team_b.each do |member|
  # テキストに文字列連結
  text += member
end

# チーム分けの情報を表示
puts text
```

これで`puts`を使用する回数を減らすことができたのですが、実行してみると表示がおかしなことになってしまいます。

実行結果

```
チームASaitouImaiTakahashiチームBYanagiAoyagiObata
```

これではかえって読みにくくなってしまうので、途中に改行を入れるようにしてみましょう。

Rubyの文字列の中で改行を行いたい場合は、改行コード`\n`を使用します。`n`の前にある`\（バックスラッシュ）`を入力したい場合は`option + ¥`を押しましょう。そうすると、`\`を入力することができます。

```ruby
user_list = [""Yanagi"", ""Saitou"", ""Aoyagi"", ""Imai"", ""Obata"", ""Takahashi""]

team_a = []
team_b = []

user_list.each.with_index do |user, i|
  if i.odd?
    team_a << user
  else
    team_b << user
  end
end

# \nを入れて改行
text = ""チームA\n""
team_a.each do |member|
  text += ""#{member}\n""
end
text += ""\nチームB\n""
team_b.each do |member|
  text += ""#{member}\n""
end

puts text
```

これで、読みやすく表示することができるようになりました。

実行結果

```
チームA
Saitou
Imai
Takahashi


チームB
Yanagi
Aoyagi
Obata
```

ただ、各メンバーを表示するだけなら、あまり`each`を使用するメリットはありません。以下のように記述しても、スッキリと書くことができるからです。

```ruby
puts ""チームA""
puts team_a
puts """"
puts ""チームB""
puts team_b
```

ただ、各チームメンバーに対して文字列を付け加えたい場合は、`each`の方が便利です。

```ruby
user_list = [""Yanagi"", ""Saitou"", ""Aoyagi"", ""Imai"", ""Obata"", ""Takahashi""]

team_a = []
team_b = []

user_list.each.with_index do |user, i|
  if i.odd?
    team_a << user
  else
    team_b << user
  end
end

text = ""チームA\n""
team_a.each do |member|
  # チームメンバーを「〜さん」と表示する
  text += ""#{member}さん\n""
end
text += ""\nチームB\n""
team_b.each do |member|
  # チームメンバーを「〜さん」と表示する
  text += ""#{member}さん\n""
end

puts text
```

実行結果

```
チームA
Saitouさん
Imaiさん
Takahashiさん

チームB
Yanagiさん
Aoyagiさん
Obataさん
```

さらに、各メンバーに番号を振るなら、以下のようにコードを書くことができます。

```ruby
user_list = [""Yanagi"", ""Saitou"", ""Aoyagi"", ""Imai"", ""Obata"", ""Takahashi""]

team_a = []
team_b = []

user_list.each.with_index do |user, i|
  if i.odd?
    team_a << user
  else
    team_b << user
  end
end

text = ""チームA\n""
# each.with_indexに変更
team_a.each.with_index(1) do |member, i|
  # 各メンバーに番号を振る
  text += ""No.#{i}：#{member}さん\n""
end
text += ""\nチームB\n""
team_b.each.with_index(1) do |member, i|
  # 各メンバーに番号を振る
  text += ""No.#{i}：#{member}さん\n""
end

puts text
```

実行結果

```
チームA
No.1：Saitouさん
No.2：Imaiさん
No.3：Takahashiさん


チームB
No.1：Yanagiさん
No.2：Aoyagiさん
No.3：Obataさん
```

さて、最後に一番肝心なところをリファクタリングしていきましょう。

現在、メンバーのチーム分けは何回やっても同じ結果になってしまいます。これでは面白くないので、メンバーがランダムにチーム分けされるようにしましょう。

その際、配列オブジェクトには便利なメソッドが用意されています。それが、`shuffle`です。`shuffle`は、配列の各要素をランダムに並び替えるメソッドです。

以下のようにコードを追加してみましょう。

```ruby
user_list = [""Yanagi"", ""Saitou"", ""Aoyagi"", ""Imai"", ""Obata"", ""Takahashi""]

# user_listの要素をランダムに入れ替える
user_list.shuffle

team_a = []
team_b = []

user_list.each.with_index do |user, i|
  if i.odd?
    team_a << user
  else
    team_b << user
  end
end

text = ""チームA\n""
# each.with_indexに変更
team_a.each.with_index(1) do |member, i|
  # 各メンバーに番号を振る
  text += ""No.#{i}：#{member}さん\n""
end
text += ""\nチームB\n""
team_b.each.with_index(1) do |member, i|
  # 各メンバーに番号を振る
  text += ""No.#{i}：#{member}さん\n""
end

puts text
```

これで配列の要素はランダムに入れ替えられる処理を書くことができました。しかし、実行結果を見てみましょう。

実行結果

```
チームA
No.1：Saitouさん
No.2：Imaiさん
No.3：Takahashiさん


チームB
No.1：Yanagiさん
No.2：Aoyagiさん
No.3：Obataさん
```

なんと、実行結果は`shuffle`を書く前と変わりません。これはなぜでしょう？

実は、`shuffle`を実行した時は確かに配列の各要素はランダムに入れ替えられているのですが、その場限りで処理が終わり、元のデータは書き換わってないのです。大切なのは、配列の要素を並び替え、その結果を元データに反映させること。つまり、`shuffle`の処理結果をきちんと`user_list`に反映させないといけないのです。

それを実現するためには、`shuffle`に`!`をつけます。そうすると、大元のデータである`user_list`もランダムにシャッフルされた後に元のデータが書き換えられるようになります。

ちなみに、このようなメソッドを`破壊的メソッド`と呼びます。

```ruby
user_list = [""Yanagi"", ""Saitou"", ""Aoyagi"", ""Imai"", ""Obata"", ""Takahashi""]

# user_listの要素をランダムに入れ替える
user_list.shuffle!

team_a = []
team_b = []

user_list.each.with_index do |user, i|
  if i.odd?
    team_a << user
  else
    team_b << user
  end
end

text = ""チームA\n""
# each.with_indexに変更
team_a.each.with_index(1) do |member, i|
  # 各メンバーに番号を振る
  text += ""No.#{i}：#{member}さん\n""
end
text += ""\nチームB\n""
team_b.each.with_index(1) do |member, i|
  # 各メンバーに番号を振る
  text += ""No.#{i}：#{member}さん\n""
end

puts text
```

実行結果

```
チームA
No.1：Obataさん
No.2：Imaiさん
No.3：Saitouさん


チームB
No.1：Aoyagiさん
No.2：Yanagiさん
No.3：Takahashiさん
```

これで、ランダムに各メンバーがチーム分けされるようになりました。

`shuffle!`のような破壊的なメソッドは、状況に応じて注意して使い分けてください。不用意に使用すると、エラーの原因になることもあります。

繰り返し処理に併せて様々なメソッドが出てきましたが、どれも便利なものばかりなので何度も繰り返し復習して定着させていきましょう。

# まとめ
Rubyでは、繰り返し処理には`each`をよく利用します。他の言語では、`for`や`while`がよく利用されており、実際に`Ruby`にも`for`や`while`はありますがほとんど使わないので特に勉強しなくて良いでしょう。

できるだけ、無駄を省きながら効率よく勉強されていくと、転職のスピードも早くなるかと思います。ぜひ、ショートカットしながら勉強を進めて行ってください。

お疲れ様でした！"
Ruby,ハッシュ,"ハッシュは、配列と同様に複数のデータを扱うことができるクラスですが、データはキーとバリューの組み合わせになっています。

他の言語では、連想配列やディクショナリ、マップと呼ばれています。

Ruby on Railsにおいては新規登録、編集、削除機能を実装する際に、このハッシュが使用されています。

今後、Webアプリケーションを作成する上ではとても重要な役割を担うので、ぜひ使い方を理解しておいてください。

といっても、最初は値の代入と取り出し方がわかっていれば最初は大丈夫です。気構えずいきましょう。

```ruby
# 名前、メール、住所のデータが入ったハッシュの定義
# キー：name, email, address
# バリュー：Tanaka, hoge@co.ne.jp, Saitama
params = { name: ""Tanaka"", email: ""hoge@co.ne.jp"", address: ""Saitama"" }
# ハッシュからデータを取り出す
puts params[:name]
```

出力結果

```
Tanaka
```

ハッシュを使うメリットは、データの順番を意識しないで済むことです。

上のサンプルのように、 `name` を指定してデータを取り出すと、格納された順番に関係なく `name` に紐づく `Tanaka` というデータを取り出すことができます。

そのため「必要な処理をするためには〜番目のデータを取り出さなければいけない」といったように、順番を考慮する必要がありません。

また、ハッシュはキーとバリューの組み合わせでデータを扱うことができるので、名前やメールアドレス、住所など、色んな種類のデータを格納するときに便利です。

先ほどご紹介した他にも、ハッシュの定義方法としては以下のような書き方もあります。

```ruby
# キーがシンボルではなく文字列になっている
params = { ""name"" => ""Tanaka"", ""email"" => ""hoge@co.ne.jp"", ""address"" => ""Saitama"" }

puts params[""name""]
```

基本的には `name:` というようにシンボルを用いてキーを記述しますが、 `""name""` のように文字列でも記述できるということを頭に入れておきましょう。

また、ハッシュは以下のように途中で改行することもできます。現場でもよく利用される書き方なので、覚えておきましょう。

```ruby
# 途中で改行できる
params = {
            ""name"" => ""Tanaka"",
            ""email"" => ""hoge@co.ne.jp"",
            ""address"" => ""Saitama""
         }

puts params[""name""]
```

また、ハッシュの最後の要素の後にカンマがついてもエラーは出ません。

```ruby
params = {
            ""name"" => ""Tanaka"",
            ""email"" => ""hoge@co.ne.jp"",
            ""address"" => ""Saitama"", # カンマがあってもエラーは出ない
         }

puts params[""name""]
```

ハッシュで使用される `{}` の部分は、 `each` でも使用されるため、最初は混同しやすいかもしれません。

```ruby
# ハッシュ
{ ""name"" => ""Tanaka"", ""email"" => ""hoge@co.ne.jp"", ""address"" => ""Saitama"" }

# each {} を使用して以下のようにも書ける
[""satou"", ""tanaka"", ""yamada"", ""shimizu""].each {|name|  puts ""Hello!! #{name}."" }
```

こちらは慣れていけばすぐにハッシュか `each` かを見分けられるようになるので、心配しないでください。

## ハッシュの要素を編集
ハッシュは、定義した後にもデータを書き換えたり、追加したりといったことが可能です。

```ruby
params = { name: ""Tanaka"", email: ""hoge@co.ne.jp"", address: ""Saitama"" }

# データの書き換え
params[:name] = ""Saitou""

# データの追加
params[:age] = 33

puts params[:name]
puts params[:age]

# 存在しないキーを指定するとnilになる
p params[:hobby]
```

出力結果

```
Saitou
33
nil
```

## ハッシュを使った繰り返し処理
配列と同様、ハッシュにも繰り返し処理を行うことができます。

```ruby
params = { name: ""Tanaka"", email: ""hoge@co.ne.jp"", address: ""Saitama"" }

params.each do |key, value|
  puts ""キー：#{key}""
  puts ""バリュー：#{value}""
end
```

また、`each` メソッドのブロック引数の数を１つにすると、ハッシュの中にキーとバリューが格納されます。

```ruby
params = { name: ""Tanaka"", email: ""hoge@co.ne.jp"", address: ""Saitama"" }

params.each do |key_value|
  # 配列を出力
  p key_value
end
```

引数をひとつにした場合は、キーとバリューが配列に格納されるので、以下のように出力することも可能になります。

```ruby
params = { name: ""Tanaka"", email: ""hoge@co.ne.jp"", address: ""Saitama"" }

params.each do |key_value|
  # 配列を出力
  puts key_value[0]
  puts key_value[1]
end
```


## ハッシュの比較
ハッシュは、ハッシュ同士で比較を行うことができます。

キーとバリューが等しい場合は `true` を返し、そうでない場合は `false` を返します。

```ruby
params1 = { name: ""Tanaka"", email: ""hoge@co.ne.jp"", address: ""Saitama"" }
params2 = { name: ""Tanaka"", email: ""hoge@co.ne.jp"", address: ""Saitama"" }

# trueが返る
puts params1 == params2

params3 = { name: ""Tanabe"", email: ""hoge@co.ne.jp"", address: ""Tokyo"" }
params4 = { name: ""Tanaka"", email: ""fuga@co.ne.jp"", address: ""Saitama"" }

# falseが返る
puts params3 == params4
```

## ハッシュのサイズを調べる
ハッシュのサイズを調べるには `size` メソッドを使用します。

```ruby
hash1 = {}
hash2 = { name: ""Tanabe"", email: ""hoge@co.ne.jp"", address: ""Tokyo"" }

puts hash1.size
puts hash2.size
```

実行結果

```
0
3
```

## 要素の削除
ハッシュの要素は、キーを指定して削除することができます。

```ruby
params = { name: ""Tanaka"", email: ""hoge@co.ne.jp"", address: ""Saitama"" }

# nameを削除
params.delete(:name)

# ハッシュを表示
p params
```

実行結果

```
{:email=>""hoge@co.ne.jp"", :address=>""Saitama""}
```

また、削除しようとするキーがハッシュの中に存在しなかった場合は `nil` が返ってきます。

```ruby
params = { name: ""Tanaka"", email: ""hoge@co.ne.jp"", address: ""Saitama"" }

# ageを削除
puts params.delete(:age)
```

実行結果

```
nil
```

`delete` メソッドに対してブロックを渡してあげると、指定したキーがなかった時に任意のメッセージを表示できるようになります。

```ruby
params = { name: ""Tanaka"", email: ""hoge@co.ne.jp"", address: ""Saitama"" }

# ageを削除
puts params.delete(:age) {|key| ""#{key}というキーは存在しないため削除できませんでした""}
```

## シンボル
シンボルとは `:` の後に任意の名前をつけた文字列のような見た目のオブジェクトで、すでにここまでで学んできたハッシュのなかでも使っているものです。

```ruby
:name
```

このシンボルに関して、もっと理解を深めていきましょう。

シンボルは文字列とよく似ていますが、Rubyの内部では整数として扱われます。

そのため、２つの値が同じかどうかを比べる場合は、文字列よりも高速で処理を行うことができます。

```ruby
""name"" == ""name""
:name == :name
```

シンボルの特徴をまとめると以下のようになります。

- 見た目が文字列っぽいので読みやすい
- 内部的には整数なので処理が速い
- メモリの使用効率がいい
- 破壊的メソッドが使えないので値が勝手に変更される心配がない

そして、そのシンボルがよく使用されるのが、ご存知の通りハッシュです。

```ruby
{ name: ""Tanaka"", email: ""hoge@co.ne.jp"", address: ""Saitama"" }
```

また、ハッシュはキーとバリューの両方をシンボルにすることもできます。以下の2つのハッシュは、記述が違うだけで全く同じものとして認識されます。

```ruby
# シンボルのみ
{ name: :Tanaka, email: :hoge@co.ne.jp, address: :Saitama }
# => を使用した記述
{ :name => :Tanaka, :email => :hoge@co.ne.jp, :address => :Saitama }
```

一般的には、記述が楽なので以下の書き方がよく用いられます。

```ruby
# シンボルのみ
{ name: :Tanaka, email: :hoge@co.ne.jp, address: :Saitama }
```

## ハッシュのキーのみを取り出す
ハッシュのキーのみを取り出すときは以下のように記述します。

```ruby
params = { name: ""Tanaka"", email: ""hoge@co.ne.jp"", address: ""Saitama"" }

params.each_key do |key|
  puts ""キー：#{key}""
end
```

実行結果

```
キー：name
キー：email
キー：address
```

# ハッシュのバリューのみを取り出す
ハッシュのキーのみを取り出すときは以下のように記述します。

```ruby
params = { name: ""Tanaka"", email: ""hoge@co.ne.jp"", address: ""Saitama"" }

params.each_value do |value|
  puts ""キー：#{value}""
end
```

実行結果

```
キー：Tanaka
キー：hoge@co.ne.jp
キー：Saitama
```

## キーとバリューの入れ替え
ハッシュのキーとバリューを入れ替えたいときは以下のように記述します。

```ruby
params = { ""name"" => ""Tanaka"", ""email"" => ""hoge@co.ne.jp"", ""address"" => ""Saitama"" }

puts params.invert
```

## ハッシュ課題
身長と年齢によってジェットコースターに乗れるかどうかを判定するプログラムを作成してください。

条件
条件分岐とハッシュを使用してください

仕様
・年齢確認：64歳以下ならOK
・身長確認：130cm以上ならOK

実行結果

```
---------------------
田中さん
年齢　30歳：年齢確認OK
身長　160cm：身長確認OK

ご利用いただけます
---------------------
佐藤さん
年齢　70歳：年齢確認NG
身長　150cm：身長確認OK

ご利用いただけません
---------------------
鈴木さん
年齢　10歳：年齢確認OK
身長　120cm：身長確認NG

ご利用いただけません
---------------------
```

## まとめ
Ruby on Railsでもハッシュはよく利用しますが、バリエーションはそこまで多くはありません。基本的に、「値の取り出し」と「値の格納」が理解できれば最初は全く問題ないです。そこまで難しくないので、使い方を理解しておいてください；

お疲れ様でした！"
Ruby,オブジェクト指向,"オブジェクト指向とは、`設計図`から`物`を生み出すという考え方のことです。なぜこのような考え方をプログラミングに取り入れるのかというと、単純に開発効率が上がるからです。

このオブジェクト指向に関しては後の項目でも詳しく説明しているのですが、今後の学習をスムーズにするためにも知っておいたほうがいいので、以下に書いてあることだけでも理解できるようにしておきましょう。

プログラムの世界では、設計図のことを `クラス` 、設計図から生み出された物のことを `インスタンス（またはオブジェクト）` といいます。

|現実の世界|プログラムの世界|
|---|---|
|設計図|クラス|
|設計図から生み出された物|インスタンス（オブジェクト）|

本講座では混乱を避けるため、以降から「インスタンス」で話を進めていきます。

## オブジェクト指向を取り入れるメリット
オブジェクト指向を取り入れるメリットは、以下の点にあります。

- 設計図（クラス）を使いまわすことができる（コードを沢山書かなくて済む）
- 物（インスタンス）の質を一定に保つことができる（エラーの発生率を下げることができる）
- 物（インスタンス）のカスタマイズがしやすい（コードを書き換える量が少なくて済む）

これらのメリットにより、コードを書く量を大幅に減らすことができ、開発を効率よく進めることができます。

例えば車だと、設計図をもとに作りますよね？

だからこそ、同じような車を大量に作ることができたり、「1台だけハンドルが全く違う！」みたいなミスを防ぐことができたり、「今回はボディーの部分だけ前よりかっこいいの作ってみる」なんてことが可能になるわけです。

「設計図をもとに物を作る」という発想には、こんなメリットがあるんですね。それをプログラミングに取り入れたのが、オブジェクト指向です。

それではこれから、オブジェクト指向を理解するために必要な基礎知識を身につけていきましょう。

## インスタンスの種類
Rubyには様々な種類のインスタンス（クラスから生み出されたもの）が存在します。そこで、一部ではありますがよく利用するインスタンスを以下にまとめておきます。

全てを一度に覚える必要はありませんが、以下のインスタンスだけは頭に入れておいてください。

|クラス|説明|例|
|---|---|---|
|String|文字を表す（文字列）|""文字列""|
|Integer|整数を扱う（整数）|33|
|Float|少数を扱う（少数）|1.5|
|Array|複数のデータを格納して一度にたくさんのデータを扱うことができる（配列）|[""tanaka"",""saitou"",""aoyagi""]|
|Hash|キーとバリューの組み合わせでデータを扱う（ハッシュ）|{name: ""tanaka"", age: 33, hobby: ""soccer""}|

## クラス
オブジェクト指向の部分でもクラスについては少し触れましたが、ここではより詳しく説明していきます。

クラスとは、私たちの世界でいう設計図にあたります。この設計図があることによって、効率よく開発を進めることができるのです。それでは、「車」を例にしてクラスについて学んでいきましょう。

もし、車を作るときに設計図を無しに作成したらどうなるでしょう？きっと、以下のような問題が発生するのではないでしょうか？

- 作るのに時間がかかる
- 品質にばらつきが出る
- カスタマイズがしにくい

クラスを利用しなかった場合、上記のような問題がプログラミングでも起こりうるわけです。これだと、開発効率も上がらないし、エラーが頻発するプログラムになってしまいます。それらの問題を防ぐために、オブジェクト指向を取り入れるわけです。

せっかくなので、車を例にコードを書いていきましょう。車には、値段や車体の色、乗車人数といった情報があります。それを、クラスを使わずに定義した場合は以下のようになります。

```ruby
# 値段
car_price = 1000000
# 車体の色
car_color = red
# 乗車人数
car_capacity = 4
```

1台の情報を表すだけなら大して問題はないかもしれません。ですが、これが10台となったらどうでしょう？

```ruby
car_price1 = 1000021
car_color1 = ""red""
car_capacity1 = 4
car_price2 = 1002000
car_color2 = ""blue""
car_capacity2 = 20
car_price3 = 3000000
car_color3 = ""green""
car_capacity3 = 6
car_price4 = 1500000
car_color4 = ""yellow""
car_capacity4 = 8
car_price5 = 8000000
car_color5 = ""red""
car_capacity5 = 6
car_price6 = 4000000
car_color6 = ""dark""
car_capacity6 = 4
car_price7 = 1030000
car_color7 = ""white""
car_capacity7 = 2
car_price8 = 1000930
car_color8 = ""green""
car_capacity8 = 4
car_price9 = 5000000
car_color9 = ""yellow""
car_capacity9 = 40
car_price10 = 3000000
car_color10 = ""red""
car_capacity10 = 8
```

10台の車に対する値段・色・乗車人数のたった3つの情報を表すだけでもこれだけの変数（30個）が必要になります。

これがもし、50台も100代も生み出すことになったら、、、、。

スケールがどんどん大きくなるにつれ、クラスを使用しないとめんどくさいことが起こるようになります。コードの記述量が増え、開発にかける労力が大きくなり、エラーが発生する確率も高まり、管理も難しくなる。

コードの見通しも悪くなり、後々変更したいときにどう変更したらいいかわからない。そうなってしまっては、運用保守を行うプログラマーは地獄を見ますね。

それに対し、クラスを利用すると以下のようにすっきりとまとめることができます。これが、クラスを利用するメリット。

```ruby
# クラス：車の設計図
class Car
  attr_accessor :price, :color, :capacity

  def initialize(price, color, capacity)
    self.price = price
    self.color = color
    self.capacity = capacity
  end
end

# 設計図から生み出された車
car1 = Car.new(1000021, ""red"", 4)
car2 = Car.new(1002000, ""blue"", 20)
car3 = Car.new(3000000, ""green"", 6)
car4 = Car.new(1500000, ""yellow"", 8)
car5 = Car.new(8000000, ""red"", 6)
car6 = Car.new(4000000, ""dark"", 4)
car7 = Car.new(1030000, ""white"", 2)
car8 = Car.new(1000930, ""green"", 4)
car9 = Car.new(5000000, ""yellow"", 40)
car10 = Car.new(3000000, ""red"", 8)
```

見慣れないコードがたくさん出てきて混乱するかもしれませんが、とにかく今は変数の数が `car1~10` までと3分の1になったことに注目してください。

これらの変数の中に、値段・色・乗車人数など、車を構成する上で必要な情報がまとめて入っています。そうすることで、様々な情報の管理が楽になるわけです。

それでは、クラスの定義の仕方からすこしづつ学んでいきましょう。

## クラスの構成要素
クラスの構成要素は以下のようになっています。

|構成要素|用途|
|---|---|
|プロパティ|クラスが持つ情報|
|メソッド|クラスが持つ機能|
|initializeメソッド|プロパティの初期値の設定|

それぞれの構成要素に関しては、このあと詳しく説明します。今は以上のような構成要素でクラスが成り立っていることを理解しておいてください。

## クラスの定義とインスタンス化
では早速、クラスの定義をしてみましょう。クラスを定義するときは `class クラス名` で始まり `end` で終わります。それでは、 `Car` クラスを定義してみましょう。

```ruby
# クラスを定義
class Car

end
```

クラスが定義できたら、次はそのクラスからインスタンスを生み出します。このことをインスタンス化と言います。

`Car` クラスをインスタンス化するときは以下のように記述します。

```ruby
class Car

end

# クラスをインスタンス化
car = Car.new
```

上記のように、まずはクラスを定義し、そのクラスをインスタンス化することによって、実際にプログラムの中でクラスの持つ情報や機能を活用できるようになります。

クラスが定義できたら、次はその中にクラスの情報を保持する変数を定義する方法を学んでいきましょう。

## インスタンス変数
インスタンス変数は、クラスから作成されたインスタンスごとに独立して持つことができる変数です。この変数を利用することで、 `car1` では `color` が `red` 、 `car2` では `color` が `green` 、という風にインスタンスごとに保持する情報を変えることができます。

インスタンス変数は、以下のように頭に@をつけて表します。

```ruby
class Car
  # インスタンス変数
  @color
end
```

## メソッド
定義したインスタンス変数に値を代入したい場合は、以下のようなメソッドを定義します。

メソッドとは「一連の処理のかたまり」であり、前述した通り「クラスの機能」を定義するために使用されるものです。

```ruby
class Car
  # @name に値を代入（変数に値を設定するのでセッターと呼ばれている）
  def color=(color)
    @color = color
  end
end
```

定義したメソッド（セッター）を利用する場合は、以下のようなコードを書きます。

```ruby
class Car
  # セッター
  def color=(color)
    @color = color
  end
end

car = Car.new

# Carクラスのcolorにredを代入（セッターを利用）
car.color = ""red""
```

また、`color`に代入した`red`を表示するためには、以下のようなメソッドを定義します。

```ruby
class Car
  # colorの値を表示するメソッド（値を取り出すのでゲッターと呼ばれている）
  def color
    @color
  end

  def color=(color)
    @color = color
  end
end

car = Car.new
car.color = ""red""

# Carクラスのcolorに格納されたredの値を取得(ゲッターを利用)
puts car.color
```

## initializeメソッド
initializeメソッドは、通常のメソッドとは異なり、クラスがインスタンス化された時に実行されるという特徴を持っています。

そのため、クラスの持つ情報（プロパティ）の初期値を設定する時に利用されます。

```ruby
class Car
  # initializeメソッドで初期値を設定
  def initialize
    @color = ""red""
  end

  def color
    @color
  end

  def color=(color)
    @color = color
  end
end

# インスタンス化された瞬間にinitializeメソッドが呼び出され
# colorにredが代入される
car = Car.new

# colorにredを代入する記述がいらなくなる
# car.color = ""red""

# colorを呼び出すとredが表示される
puts car.color
```

これで、わざわざ `color` に値を代入しなくても `red` が代入されるようになりました。

ただ、今のままだと `color` には `red` しか代入されないようになっています。インスタンスによって `green` や `blue`など、柔軟にプロパティの値を変えるにはどうすればいいでしょう？

実は、インスタンス化をする際、 `initialize` メソッドには引数を渡すことができます。それにより、インスタンスごとに `color` の値を変更することが可能になるのです。

```ruby
class Car
  # initializeメソッドで引数を受け取れるようにする
  def initialize(color)
    @color = color
  end

  def color
    @color
  end

  def color=(color)
    @color = color
  end
end

# インスタンス化する際にinitializeメソッドに値を渡す
car1 = Car.new(""red"")
car2 = Car.new(""green"")
car3 = Car.new(""blue"")

# colorを呼び出すと代入された値が表示される
puts car1.color
puts car2.color
puts car3.color
```

実行結果

```
red
green
blue
```

## アクセサ（セッター、ゲッター）
Rubyのクラスでは、インスタンス変数に値を代入したり、値を取り出したりといった時に、専用のメソッドを定義していました。

これらのメソッドのことをゲッター、セッターと言います。

|名前|役割|
|---|---|
|セッター|変数に値を代入する|
|ゲッター|変数から値を取り出す|

先ほどのサンプル内だと、以下のメソッドがゲッター、および、セッターにあたります。

```ruby
class Car

  def initialize(color)
    @color = color
  end

  # ゲッター
  def color
    @color
  end

  # セッター
  def color=(color)
    @color = color
  end
end
```

実は、このゲッターやセッターは、もっと簡単に記述することができます。その時に使用するのが、以下のメソッドです。

- attr_reader（ゲッター）
- attr_writer（セッター）

これらのコードを利用すると、クラスの定義はもっと簡潔に書けるようになります。

```ruby
class Car

  # ゲッター
  attr_reader :color
  # セッター
  attr_writer :color

  def initialize(color)
    @color = color
  end

end
```

このゲッターとセッターは、`attr_accessor`を用いるとさらに簡潔にまとめることができます。

```ruby
class Car

  # セッター&ゲッター
  attr_accessor :color

  def initialize(color)
    @color = color
  end

end
```

このように、現場ではセッターとゲッターをまとめて定義できる`attr_accessor`が非常によく利用されます。裏側でどういうふうに処理がされているのかをきちんと理解し、`attr_accessor`を使えるようにしましょう。

これを用いると、最終的には以下のようなコードになります。

```rb
class Car
  attr_accessor :color
  def initialize(color)
    @color = color
  end
end

car1 = Car.new(""red"")
car2 = Car.new(""green"")
car3 = Car.new(""blue"")

puts car1.color
puts car2.color
puts car3.color
```

それでは、`Car`クラスに、さらに`price`や`capacity`などの値を追加してみましょう。上記のコードとどのような点が変わったか確認してみてください。

```rb
class Car
  attr_accessor :color, :price, :capacity
  def initialize(color, price, capacity)
    @color = color
    @price = price
    @capacity = capacity
  end
end

car1 = Car.new(""red"", 1000021, 4)
car2 = Car.new(""blue"", 1002000, 20)
car3 = Car.new(""green"", 3000000, 6)

puts car1.color
puts car1.price
puts car1.capacity

puts car2.color
puts car2.price
puts car2.capacity

puts car3.color
puts car3.price
puts car3.capacity
```

このようにオブジェクト指向に沿ってコードを書くと、

1. car1
2. car2
3. car3

のそれぞれが`color`、`price`、`capacity`のプロパティを最初から保持するようになり、わざわざそれぞれの変数を0から定義する必要がなくなります。

それに`initialize`メソッドで引数を受け取ることによって、このクラスのインスタンスは、`new`演算子を使用してインスタンス化する際に

「`color`、`price`、`capacity`の3つの情報を保持してなければいけない」

といったルールを設定することもできるようになります。その結果、「必要な情報が足りない！」なんて人為的なミスも防ぐことができるのです。

## オブジェクト指向課題
TODOリスト管理プログラムを作成してください。

条件
TODOクラス、TASKクラスを定義してプログラムを作成してください

仕様
TODOクラス
・TASKの追加
・TASKの一覧表示
・TASKの削除

TASK
・「id、タスク名、詳細」という情報を保持

## まとめ
オブジェクト指向は、効率よくコードを書くためにもとても大切な概念です。

今はまだ「なんとなく」くらいでしかオブジェクト指向のメリットを体感することができないかもしれません。

ですが、プログラミングを学ぶに連れ、どんどんオブジェクト指向のメリットがわかって楽しくなるので、ぜひなんども復習を繰り返しながら学習を進めていってください。

今回はこれで以上となります。

お疲れ様でした！"
Ruby,CSVインポート,"`CSV` は「`c`omma-`s`eparated `v`alues」の略で，カンマ `,` で区切ったデータ形式です。

データ容量が軽く，互換性が高いため，幅広く活用されています。

この教材では，[令和２年全国都道府県市区町村別面積調](https://www.gsi.go.jp/KOKUJYOHO/MENCHO202001-index.html) の CSV ファイルを加工した「沖縄県の各市町村の面積」のCSVファイルをRubyで読み込み，データをハッシュ形式で受け取る方法などを学びましょう。

[こちら](https://gyakuten-app.s3-ap-northeast-1.amazonaws.com/texts/ruby_csv/okinawa_area.csv) からCSVファイルをダウンロードし，作業するディレクトリに入れましょう。

---

【参考】作業するディレクトリにこだわりがなければ，以下のコマンドを実行して上記準備を行って下さい。

```zsh:ターミナル
cd
mkdir ruby ruby/csv_sample
cd ruby/csv_sample
curl -O https://gyakuten-app.s3-ap-northeast-1.amazonaws.com/texts/ruby_csv/okinawa_area.csv
```

---

RubyでCSVファイルを読み込むには，まず次の1行が必要です。

```sample.rb
require ""csv""
```

これで，`CSVクラス` を利用することができます。まずは [リファレンスマニュアル](https://docs.ruby-lang.org/ja/latest/class/CSV.html) を軽く眺めてみるとよいでしょう。

CSVファイルを読み込む `クラスメソッド` は2種類用意されています。

```
CSV.foreach(""csvファイルへのパス"")
CSV.read(""csvファイルへのパス"")
```

---

【参考】`クラスメソッド` は `インスタンスメソッド` と違い，インスタンスを作成せずに使用するメソッドで

`クラス名.クラスメソッド名`  (例: `CSV.foreach`)

の形式で利用します。

---

CSVファイルを `1行ずつ` 読み込み，何かしらの操作を行うのが `foreach` クラスメソッドです。次の `foreach.rb` を作成しに次を入力し，ファイルを実行してみましょう。

```foreach.rb
require ""csv""

CSV.foreach(""okinawa_area.csv"") do |row|
  p row
end
```

```zsh:ターミナル
ruby foreach.rb
```

```none:出力結果
[""id"", ""郡"", ""市区町村"", ""面積""]
[""1"", ""国頭郡"", ""国頭村"", ""194.8""]
[""2"", ""国頭郡"", ""大宜味村"", ""63.55""]
[""3"", ""国頭郡"", ""東村"", ""81.88""]
# 略
```

CSVファイルを `全て` 読み込み，2次元配列を作成するのが `read` クラスメソッドです。`read.rb` を作成して実行してみましょう。

```read.rb
require ""csv""

array = CSV.read(""okinawa_area.csv"")
p array

puts ""1行目に対応する配列""
p array[0]
puts ""2行目に対応する配列""
p array[1]
```

```zsh:ターミナル
ruby read.rb
```

```none:出力結果
[[""id"", ""郡"", ""市区町村"", ""面積""], [""1"", ""国頭郡"", ""国頭村"", ""194.8""], [""2"", ""国頭郡"", ""大宜味村"", ""63.55""], [""3"", ""国頭郡"", ""東村"", ""81.88""], ... # 略
1行目に対応する配列
[""id"", ""郡"", ""市区町村"", ""面積""]
2行目に対応する配列
[""1"", ""国頭郡"", ""国頭村"", ""194.8""]
```

CSVファイルの読み込みができるのは分かりましたが，`配列` ではデータとして扱いづらいでしょう。CSVファイルの1行目にヘッダーが付いていますので，これをキーとした `ハッシュ` の形式にしたいところです。

`headers: true` オプションを付けることで，`1行目をキーとしたハッシュのような形式` で受け取ることが可能です。

まず，操作の分かりやすい `foreach` クラスメソッドの方から確認していきましょう。

```foreach.rb
require ""csv""

CSV.foreach(""okinawa_area.csv"", headers: true) do |row|
  p row
end
```

```zsh:ターミナル
ruby foreach.rb
```

```none:出力結果
#<CSV::Row ""id"":""1"" ""郡"":""国頭郡"" ""市区町村"":""国頭村"" ""面積"":""194.8"">
#<CSV::Row ""id"":""2"" ""郡"":""国頭郡"" ""市区町村"":""大宜味村"" ""面積"":""63.55"">
#<CSV::Row ""id"":""3"" ""郡"":""国頭郡"" ""市区町村"":""東村"" ""面積"":""81.88"">
# 略
```

このように，ハッシュに近い形式に変換されます。

ただ，これは `ハッシュではありません` し，`キーが文字列` になっています。加工して扱いやすい形式に変換してみましょう。

---

【問題A】次のようなハッシュの配列を得るためのコードを書いてみましょう。

```none:欲しい配列
[
  { id: 1, county: ""国頭郡"", city: ""国頭村"", area: 194.8 },
  { id: 2, county: ""国頭郡"", city: ""大宜味村"", area: 63.55 },
  { id: 3, county: ""国頭郡"", city: ""東村"", area: 81.88 },
  # 略
]
```

---

いかがでしょうか。少し難しかったかもしれません。丁寧に進めていきましょう。

コードを考えるために，まず，デバッグツール `pry`を導入します。

```zsh:ターミナル
gem install pry
```

```foreach.rb
require ""csv""
# 次を追加
require ""pry""

CSV.foreach(""okinawa_area.csv"", headers: true) do |row|
  p row
end
```

`pry` という gem をインストールし， `require` で読み込んでおくと， `binding.pry` を使用できるようになります。

`binding.pry` を入れると，ファイルを実行した際にその箇所で一時的に処理を中断することができます。

その時点での変数の中身を確認することができますので，`エラーの解決方法`，`データの加工方法` などを効率よく調べることができるのです。

それでは， `binding.pry` を `foreach` クラスメソッドのブロック内に入れてファイルを実行してみましょう。

```foreach.rb
require ""csv""
require ""pry""

CSV.foreach(""okinawa_area.csv"", headers: true) do |row|
  # 「p row」を次に置き換える
  binding.pry
end
```

```zsh:ターミナル
ruby foreach.rb
```

```none:出力結果
    1: require ""csv""
    2: require ""pry""
    3: 
    4: CSV.foreach(""okinawa_area.csv"", headers: true) do |row|
    5:   binding.pry
 => 6: end

[1] pry(main)> 
```

このように `binding.pry` を入れた箇所で処理が止まるはずです。次のようなものを入力してみましょう。

```none:binding.pry
row

row[:id]
row[""id""]
row[""id""].to_i

row[""郡""]
row[""市区町村""]

row[""面積""]
row[""面積""].to_f
```

【注意】表示が1画面に収まらない場合は，下側に `lines ~~/~~` のような表示が出ます。`q` を入力すれば終了できます

以上を踏まえた上で，再度問題を見直してみましょう。

---

【問題A】次のようなハッシュの配列を得るためのコードを書いてみましょう。

```none:欲しい配列
[
  { id: 1, county: ""国頭郡"", city: ""国頭村"", area: 194.8 },
  { id: 2, county: ""国頭郡"", city: ""大宜味村"", area: 63.55 },
  { id: 3, county: ""国頭郡"", city: ""東村"", area: 81.88 },
  # 略
]
```

---

あらかじめ空配列 `list` を作成しておき，`foreach` メソッド内で `{ id: 1, county: ""国頭郡"", city: ""国頭村"", area: 194.8 }` のようなハッシュを `list` に入れるようにすれば，`list` が目的のハッシュの配列となります。

---

【回答例A-1】

```foreach.rb
require ""csv""
require ""pry""

list = []
CSV.foreach(""okinawa_area.csv"", headers: true) do |row|
  list << { id: row[""id""].to_i, county: row[""郡""], city: row[""市区町村""], area: row[""面積""].to_f }
end

p list
```

---

なお，`read` クラスメソッドを使用すれば，あらかじめ空配列を用意する必要がなくなります。

---

【回答例A-2】

```read.rb
require ""csv""
require ""pry""

list = CSV.read(""okinawa_area.csv"", headers: true).map do |row|
  { id: row[""id""].to_i, county: row[""郡""], city: row[""市区町村""], area: row[""面積""].to_f }
end

p list
```

---

CSVの読み込みはできましたので，最後にこのデータを利用した問題に挑戦してみましょう。

---

【問題B】問題Aで作成した配列 `list` を利用して，次を出力してみましょう。

- id が 6 のデータ
- 南大東村 のデータ
- 面積 が 100 以上の全データ
- 中頭郡 の全データ
- 中頭郡 の全市町村の配列
- 中頭郡 の総面積

【回答例B】

```read.rb
require ""csv""
require ""pry""

list = CSV.read(""okinawa_area.csv"", headers: true).map do |row|
  { id: row[""id""].to_i, county: row[""郡""], city: row[""市区町村""], area: row[""面積""].to_f }
end

# id が 6 のデータ
p list.find { |data| data[:id] == 6 }

# 南大東村 のデータ
p list.find { |data| data[:city] == ""南大東村"" }

# 面積 が 100 以上の全データ
p list.find_all { |data| data[:area] >= 100 }

# 中頭郡 の全データ
nakagami_list = list.select { |data| data[:county] == ""中頭郡"" }
p nakagami_list

# 中頭郡 の全市町村の配列
p nakagami_list.map { |data| data[:city] }

# 中頭郡 の総面積
puts nakagami_list.sum { |data| data[:area] }
```"
Ruby,CSVファイルの生成,"RubyでCSVファイルを生成する方法を確認していきましょう。

前回のCSVインポートと同じディレクトリに移動し，サンプル用のファイルを作成しましょう。

```zsh:ターミナル
cd ruby/csv_sample
touch write_sample.rb write.rb
```

次の形式で `sample.csv` を作成することができます。

```write_sample.rb
require ""csv""

CSV.open(""sample.csv"", ""wb"") do |csv|
  csv << [""id"", ""name"", ""email""]
  csv << [""1"", ""佐藤"", ""satou@example.com""]
  csv << [""2"", ""鈴木"", ""suzuki@example.com""]
  csv << [""3"", ""高橋"", ""takahashi@example.com""]
end
```

それでは，実行してみましょう。  `sample.csv` が作成されます。

```zsh:ターミナル
ruby write_sample.rb
```

作成された `sample.csv` を確認してみましょう。（macの場合，デフォルト設定なら）次のコマンドで開くことができます。

```zsh:ターミナル
open sample.csv
```

次は，[Faker](https://github.com/faker-ruby/faker) という gem を併用し，疑似個人情報を作成してみることにしましょう。

`Faker` はダミーデータを生成する gem です。インストールし，まずは `Faker` 単体の使い方を確認していきましょう。

```zsh:ターミナル
gem install faker
pry
```

ターミナルで `pry` を実行すると，対話的にRubyのプログラムを実行できます。以下を実行してみましょう。

```none:pry
require ""faker""

Faker::Name.name
Faker::Name.name
Faker::Name.name

# 日本語に変更
Faker::Config.locale = :ja

Faker::Name.name
Faker::Internet.email
Faker::Internet.password
Faker::Lorem.paragraph
# Control キーを押しながら D を押すと pry を終了できます
```

他にもいろいろなコマンドが用意されています。[FakerのReadme](https://github.com/faker-ruby/faker#generators) を確認して試してみましょう。ｃ

---

【問題】 `id`, `name`, `email` のカラムを持つ疑似的な個人情報が100件入ったCSVファイル `users.csv` を生成する Ruby のプログラムを `write.rb` にかきましょう。

---

【回答例】

```write.rb
require ""csv""
require ""faker""
Faker::Config.locale = :ja

CSV.open(""users.csv"", ""wb"") do |csv|
  csv << %w[id name email]
  1.upto(100) do |i|
    csv << [i, Faker::Name.name, Faker::Internet.email]
  end
end
```"
Ruby,RSpec,"RSpecはRuby on Railsでテストを作成するための機能で、これを利用する事により簡単にテストコードを書くことができます。初心者の方からすると「テスト」といわれてもあまりピンとこないかもしれませんが、これ実装できると玄人受けはかなりいいです。つまり、面接で他の初心者に比べ結構優位に立てるということ。

ウェブアプリケーションの作成においては、デザインや裏側のロジックなど、華やかな部分に目がいきがちですが、システムの品質を担保し、自動でテストを行えるRSpecを使いこなせるのはかなり重要です。ぜひ、ここで基本的なことを理解しておいてください。

今回は、簡単にテストコードを実装できるようにRuby on Railsではなく、Ruby環境で実装できるようにしました。なので、気軽にサクッとRSpecを学んでいきましょう。

# 作業ディレクトリの作成
まずは、RSpecの練習をするためのディレクトリを作成します。ターミナルから以下のコマンドを実行しましょう。

```
mkdir rspec_sample
```

ディレクトリが作成できたら、その中に移動します。以下のコマンドを実行しましょう。

```
cd rspec_sample
```

# Gemfileを作成
次に、Ruby on Railsでも使用する`Gemfile`というものをつくります。`Gem`とは、様々な機能を簡単に実装するためにRuby on Railsに用意されたライブラリで、これを使用することによって開発効率が格段に上がります。では、以下のコマンドを実行してください。

```
bundle init
```

# gemをインストール
`Gemfile`が作成できたら、テキストエディタで`Gemfile`を開き、その内容を以下のとおりに書き換えてください。`rspec`という記述がテストコードを書くために必要なGemをさしています。

```ruby
gem ""rspec"", "">= 3.0.0""
```

`Gemfile`が作成できたら、gemをインストールしましょう。以下のコマンドをターミナルから実行してください。

```
bundle install
```

# RSpecを初期化
gemがインストールできたら、次にターミナルから以下のコマンドを実行し、`rspec`専用のファイルを作成します。

```
bundle exec rspec --init
```

コマンドを実行すると、以下のようなディレクトリやファイルが作成されます。

- .rspec
- spec/spec_helper.rb

# 簡単なテストコードを書く
`rspec`を使用するために必要なファイルやディレクトリが作成できたら、次に`rspec/spec`ディレクトリの中にある`spec_helper.rb`にテストコードを書いていきます。まずは、簡単なテストコードを書き、テストをするための感覚を掴んでいきましょう。以下のコードを`spec_helper.rb`に記述してください。

```ruby
describe '掛け算' do
  it '3 * 3 は 9 になること' do
    expect(3 * 3).to eq 9
  end
end
```

上のコードの中で`describe`の部分は「どういう内容のテストを行うのか？」を記述しています。また、`it`の部分には、テストの期待値を書きます。今回の場合は`3 * 3`の結果が`9`であることが期待値なので「3 * 3 は 9 になること」と書きました。

実際にテストを行うのが`expect(3 * 3).to eq 9`の部分になります。`expect`の中にテストを行いたい処理を記入し、`eq`の部分に実際に期待した値を書きます。

# テストを実行する
テストコードをかけたら、さっそく実行をして見ましょう。テストを行う際は、ターミナルから以下のコマンドを入力します。

```
bundle exec rspec
```

以下のような結果が表示されればテストは成功です。

```
......

Finished in 0.01085 seconds (files took 0.18722 seconds to load)
1 examples, 0 failures
```

`1 examples`の部分がおこなうテストの数です。そして、`0 failures`の部分が失敗したテストの数です。これが0なら、全てのテストが期待値通りの結果になったことを意味します。

# テストの対象となるクラスを作る
簡単なテストが実行できたら、次に本格的なテストコードの実装に移ります。まずは、`rspec_sample`ディレクトリ配下に`lib`ディレクトリを作りましょう。ここに、テストの対象となる`User`クラスを定義するためのファイルを作ります。では、`lib`ディレクトリ配下に`user.rb`を作りましょう。

`user.rb`が作成できたら、テキストエディタで開き、その中に`User`クラスを定義しましょう。

```ruby
class User
  attr_accessor :name, :age, :hobby

  def initialize(name:, age:, hobby:)
    self.name = name
    self.age = age
    self.hobby = hobby
  end

end
```

# 本格的にテストコードを書く
テスト用のクラスが作成できたら、それをテストするためのテストコードを書いていきます。まずは、以下のコードを`spec_helper.rb`に記述しましょう。

```ruby
# user.rb（テストの対象となるファイル）を読み込むための記述
require_relative '../lib/user'

# テストを実行するためのおきまりの書き方
RSpec.describe User do
  # テストの内容
  describe ""Userクラスの情報"" do
    # テストの期待値
    it ""return user name"" do
      # テスト対象となるUserクラスをオブジェクト化
      user = User.new(name: ""Tanaka"", age: 31, hobby: ""Soccer"")
      # テストコード（名前が期待値と一致することを確認）
      expect(user.name).to eq ""Tanaka""
    end
    it ""return user age"" do
      user = User.new(name: ""Tanaka"", age: 31, hobby: ""Soccer"")
      # テストコード（年齢が期待値と一致することを確認）
      expect(user.age).to eq 31
    end
    it ""return user hobby"" do
      user = User.new(name: ""Tanaka"", age: 31, hobby: ""Soccer"")
      # テストコード（趣味が期待値と一致することを確認）
      expect(user.hobby).to eq ""Soccer""
    end
  end
end
```

上記のコードの中で、`require_relative '../lib/user'`は、user.rb（テストの対象となるファイル）を読み込むための記述です。

また、`user = User.new(name: ""Tanaka"", age: 31, hobby: ""Soccer"")`の部分は、`name`に`Tanaka`、`age`に`31`、`hobby`に`Soccer`を格納しています。これが、テストの対象となるクラスのオブジェクトです。

`expect(user.name).to eq ""Tanaka""`の部分が実際のテストコードになるのですが、中身は単純にこれまでの基礎で学んできたコードと同じ考え方で大丈夫です。`user.name`の記述は、`User`クラスのオブジェクトである`user`の`name`の値を取り出す記述になります。それが、期待値である`eq ""Tanaka""`と一致するかどうかを確かめるコードとなるわけです。

上記のテストコードがかけたら、テストを実行して見ましょう。その際は、ターミナルから以下のコードを入力するのでしたね。

```
bundle exec rspec
```

以下のような結果が表示されればテストは成功です。

```
......

Finished in 0.01085 seconds (files took 0.18722 seconds to load)
3 examples, 0 failures
```

これで基本的なテストコードの書き方は学ぶことができました。しかし、`RSpec`には他にも色々な書き方があり、それをいきなり現場で見ると混乱することになります。なので、他の書き方についてもきちんと理解し、現場でもコードを書いたり読んだりといったことができるようにしましょう。

## context
`context`はテストをグループ分けするために使用するものです。以下のコードを`spec_helper.rb`に記述し、`context`でグループ分けしたコードを書いてみましょう。

```ruby
require_relative '../lib/user'

RSpec.describe User do
  describe ""Userクラスの情報"" do
    # 名前がTanakaの場合のUserオブジェクトに対するテスト
    context ""名前がTanakaの場合"" do
      it ""return user name"" do
        user = User.new(name: ""Tanaka"", age: 31, hobby: ""Soccer"")
        expect(user.name).to eq ""Tanaka""
      end
      it ""return user age"" do
        user = User.new(name: ""Tanaka"", age: 31, hobby: ""Soccer"")
        expect(user.age).to eq 31
      end
      it ""return user hobby"" do
        user = User.new(name: ""Tanaka"", age: 31, hobby: ""Soccer"")
        expect(user.hobby).to eq ""Soccer""
      end
    end
    # 名前がSuzukiの場合のUserオブジェクトに対するテスト
    context ""名前がSuzukiの場合"" do
      it ""return user name"" do
        user = User.new(name: ""Suzuki"", age: 31, hobby: ""Soccer"")
        expect(user.name).to eq ""Suzuki""
      end
      it ""return user age"" do
        user = User.new(name: ""Suzuki"", age: 31, hobby: ""Soccer"")
        expect(user.age).to eq 31
      end
      it ""return user hobby"" do
        user = User.new(name: ""Suzuki"", age: 31, hobby: ""Soccer"")
        expect(user.hobby).to eq ""Soccer""
      end
    end
  end
end
```

## before
`before`はテストの下準備をするためのコードです。つまり、テストに必要なオブジェクトの下準備をする際に`let`を使用します。

```ruby
require_relative '../lib/user'

RSpec.describe User do
  describe ""Userクラスの情報"" do
    context ""名前がTanakaの場合"" do
      # テストの前準備をする
      before do
        @params = {name: ""Tanaka"", age: 31, hobby: ""Soccer""}
      end
      it ""return user name"" do
        user = User.new(@params)
        expect(user.name).to eq ""Tanaka""
      end
      it ""return user age"" do
        user = User.new(@params)
        expect(user.age).to eq 31
      end
      it ""return user hobby"" do
        user = User.new(@params)
        expect(user.hobby).to eq ""Soccer""
      end
    end
    context ""名前がSuzukiの場合"" do
      # テストの前準備をする
      before do
        @params2 = {name: ""Suzuki"", age: 31, hobby: ""Soccer""}
      end
      it ""return user name"" do
        user = User.new(@params2)
        expect(user.name).to eq ""Suzuki""
      end
      it ""return user age"" do
        user = User.new(@params2)
        expect(user.age).to eq 31
      end
      it ""return user hobby"" do
        user = User.new(@params2)
        expect(user.hobby).to eq ""Soccer""
      end
    end
  end
end
```

## let
`let`を使用すると、インスタンス変数`@params`を置き換えることができます。

```ruby
require_relative '../lib/user'

RSpec.describe User do
  describe ""Userクラスの情報"" do
    # paramsにオブジェクトに必要な情報を格納する
    let(:params) {{name: ""Tanaka"", age: 31, hobby: ""Soccer""}}
    # params2にオブジェクトに必要な情報を格納する
    let(:params2) {{name: ""Suzuki"", age: 31, hobby: ""Soccer""}}
    context ""名前がTanakaの場合"" do
      it ""return user name"" do
        # paramsの値を使用してオブジェクトを作成する
        user = User.new(params)
        expect(user.name).to eq ""Tanaka""
      end
      it ""return user age"" do
        # paramsの値を使用してオブジェクトを作成する
        user = User.new(params)
        expect(user.age).to eq 31
      end
      it ""return user hobby"" do
        # paramsの値を使用してオブジェクトを作成する
        user = User.new(params)
        expect(user.hobby).to eq ""Soccer""
      end
    end
    context ""名前がSuzukiの場合"" do
      it ""return user name"" do
        # params2の値を使用してオブジェクトを作成する
        user = User.new(params2)
        expect(user.name).to eq ""Suzuki""
      end
      it ""return user age"" do
        # params2の値を使用してオブジェクトを作成する
        user = User.new(params2)
        expect(user.age).to eq 31
      end
      it ""return user hobby"" do
        # params2の値を使用してオブジェクトを作成する
        user = User.new(params2)
        expect(user.hobby).to eq ""Soccer""
      end
    end
  end
end

```

## before, merge!
`before`と`merge!`で、テストごとに異なるパラメータのみを後から追加することができます。これでだいぶテストコードが柔軟にかけるようになります。

```ruby
require_relative '../lib/user'

RSpec.describe User do
  describe ""Userクラスの情報"" do
    let(:params) {{age: 31, hobby: ""Soccer""}}
    context ""名前がTanakaの場合"" do
      # beforeを追加
      before do
        # paramsにTanakaを追加
        params.merge!(name: ""Tanaka"")
      end
      it ""return user name"" do
        user = User.new(params)
        expect(user.name).to eq ""Tanaka""
      end
      it ""return user age"" do
        user = User.new(params)
        expect(user.age).to eq 31
      end
      it ""return user hobby"" do
        user = User.new(params)
        expect(user.hobby).to eq ""Soccer""
      end
    end
    context ""名前がSuzukiの場合"" do
      # beforeを追加
      before do
        # paramsのnameに紐づく値をSuzukiに変更
        params.merge!(name: ""Suzuki"")
      end
      it ""return user name"" do
        user = User.new(params)
        expect(user.name).to eq ""Suzuki""
      end
      it ""return user age"" do
        user = User.new(params)
        expect(user.age).to eq 31
      end
      it ""return user hobby"" do
        user = User.new(params)
        expect(user.hobby).to eq ""Soccer""
      end
    end
  end
end
```

## letを利用したオブジェクトの変数化
`User`クラスのインスタンス化の部分を`let`に置き換え、変数として利用します。

```ruby
require_relative '../lib/user'

RSpec.describe User do
  describe ""Userクラスの情報"" do
    # Userもletで定義
    let(:user) { User.new(params) }
    let(:params) {{age: 31, hobby: ""Soccer""}}
    context ""名前がTanakaの場合"" do
      before do
        params.merge!(name: ""Tanaka"")
      end
      it ""return user name"" do
        # letで定義したuserを使用
        expect(user.name).to eq ""Tanaka""
      end
      it ""return user age"" do
        # letで定義したuserを使用
        expect(user.age).to eq 31
      end
      it ""return user hobby"" do
        # letで定義したuserを使用
        expect(user.hobby).to eq ""Soccer""
      end
    end
    context ""名前がSuzukiの場合"" do
      before do
        params.merge!(name: ""Suzuki"")
      end
      it ""return user name"" do
        # letで定義したuserを使用
        expect(user.name).to eq ""Suzuki""
      end
      it ""return user age"" do
        # letで定義したuserを使用
        expect(user.age).to eq 31
      end
      it ""return user hobby"" do
        # letで定義したuserを使用
        expect(user.hobby).to eq ""Soccer""
      end
    end
  end
end
```

## オブジェクトのパラメータの一部をletで変数化
`User`のパラメータも`let`を利用すると変数で設定することができます。試しに、`name`を`let`に置き換えてみましょう。

```ruby
require_relative '../lib/user'

RSpec.describe User do
  describe ""Userクラスの情報"" do
    let(:user) { User.new(params) }
    # nameを変数として読み込む
    let(:params) {{name: name, age: 31, hobby: ""Soccer""}}
    context ""名前がTanakaの場合"" do
      # letを使ってnameを変数として定義する
      let(:name) { ""Tanaka"" }
      it ""return user name"" do
        expect(user.name).to eq ""Tanaka""
      end
      it ""return user age"" do
        expect(user.age).to eq 31
      end
      it ""return user hobby"" do
        expect(user.hobby).to eq ""Soccer""
      end
    end
    context ""名前がSuzukiの場合"" do
      # letを使ってnameを変数として定義する
      let(:name) { ""Suzuki"" }
      it ""return user name"" do
        expect(user.name).to eq ""Suzuki""
      end
      it ""return user age"" do
        expect(user.age).to eq 31
      end
      it ""return user hobby"" do
        expect(user.hobby).to eq ""Soccer""
      end
    end
  end
end
```

# まとめ
`RSpec`には様々な書き方があり最初は混乱するかと思いますが、現場ではほぼ必ず使用する技術です。なので、すこしずつ着実に身につけていきましょう。これが実装できることをアピールすると、面接でもかなり印象が良くなります。

製品の品質を効率よく担保するためにも、自身の転職を成功させるためにも、ぜひしっかりと学んでいってください。"
Ruby,YouTube検索を実装するAPI,"# APIとは
APIは「Application Programming Interface」の頭文字をとったものです。

具体的にAPIとは何かと言うと、ソフトウェアやアプリケーションなどの一部を外部に向けて公開したもので、異なるソフトウェアやサービス間で機能を利用できます。

例えば「Twitter API」を利用するとRailsからTwitterに対して投稿や検索などを行うことができます。

今回は、YouTubeを例にしてAPIを利用してみよう

# APIの作成
まずは、Rubyから利用するためのYouTubeのAPIを自分で作成する必要があります。簡単なのでやってみましょう。

1. APIコンソールにログイン（https://console.developers.google.com/?hl=ja）
2. プロジェクトを作成
3. サイドバー「認証情報」から「認証情報を作成」「APIキー」を選択しAPIキーを作成
4. APIキーをコピー（後でプログラムに使用します）
5. 「ダッシュボード」「APIの有効化」から「YouTube Data API v3」を選択

# RubyからAPIを利用
APIが作成できたら、さっそくRubyからYouTubeのAPIを利用してみましょう。

## Gemのインストール
まずは`google-api-client`というGemをインストールします。

Gemとは便利な機能を簡単に利用できるように他の技術者が開発してくれたもので、これを使うことによって複雑な機能を短い時間で実装できるようになります。

```
gem install google-api-client
```

## APIの初期化
まずは、YouTubeの動画データを取得する機能を持った`YouTubeService`オブジェクトを作成します。以下のコードを`youtube_search.rb`に記述しましょう。

youtube_search.rb

```rb
require 'google/apis/youtube_v3'

# 動画データを取得できるオブジェクトを生成
youtube = Google::Apis::YoutubeV3::YouTubeService.new
# 先ほど作成したAPIキーをオブジェクトのプロパティーに代入
youtube.key = ""APIキー""
```

コードを書けたら、まずはエラーが出ないか確かめます。以下のコマンドで実行してみましょう。

```
$ ruby youtube_search.rb
```

## 動画データの検索
`YouTubeService`オブジェクトを生成することができたら、早速検索機能を使ってみましょう。

検索をする際は、必要な情報を引数に渡して`YouTubeService`オブジェクトの`list_searches`メソッドを実行します。

```rb
require 'google/apis/youtube_v3'

youtube = Google::Apis::YoutubeV3::YouTubeService.new
youtube.key = ""APIキー""

# q: 検索キーワード
# max_results：検索数
youtube_search_list = youtube.list_searches(""id,snippet"", type: ""video"", q: ""プログラミング"", max_results: 10)

puts youtube_search_list
```

こちらのコードを実行すると、`Google::Apis::YoutubeV3::SearchListsResponse`オブジェクトが帰ってきていることがわかります。

実行結果

```
#<Google::Apis::YoutubeV3::SearchListsResponse:0x00007f9f484f2fb0>
```

ちなみに、`Google::Apis::YoutubeV3:`の部分はモジュールの名前を示していて、`SearchListsResponse`がクラス名を示しています。

```rb
module Google
  module Apis
    module YoutubeV3
      class YouTubeService < Google::Apis::Core::BaseService
        # いろんなメソッドがある
        # def ~~~
        # end
        # def ~~~
        # end
        # def ~~~
        # end
      end
    end
  end
end
```

この`SearchListsResponse`の`items`というプロパティーの中にいろんな検索データが入っています。それでは次に、こちらの`items`から欲しいデータだけを抽出してみましょう。


## チャンネル名・動画タイトル・URLを抽出
チャンネル名・動画タイトル・URLなど、動画から欲しいデータを取り出す方法は少し複雑ですが一つずつ整理して考えていけば大丈夫です。

要はオブジェクトのプロパティーに別のオブジェクトが格納されているので、欲しいデータを格納しているオブジェクトのプロパティーから値を取っているだけ。

最初は難しく感じるかもしれませんが、Rubyのロジックを書き慣れてくるとすんなり理解できるようになります。

```rb
require 'google/apis/youtube_v3'

youtube = Google::Apis::YoutubeV3::YouTubeService.new
youtube.key = ""APIキー""

youtube_search_list = youtube.list_searches(""id,snippet"", type: ""video"", q: ""久保"", max_results: 50)

# ヒアドキュメントを格納する変数
text = """"

youtube_search_list.items.each do |item|

  # チャンネル名を取得
  channel_title = item.snippet.channel_title
  # 動画タイトルを取得
  video_title = item.snippet.title
  # 動画IDを取得（URLの生成に使う）
  video_id = item.id.video_id

  text +=<<~EOS

  チャンネルタイトル：#{channel_title}
  タイトル：#{video_title}
  URL：https://www.youtube.com/watch?v=#{video_id}
  iframe：<iframe width=""560"" height=""315"" src=""https://www.youtube.com/embed/#{video_id}"" frameborder=""0"" allow=""accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture"" allowfullscreen></iframe>

  EOS
end

puts text
```

【注意】今回作成したファイルをGitHubにプッシュしないようにして下さい。`APIキー` を悪用される可能性があります。

# まとめ
APIの使い方はだいたいどれも一緒です。

1. APIコンソールからAPIを作成
2. APIキーを取得
3. 公式サイトの手順に従って各言語でAPIを使用するコードを書く（このときにAPIキーを使用）

まずは身近なメディアであるYouTubeを通してAPIの便利さとそれをいじる楽しさを感じてみてください。こちらのAPIを利用すればマーケティングの分析にも使えます。

お疲れ様でした。"
,Ruby on Rails の基本,"こちらでは、コードを書くのではなくRuby on Railsがどういうものなのかを説明することに焦点を当てます。今後、Ruby on Railsのスキルを身につける上で、基本的な仕組みを知っておくことは超重要。基礎の基礎が大事ということをよく頭に入れながら学んでいきましょう。

# MVC
Ruby on Railsは、MVCアーキテクチャにのっとって設計されています。そのため、MVCアーキテクチャを理解しておくことがとても重要になって来るのです。ちなみに、MVCのそれぞれの意味はM（モデル）、V（ビュー）、C（コントローラー）となります。そして、これらの要素はRuby on Railsにおいて明確に役割が決まっています。

|名前|役割|
|---|---|
|M(モデル)|データベースのデータを扱う、複雑なロジックを組む|
|V(ビュー)|Webサイトの画面を構成|
|C(コントローラー)|処理の振り分け|

# Ruby on Railsの構成要素
Ruby on Railsには、様々な構成要素があります。そのなかでも、まずは基本となる以下の構成要素を覚えておきましょう。

1. Active Record（モデル）
2. Action View（ビュー）
3. Action Controller（コントローラー）

# Ruby on Railsの便利な機能
Ruby on Railsがなぜ便利なのか？その秘密がこちらです。

## ルーティング
&や=、拡張子の入った汚いURLではなく、`/user/1`などの綺麗でなんのデータを見ているのかわかりやすいURLを使用することができます。

## テンプレート
Ruby on Railsでは、Webサイトのナビゲーションバーなどを全体で共有したり、HTMLの中に直接Rubyのコードを埋め込んだりすることができます。これにより、同じコードをなんども書く手間が省けたり、柔軟に画面の表示を変えることが可能になるわけです。

## マイグレーション
マイグレーションとはデータベースのテーブルを定義するための機能で、この機能によりデータベースを操作するための言語であるSQLを直接書かなくても自由にテーブルを作成できるようになります

## レコードの操作
データベースに保存されているデータのかたまり（レコード）を簡単に操作することができます。これにより、データの一覧表示、登録、更新、削除といったデータを扱うための操作（CRUD処理）が実現しやすくなっています。

## バリデーション
データベースのテーブルにデータを保存するときに、データのチェックを行うことができます。例えば、数字になっているか？空のデータになっていないか？データが長すぎないか？といったチェックを簡単に行えるようになるわけです。

## 国際化
様々な言語に対応したWebサイトを構築することができます。

## テスト
Webサイトの品質を保つのに重要なテストが簡単に実装できます。

## セッション
複数ページにまたがって、同一ユーザーのデータを保持する（例：アマゾンのショッピングカート）といった機能が簡単に実現できます。

## モデル間の関連付け
複数のモデル間で連携し、データの検索を行う際にいちどに複数のテーブルのデータを取り出すことが可能になります。例えば、あるユーザーの購入した商品一覧を表示するときにも、この関連付けが役に立ちます。

# HTTP
 HTTPは、ブラウザとサーバーがHTML、画像などの情報をやり取りするときに使われる通信手段（プロトコル）です。Webサイトを作成する際にも、この点を理解しながら進めていきましょう。

## リクエストとレスポンス
Webサイトではリクエストとレスポンスによって情報の送受信が行われています。リクエストは、ユーザーがブラウザから要求するもので、レスポンスはユーザーの要求に応じて必要なデータを返すことです。このやりとりによって、Webサイトはユーザーに必要な情報を届けることができています。

|名前|意味|
|---|---|
|リクエスト|ユーザーがサーバーに対してデータを要求すること|
|レスポンス|ユーザーのリクエストに応じた情報をサーバーが返すこと|

# Ruby on Railsのリクエストの流れ
Webアプリケーションを作成するにあたって、リクエストの流れを理解することは超重要です。今後の学習をスムーズに進めるためにも、この流れをよく理解しておきましょう。Ruby on Railsにおいて、ユーザーからのリクエストは以下の流れで処理されます。

1. ルート
2. コントローラ
3. ビュー

Ruby on Railsはブラウザからのリクエストを受け取ると、`config`ディレクトリの中にある`routes.rb`の記述に従ってどのコントローラのどのアクションに処理を渡すかを決めます。

コントローラは複数あり、そのコントローラの中に複数のアクションがあります。そして、アクションにはモデルとどのようなやり取りをするのかを記述します。また、モデルから取り出したデータはインスタンス変数に保存し、その情報をビューに渡します。アクションは、ブラウザへのレスポンスを作成するために、表示するビューを選択します。特に指定がない場合は、アクションと同じ名前のビューが選択されて、ブラウザに表示されます。

このコントローラによって、モデルからデータを受け取ったり、次にどのビューを表示させるかを決めたりすることができるわけです。

コントローラによって選ばれたビュー（テンプレートともいう）は、コントローラのインスタンス変数を参照して、その値をHTMLの中で使用することができます。それにより、ユーザーが要求したデータを柔軟に表示させることができるわけです。"
Ruby on Rails,Ruby on Rails で Hello World!!,"こちらでは、Railsを使って「Hello World」を表示する簡単なWebアプリケーションを作っていきましょう。

# Webアプリケーションとは
WEBアプリケーションとは、ブラウザから利用可能な動的なWebサービスのことを指します。

動的Webサービスとは何かというと、ユーザーの利用状況によって柔軟に画面や表示内容が変わるサービスのことです。例えば、会社のホームページとFacebookやTwitterなどを比べてみるとよくわかるかと思います。

会社のホームページは何度訪れても画面になんの変化もありません。それに対し、FacebookやTwitterはユーザの登録情報や投稿内容によってまったく表示が異なります。このように、動的に変化するのがWebアプリケーションの特徴です。

# リクエストとレスポンス
Webでは、リクエストとレスポンスという概念が存在します。`リクエスト`はユーザーからの要求のことで、ボタンをクリックしたり、URLを入力してアクセスしたときにリクエストが発生します。`レスポンス`はサーバーの応答のことで、ユーザーが要求したデータを表示するときにサーバーからレスポンスが送信されます。

- ユーザの要求 => リクエスト
- アプリの応答 => レスポンス

# Railsアプリの構成
Railsアプリの構成は、初心者にとってはかなり複雑な印象があるかと思います。でも、きちんと以下の構成になっていることを頭に入れておけば、この後の学習もだいぶスムーズになるので、よく確認して見てください。

- Rails（アプリの本体）
 - ルート（コントローラへの処理の振り分け）
 - コントローラ（モデルやビューへの処理の振り分け）
 - モデル（ロジックの定義）
 - ビュー（）
- データベース（MySQL, Postgre, SQLiteなど）

# 今回作成するアプリ
今回作成するのは、`Hello World`を表示するだけの簡単なアプリです。このアプリを通して、ルート・コントローラ・ビューの作成方法をしっかりと身につけましょう。

このレッスンの内容が、これからRailsアプリケーションを作成するための土台となります。大切な部分なので、一つ一つ確認しながら進めていってください。

# Railsアプリの処理の順番
Railsアプリにユーザーからアクセスがあった場合、アプリ内で以下のように処理されます。

1. リクエスト：ユーザーからのリクエスト
2. ルート：指定されたURLに応じたコントローラのアクションを指定
3. コントローラ：モデルやビューへの処理の振り分け
4. ビュー：画面の表示

この流れに応じて処理を書いていくので、しっかりと頭に入れて置いてください。それではさっそく、アプリを立ち上げましょう。

# アプリ立ち上げの流れ
アプリ立ち上げの流れは以下のようになります。これから実際に手を動かしながら確認して行きましょう。慣れないうちは、アプリを立ち上げたら毎回以下の流れで手順5まで実行し、初期画面が表示されるか確認してください。

1. `rails new`コマンドを実行しアプリのディレクトリを作成
2. `cd`コマンドを使って立ち上げたアプリのディレクトリに移動
3. `rails db:create`（データベースの作成）
4. `rails s`（サーバを立ち上げ）
5. [http://localhost:3000/](http://localhost:3000/)にアクセス

## アプリの立ち上げ

アプリを立ち上げる時は、ますはアプリを作成したいディレクトリに移動します。今回、例として `rails` 配下でアプリを立ち上げることを前提に進めていきます。`rails`ディレクトリを作成したら、`cd`コマンドを用いてその中に移動します。

```
# 新規ターミナルを起動
mkdir rails
cd rails
```

念の為、`pwd`コマンドを使ってきちんと移動できているか確かめましょう。`rails`で終わるパスが表示されればOKです。

`rails`ディレクトリに移動できたら、以下のようにコマンドを実行しアプリを立ち上げます。`rails new アプリ名` で指定した名前のアプリが作成されます。

```
rails new hello_world_sample
```

そうすると、`hello_world_sample`という名前のディレクトリが作成され、そのなかにRailsアプリを動かすために必要な様々なディレクトリやファイルが作成されます。一通りディレクトリやファイルの作成が終わり、再度ターミナルからコマンド入力できる状態になったら、`cd`コマンドを使ってアプリのディレクトリに移動しましょう。

```
cd hello_world_sample
```

これでアプリのディレクトリに移動できました。確認のため、`ls`コマンドを実行してみてください。

```
ls
```

実行結果

```
Gemfile      README.md    app          config       db           log          public       test         vendor
Gemfile.lock Rakefile     bin          config.ru    lib          package.json storage      tmp
```

ディレクトリやファイルが確認できたら、`hello_world_sample`ディレクトリをテキストエディタ（Visual Studio CodeやAtomなど）にドラッグ&ドロップし、アプリに関連するディレクトリやファイルが全て編集できる状態にしておきましょう。

今回、自動的に作成されたディレクトリやファイルを今の時点で全て把握する必要はありませんが、以下のものだけしっかりと役割を理解しておいてください。

|ディレクトリ|役割|
|---|---|
|app|モデル、ビュー、コントローラを管理|
|config|ルーティング、データベースなどの設定ファイルの管理|
|db|マイグレーションファイル、シードデータファイルの管理|

`Ruby on Rails`はディレクトリ階層が厳しく管理されているので、その階層構造をしっかりと守ることが大切です。そのため、どこに何があるかはまず優先的に覚えておくといいでしょう。

## データベースを作成する
データベースとは、Webアプリケーションの中で使用されるデータを整理整頓し、管理するためのものです。立ち上げたアプリに関連するデータベースを作成する場合は、以下のコマンドを実行するだけでOKです。

```
rails db:create
```

実行結果（開発環境とテスト環境のデータベースが作成されます）

```
Created database 'db/development.sqlite3'
Created database 'db/test.sqlite3'
```

また、このコマンドは一度実行した後は再度実行する必要はありません。

すでにデータベースが作成されたアプリでは、データベースを使う準備ができているので、最初の一回だけ実行するようにしましょう。再度実行すると、「すでにデータベースは存在しています」ということで以下のようなエラーが表示されます。

```
Database 'db/development.sqlite3' already exists
Database 'db/test.sqlite3' already exists
```

それでは、データベースの作成が完了したら、Webサーバを起動しましょう。RailsアプリはWebアプリケーションなので、Webサーバーが起動していないと動作を確認することができません。

そのため、以下のコマンドを実行してWebサーバーを立ち上げましょう。ちなみに、Railsに付属しているWebサーバーは`WEBrick`と呼ばれています。

```
rails s
```

サーバーが起動できたら、初期画面へアクセスしてみましょう。以下のリンクから、初期画面へアクセスすることができます。それが確認できたら、アプリの立ち上げは成功です。これから何度もやる流れなので、ぜひ今回の手順を繰り返し確認してみてください。

[http://localhost:3000/](http://localhost:3000/)

## MVCモデルの理解
`MVCモデル`は、Railsアプリを開発する上でとても重要な概念で、MVCというアルファベットのそれぞれの意味は以下の表の通りです。ちょっと難しい部分なので、今はさらっと読んでおくだけで大丈夫です。

|頭文字|読み|役割|
|---|---|---|
|M|モデル|データベースとのデータのやり取り、複雑なロジックを記述、バリデーションの設定|
|V|ビュー|ユーザーの目に触れる部分|
|C|コントローラ|処理の振り分け|

MVCモデルでは、以上のようにプログラムが明確に役割分担されています。それによって、コードの管理、運用保守が簡単に行えるようにしています。

例えば、プログラミングのわからないデザイナーでもビューの部分だけなら編集ができるようになったり、処理の振り分けを変えたいならコントローラの部分の記述だけを変えたりと、どこのコードを編集すればいいかを明確にできたり、一部のコードを変更しても他の部分のコードの変更が最小限に抑えられるようになるのです。


# Railsアプリ開発の流れ
Railsアプリを開発する時は、以下の流れで行います。こちらもアプリ開発をする上では基本となるとても重要な流れなので、ぜひしっかりと頭に入れておいてください。

1. ルートの定義
2. コントローラの作成とアクションの定義
3. ビューの作成

とにかく、初心者のうちは「ルート・コントローラ・ビュー」の順番で基本的に開発を行うということを頭に入れておいてください。これがRailsアプリ開発の重要な手順となります。

## ルートの定義
では早速、手順1のルートの作成から始めていきましょう。まずはファイルのある場所をしっかりと覚えてください。ルートを設定するためのファイルは`config`ディレクトリの中にあります。

```
config/routes.rb
```

ファイルが確認できたら、その中にルートを設定しましょう。ルートを設定する際は、`アクセスされるURL`、`そのURLに対応するコントローラ`、`指定したコントローラのアクション`を記述します。以下は、ルートを設定するときの一つの例です。

```ruby
# 左側がURL　右側がコントローラの名前とアクション
get '/homes', to: 'homes#index'
```

上の例は以下のような構成になっています。

```
HTTPメソッド 'ユーザーが指定するURL', to: 'コントローラー名#アクション名'
```

これが基本的な書き方なので、ぜひ頭に入れておいてください。また、ここで出てきた`HTTPメソッド`には以下のような種類があります。

|HTTPメソッド|役割|
|---|---|
|POST|データの登録|
|GET|データの一覧表示|
|PATCH/PUT|データの更新|
|DELETE|データの削除|

これらを使い分けて、今後、「データの一覧表示・登録・更新・削除」というWebアプリケーションの基本的な機能を実装していくので頭の片隅に置いといてください。ちなみに、このような一連の処理を`CRUD処理`といいます。こちらを先ほどのHTTPメソッドと合わせてまとめると、以下のようになります。

|HTTPメソッド|CRUDの種類|役割|
|---|---|---|---|
|POST|Create|登録|
|GET|Read|表示|
|PATCH/PUT|Update|更新|
|DELETE|Delete|削除|

# コントローラの作成
先ほど、ルートの設定の部分で以下のように記述しました。

```ruby
Rails.application.routes.draw do
  # get ‘/homes’がHTTPメソッドとURL、to: ‘homes#index’がコントローラの名前とアクション
  get “/homes”, to: “homes#index”
end
```

このとき「ユーザーが`http://localhost:3000/homes`というように`/homes`を指定してアクセスすると、`homes`コントローラの`index`アクションに処理が振り分けられる」ということになります。そのため、次は`homes`コントローラを作成し、その中に`index`アクションを追加しましょう。

まずは、コントローラを作成するために以下のコマンドをターミナルで実行します。（`rails s`でサーバーを立ち上げている場合は`control + c`でサーバーを停止してから行ってください：commandとcontrolの打ち間違いに注意！！）

```
rails g controller homes
```

実行結果（複数のディレクトリやファイルが作成される）

```
Running via Spring preloader in process 1462
      create  app/controllers/homes_controller.rb
      invoke  erb
      create    app/views/homes
      invoke  test_unit
      create    test/controllers/homes_controller_test.rb
      invoke  helper
      create    app/helpers/homes_helper.rb
      invoke    test_unit
      invoke  assets
      invoke    coffee
      create      app/assets/javascripts/homes.coffee
      invoke    scss
      create      app/assets/stylesheets/homes.scss
```

`rails g controller homes`のコードの`homes`の部分には、自分が作成したいコントローラ名を入力することで、自分が作りたい任意の名前でコントローラを作成することができます。例えば、`users`コントローラを作成したいときは以下のコマンドで作成できます。

```
rails g controller users
```

また、Railsのルールとして、コントローラ名(`homes`や`users`の部分)は基本的に複数形にすることが推奨されています。

それでは次に、コントローラのアクションを定義していきましょう。先ほど`rails g controller homes`を実行しましたが、そうすると以下の場所に`homes_controller.rb`というファイルができています。

```
app/controller/homes_controller.rb
```

コントローラが作成できたら、次にアクションを追加します。ルートの設定の部分で`homes`コントローラに対して`index`アクションを指定したので、ファイルの中に`index`アクションを定義しましょう。こちらは、Rubyのメソッドを定義するときと同じ記述で定義できます。

```rb
class HomesController < ApplicationController
  # indexアクションを定義
  def index

  end
end
```

上の記述がアクションの基本的な設定方法になります。基本的な構成として`def`と`end`で囲み、ルートの指定に対応するアクション名を定義してあげます。

```
def アクション名

end
```

# ビューの作成
コントローラのアクションが定義できたら、そのアクションに対応するビューを作成しましょう。ビューファイルは以下の場所で管理されています。

```
app/views
```

その中に、デフォルトで`layouts`というディレクトリが存在します。また、そのほかにも`homes`というディレクトリが存在するかと思います。このディレクトリは、先ほど`rails g controller homes`というコマンドを実行した時に作成されたものです。つまり、コントローラを作成すると、それに対応するビューのディレクトリも一緒に作成されるということです。

ビューファイルは、コントローラのアクションに対応する名前にします。今回のサンプルであれば、`homes`コントローラの`index`アクションに対応するビューファイルを作成するので、`app/views/homes`の中に`index.html.erb`というファイルを作成します。

コントローラに関してはターミナルからコマンドで作成しましたが、ビューは`テキストエディタから直接`ファイルを作成しましょう。テキストエディタ上にて`homes`ディレクトリを右クリック（Macだと2本指でタップ）し、`New File(テキストエディタによって表示が異なる)`を選択してファイルを作成し、`名前をつけて保存`で`index.html.erb`と入力して保存をしましょう。

```
index.html.erb
```

上の記述の中で、`.html.erb`の部分は拡張子 となります。これはRails特有の拡張子で、`erb`は`embedded ruby`という意味になるます。`embedded`という単語が「埋め込まれた」という意味なので、「HTMLの中にrubyを埋め込むことができる」ということになります。

では、さっそく作成したビューファイルにHTMLの`h1`タグで`Hello World`を表示するコードを書いてみましょう。

```
<h1>Hello World!!</h1>
```

# URLを指定して画面の表示
HTMLを書いたら、ターミナルからサーバーを立ち上げ、実際に画面に`Hello World!!`が表示されるか確かめます。サーバーを立ち上げるには、以下のコマンドを実行します。

```
rails s
```

コマンドを実行したら、ルーティングで設定した`/users`にブラウザからアクセスしましょう。その際、デフォルトのURLである`http://localhost:3000`に`/homes`を加えてリクエストすることでルーティングで定義した`get '/homes', to: 'homes#index'`が指定され、`homes`コントローラの`index`アクションを介して`/views/homes/index.html.erb`にアクセスできます。その後、`/views/homes/index.html.erb`に記述した`Hello World!!`がブラウザに表示されれば成功です。

[http://localhost:3000/homes](http://localhost:3000/homes)

# コントローラからのデータの受け渡し
先ほど、`homes`コントローラの`index`アクションを定義しましたが、現在はそのアクションを全く活用していません。しかし、実際にアプリを作成するときには、コントローラを介して「モデルから取得したデータをビューに渡す」ということをよくやります。

そのため、まずは「コントローラからビューにデータを渡す」ということをやってみましょう。まずは、`homes`コントローラの`index`アクションにてインスタンス変数を定義します。その中に、`Hello World!!`という文字列を格納してみましょう。


```rb
class HomesController < ApplicationController
  def index
    @greet = ""Hello World!!""
  end
end
```

こちらの記述が終わったら、一旦、`/views/homes/index.html.erb`の記述を全て削除し、以下のように記述してみてください。

```
<%= @greet %>
```

ビューの記述が終わったら、ブラウザから`http://localhost:3000/homes`にアクセスしてみましょう。その後、画面に「Hello World!!」と表示されれば「コントローラからビューへのデータの受け渡し」が成功しています。

# モデルからコントローラへのデータの受け渡し
次に、「モデルからコントローラへのデータの受け渡し」をしてみましょう。Railsアプリの開発においては、MVCのアーキテクチャを理解することが大切だとお伝えしたのですが、今の状態ではM（モデル）に一切触れておらず、いまいちモデルの存在意義が理解しにくいかと思います。そのため、新しくモデルを定義し、それをコントローラで使用することによってモデルの基本的な活用方法について学んでいきましょう。

まずは、`/app/models`に`user.rb`モデルを作成します。その中に、`User`クラスを定義し、個人情報に関するパラメータや自己紹介を行うメソッドを定義してみましょう。こちらのコードに関しては、ご自身の情報を自由に入れていただいて結構です。せっかくなので、ご自身で色々考えて設定したいパラメータやメソッドを自由に定義してみてください。

```rb
class User
  def initialize
    @first_name = ""Yoshito""
    @last_name = ""Kamizato""
    @birthday = ""1987/4/10""
    @age = 32
    @birthplace = ""Okinawa/Nago""
    @hobby = ""Video Game""
  end

  def introduce
    <<~EOS

    私の名前は#{@first_name + @last_name}です。
    誕生日は#{@birthday}で、年齢は#{@age}歳。
    出身地は#{@birthplace}で、趣味は#{@hobby}です。

    EOS
  end
end
```

`User`モデルの定義が終わったら、そちらを`homes`コントローラから`User`モデルをインスタンス化し、`introduce`メソッドを実行してその結果を`@my_introduce`に格納してみましょう。

```rb
class HomesController < ApplicationController
  def index
    @greet = ""Hello World!!""

    # Userモデルをインスタンス化
    user = User.new
    # introduceメソッドを実行
    @my_introduce = user.introduce
  end
end
```

これで、`Homes`コントローラから`User`モデルのメソッドを使用し、データを受け取ってビューに渡す準備が整いました。それではさっそく、`@my_introduce`に格納したデータをビューで表示してみましょう。`/views/homes/index.html.erb`のを以下のように編集してみてください。

```
<%= @greet %>
<!-- @my_introduceのデータを表示 -->
<%= @my_introduce %>
```

そうすると、以下のようにデータがうまく表示されるかと思います。

```
Hello World!! 私の名前はYoshitoKamizatoです。 誕生日は1987/4/10で、年齢は32歳。 出身地はOkinawa/Nagoで、趣味はVideo Gameです。
```

しかし、ここで予期せぬ結果になってしまいます。それは、`User`モデルで定義した`introduce`メソッドのヒアドキュメントの改行が反映されていないことです。このままではとてもみづらいので、改善していきましょう。今回のように期待した結果と異なるとき、現場では自分で色々ググってみて情報を集めながら解決していくので、その練習として「rails　改行　反映」などのキーワードを入れて検索してみてください。そうすると、ヒントがかかれてある記事がヒットするかと思います。

今回の場合、ヒアドキュメントの改行を反映させるためには以下のようにビューの記述を変更します。

```
<%= @greet %>
<!-- simple_formatで@my_introduceを囲む -->
<%= simple_format(@my_introduce) %>
```

表示結果

```
Hello World!!

私の名前はYoshitoKamizatoです。
誕生日は1987/4/10で、年齢は32歳。
出身地はOkinawa/Nagoで、趣味はVideo Gameです。
```

無事に改行が反映されましたね。`simple_format`はヘルパーメソッドと呼ばれるものの１つで、`\n`や`\r\n`などの改行コードを`<br />`という改行をさせるためのHTMLタグに変換してくれます。その結果、ヒアドキュメントの改行がきちんと反映された状態になります。

このようにRailsでは、「ルーティングでコントローラのアクションを指定し、コントローラがモデルやビューに処理を振り分け、ユーザが必要としているデータを提供する」ということを行います。

その中でも、Rubyの基礎学習が活きるのはモデルでロジックを書く部分です。ここで、今まで学んできた基礎知識が一気に役立つようになってきます。今後転職活動を進める上でも「モデルにロジックを書いているかどうか」はシビアに確認される部分になりますので、オリジナルのアプリを作成する際にも、ぜひそれを意識して柔軟にご自身が実現したい処理をモデルに定義してみてください。色々遊びながら、ロジックを書くことにも慣れておくといいですね。

# 最後に
これで今回作成するアプリが完成したわけですが、最後にもう一つ、Railsを理解する上で重要な部分をご説明します。

実は、Railsでは`views/layouts`の中に`application.html.erb`というファイルがあり、それがWeb上に画面を表示する際のテンプレートとなっています。`application.html.erb`は、アプリを作成した直後は以下のような状態になっています。

```
<!DOCTYPE html>
<html>
<head>
  <title>ControllerTest</title>
  <%= stylesheet_link_tag    'application', media: 'all', 'data-turbolinks-track' => true %>
  <%= javascript_include_tag 'application', 'data-turbolinks-track' => true %>
  <%= csrf_meta_tags %>
</head>
<body>

<%= yield %>

</body>
</html>
```

この`application.html.erb`のコードの中で注目していただきたいのが、`<%= yield %>`の部分です。実は、先ほど`Hello World!!`を表示した際、この`<%= yield %>`の部分が`/views/homes/index.html.erb`の内容と置き換わって表示されていたのです。つまり、イメージとしては以下のようになります。

```
<!DOCTYPE html>
<html>
<head>
  <title>ControllerTest</title>
  <%= stylesheet_link_tag    'application', media: 'all', 'data-turbolinks-track' => true %>
  <%= javascript_include_tag 'application', 'data-turbolinks-track' => true %>
  <%= csrf_meta_tags %>
</head>
<body>

<!-- yieldがindex.html.erbの内容と置き換わる -->
<%= @greet %>
<%= simple_format(@my_introduce) %>

</body>
</html>
```

# まとめ
今回は、「Hello World!!」の表示を通して以下の流れでユーザーのリクエストが処理されることを学びました。

1. ユーザーがリクエストを送信する（ブラウザからURLにアクセスする）
2. ルートによりURLに対応するコントローラのアクションに処理が振り分けられる
3. コントローラのアクション内で必要なデータをモデルとやりとりする
4. コントローラのアクションに対応するビューが表示される
 - ただし対応するビューが直接表示されるのではなく`layout`の`yield`がユーザーのリクエストに対応したビューと置き換わる

最初は混乱するかも知れませんが、ルート・コントローラ・モデル・ビューの実装を繰り返したり、サンプルコードをもとに自分なりにカスタマイズしてコードを書いていくうちに理解できるようになっていきます。

試しに、`index.html.erb`とは別に、`new.html.erb`を作成し、そのビューファイルが表示されるようにルート・コントローラ・ビューを編集して見ましょう。それに挑戦してみると、より理解が深まるかと思います。

今回はこれで以上です、お疲れ様でした！"
Ruby on Rails,Ruby on Rails アプリのデプロイ,"`Heroku` は `PaaS` (Platform as a Service) の一つで，簡単にRailsアプリを公開できるサービスです。

次の順序で解説していきましょう。

- Heroku の新規登録・Heroku CLIのインストール
- 公開するアプリ・Procfileの準備
- アプリの公開手順
- Papertrail の設定
- パイプライン
  - ステージング環境の準備
  - パイプライン構築
  - 自動デプロイ設定

## Heroku 新規登録

まず，Herokuの新規登録を行いましょう。

- [公式: 新規登録](https://signup.heroku.com/jp)

- [ダッシュボード](https://dashboard.heroku.com/apps) をお気に入り登録しておくことをお勧めします

## クレジットカードの登録

- [公式: Heroku を使って無料でアプリを開発](https://jp.heroku.com/free)

新規登録だけでも無料である程度 Heroku のサービスを使用できますが，クレジットカード登録まで行うことで，無料の dyno 時間（アプリの起動可能時間の合計）が  550時間/月 から 1000時間/月 に増え，`papertrail`など便利な`addon`を追加できるようになります。

- [ダッシュボード](https://dashboard.heroku.com/apps) 右上のアイコンをクリックし，`Account Settings`をクリック

- `Billing`タブをクリックし，`Add Credit Card` をクリック

- 住所・クレジットカードなどを登録
  - 住所の英語表記が分からない場合は，[こちらのサイト](http://www.happyimport.info/how/address.php)などで書き方を調べて下さい。

## Heroku CLI

ターミナルで `heroku` コマンドを実行できるようにしましょう。

- [参考: The Heroku CLI](https://devcenter.heroku.com/articles/heroku-cli)

```zsh:ターミナル
heroku -v
```

でバージョンが表示されない場合は，次のコマンドを実行しましょう。

```zsh:ターミナル
brew tap heroku/brew && brew install heroku
heroku login
```

`Heroku` のメールアドレスとパスワードを入力すれば準備完了です。


## アプリの準備

Herokuに公開したいアプリを準備して下さい。ただし，以下に注意しましょう。

- [トップページ](http://localhost:3000/)を設定していること
   - `root 'コントローラ名#アクション名'` を追加すればよい（[Railsガイド](https://railsguides.jp/routing.html#root%E3%82%92%E4%BD%BF%E3%81%86)参照）
- （本番環境の）データベースが `PostgreSQL` に設定されていること
   - `config/database.yml` の `adapter` を確認
- 公開したいアプリをGitのmasterブランチにコミット済みであること
   - コミットをしていない場合はコミットしておきましょう
   - ブランチを切ってプルリクを出している場合はGitHubでmasterにマージしてプルしておきましょう
- （GitHub連携，自動デプロイを使用したい場合）GitHubのリポジトリを作成してプッシュしていること

Herokuのデフォルトのデータベースは `PostgreSQL` です。

`MySQL` に対応する方法はもありますが，手続きが増えるので特段の理由がなければお勧めしません。

必要があれば「データベースの変更手順」も教材にありますので，参考にして変更して下さい。

## マイグレーションの自動化

次の`Procfile`を作成しておくと，Herokuにデプロイする度に自動的にマイグレーションが行われます。マイグレーションは忘れやすいので，設定をお勧めします。

（単純にmasterにコミットする手順で記載していますが，もちろんブランチを切って対応するのが理想です）

```zsh:ターミナル
# アプリのルートディレクトリで実行
touch Procfile
echo ""release: bin/rails db:migrate"" >> Procfile
git add Procfile
git commit -m ""Heroku 用の Procfile を作成""
```

`Procfile`が作成され，その中に`release: bin/rails db:migrate`が書き込まれていることを確認して下さい。

---

### 【補足】アプリが準備できていない場合

もし，公開したいアプリがまだ無い場合や，上記の内容が分からない場合は，以下の手順で簡単なメッセージ投稿アプリを作成して下さい。

次は丸ごとコピペしてターミナルで実行してもOKです。

```zsh:ターミナル
cd ~/desktop
rails new message_crud_app -d postgresql
cd message_crud_app
git add .
git commit -m ""init""
touch Procfile
echo ""release: bin/rails db:migrate"" >> Procfile
git add Procfile
git commit -m ""Heroku 用の Procfile を作成""
rails g scaffold Message content:string
rails db:migrate:reset
```

トップページを設定

```config/routes.rb
Rails.application.routes.draw do
  root ""messages#index""
  resources :messages
end
```

サーバーを起動して動作確認

```zsh:ターミナル
rails s
```

GitHubにリポジトリを作成し，次の手順でプッシュ

```zsh:ターミナル
git remote add origin リポジトリURL
git add .
git commit -m ""scaffold コマンドでメッセージ投稿機能を実装""
git push origin master
```

---

## デプロイの準備

- [参考: Deploying with Git](https://devcenter.heroku.com/articles/git)

Herokuでアプリを公開するには，まず `Herokuアプリ` を作成しておく必要があります。次を実行しましょう。

```zsh:ターミナル
# アプリのルートディレクトリで実行
heroku create アプリ名
```

【注意】

- 「アプリ名」は，小文字・数字・ダッシュ`-`のみ使用可能です。さらに，世界で誰も使用していないものである必要があります。
- 「アプリ名」を省略した場合は，自動で決まります
- ここで設定した「アプリ名」は `URL` に使用されます

【参考】

このコマンドを実行したとき，自動的にリモート名`heroku`が追加されます。`git remote -v`で確認をしてみましょう。

## Herokuにデプロイ

`Heroku` にRailsアプリをデプロイ（ネット上に公開）する方法は複数あります。

最も単純な方法は，GitHubにプッシュする際と同様のコマンドを実行する方法です。

```zsh:ターミナル
# アプリのルートディレクトリで実行
git push heroku master
```

Herokuアプリの更新をしたい場合も同様です。（コミットのし忘れに注意しましょう）

デプロイが完了したら，次のコマンドを実行しましょう。ブラウザを開き，アプリのトップページにアクセスするコマンドです。

```
heroku open
```

## Papertrail

`Papertrail`は`Heroku`アプリが出力するログを管理するアドオンです。ログの確認は，バグの原因追求をする上で重要になります。ログはターミナルから確認することも可能ですが，とても便利ですので是非追加しておきましょう。

### Papertrailの導入方法

`Heroku`アプリの作成後であることを前提とします。

ターミナルから次を実行すれば`Papertrail`を導入できます。

```zsh:ターミナル
# アプリのルートディレクトリで実行
heroku addons:create papertrail:choklad
```

### Papertrailの起動方法（ターミナル）

ターミナルから次のコマンドを実行すると`Papertrail`をブラウザで開くことができます。

```zsh:ターミナル
heroku addons:open papertrail
```

### Papertrailの起動方法（ブラウザ）

- [ダッシュボード](https://dashboard.heroku.com/apps) にアクセス

- アプリを選択

- `Resources`タブの`Add-ons`にある`Papertrail`をクリック

## パイプライン

以降はおまけの内容ですが，1度は是非試しておくことをお勧めします。

- 公式
  - https://devcenter.heroku.com/articles/pipelines

`Heroku`では「ステージング環境」を簡単に追加することができる機能です。

「ステージング環境」とは，「本番環境」と同じ条件で動作確認をするための環境です。

「開発環境」では動作していたものが「本番環境」では動作しない，ということはよくあります。「バージョンアップしたら稼働中のサービスが使えなくなった」ということがあっては大変です。そのため，実運用のアプリでは必ず「ステージング環境」を準備します。

ここでは，すでに`Heroku`で「本番環境」を準備している前提で，新たに「ステージング環境」を用意し，パイプラインを構築していきましょう。

### ステージング環境の準備

- リモート名`heroku`が現在「本番環境」で設定されているため，消去します。

```zsh:ターミナル
git remote rm heroku
```

- 新しく，ステージング環境を作成しましょう。
  - こだわりがなければ，ステージング環境のアプリ名は「アプリ名-staging」とするとよいでしょう
  - これで`git push heroku master`は「ステージング環境」にデプロイするコマンドとなります

```zsh:ターミナル
heroku create アプリ名-staging

# 例
heroku create sample-app-staging
```

- `Papertrail`も導入しておきましょう
  - 今後 `heroku` コマンドを実行する際は`-a Herokuのアプリ名`のオプションをつけるようにして下さい

```zsh:ターミナル
heroku addons:create papertrail -a アプリ名-staging
```

### パイプラインの構築

- [ダッシュボード](https://dashboard.heroku.com/apps) にアクセス

- 右上の「New」をクリックし「Create new pipeline」を選択しましょう。

【注意】初めての場合は，「Connect to GitHub」ボタンをクリックして認証を行い，ブラウザを更新して下さい。

- こだわりがなければ，「Pipeline name」は「アプリ名-pipeline」にしておくとよいでしょう。

- （自動デプロイ設定が必要なら）「Connect to GitHub」の項目で，GitHubのリポジトリを検索し `Connect` しておきましょう。

- 「Create Pipeline」ボタンをクリック

- `STAGING` に「ステージング環境のアプリ」， `PRODUCTION` に「本番環境のアプリ」を選択

これで準備が完了です。

【参考】 次を実行すれば，パイプラインをブラウザで開くことができます。

```zsh:ターミナル
heroku pipelines:open パイブライン名
```

【補足】許可なく他人のGitHubリポジトリをGitHub連携の対象にすることはできません。`Collaborators`に招待し，承認されれば選択できるようになります。


### 自動デプロイの設定

次の設定を行うことで `GitHub` の `master` ブランチにプッシュもしくはマージした際に，自動的に「ステージング環境」にデプロイすることができます。

- パイプラインのページで `STAGING` のアプリを選択

- `Deploy`タブをクリックし，`Automatic deploys`の `Enable Automatic Deploys` をクリック

これで設定は完了です。

試しに，アプリに何らかの変更を行いコミットをした上で

```zsh:ターミナル
git push origin master
heroku pipelines:open パイブライン名
```

を実行してみましょう。GitHubにプッシュしただけで，「ステージング環境」にデプロイ作業が行われていることがパイプラインで確認できるでしょう。

### パイプライン構築後について

herokuコマンドを実行する際は，`-a アプリ名`のオプションを付けて，「ステージング環境」か「本番環境」のどちらのアプリに対してなのかを指定するようにして下さい。

```
# 例
heroku run rails c -a アプリ名-staging
heroku open -a アプリ名
```

今後はまず「ステージング環境」にデプロイし，動作を確認するようにしましょう。確認後に本番環境に `プロモート` しましょう。

- `STAGING` にある `Promote to production` ボタンをクリックすると，`プロモート` （現在の「ステージング環境」を「本番環境」に反映）することができます

- デプロイは，Herokuのサイトから実行することも可能です
  - パイプラインの `STAGING` の右下にあるボタンをクリックし，`Deploy a branch...`を選択し，ブランチを確認した上で`Deploy`ボタンをクリック


【補足】

一度も本番環境に直接プッシュしていない状態でプロモートを行うと，PostgreSQLのデータベースが存在しないというエラーが出ることがあるようです。

その場合は，直接データベースを作成して下さい。

```
heroku addons:create heroku-postgresql -a 本番環境のアプリ名
```

## Herokuの代表的なコマンド一覧

`heroku` コマンドの最後に `-a アプリ名` を付けることで，Herokuアプリ名を指定して実行できます。ステージング環境を用意した場合は必須です。

（アプリ名を忘れた場合は `heroku list` で確認）

コマンド | 内容
--- | ---
git push heroku master | masterブランチをHerokuにデプロイ
git push heroku ブランチ名:master | master以外のブランチをHerokuにデプロイ
git push heroku develop:master | developブランチをHerokuにデプロイ
heroku create アプリ名 | Herokuアプリを作成
heroku destroy | Herokuアプリを削除
heroku open | Herokuアプリをブラウザで開く
heroku logs -t | ログを確認
heroku run rails c | コンソールを起動
heroku run rails db:migrate | マイグレーションを実行
heroku run rails db:seed | seeds.rbを実行
heroku addons:create アドオン名 | アドオンを追加
heroku addons:create papertrail | Papertrailを追加
heroku addons:create heroku-postgresql | PostgreSQLを追加
heroku addons:open papertrail | Papertrailをブラウザで開く
heroku pipelines:open パイブライン名 | パイプラインをブラウザで開く
heroku list | Herokuのアプリ一覧を表示
heroku restart | 再起動
heroku maintenance:on | メンテナンスモードにする
heroku maintenance:off | メンテナンスモードを解除
heroku pg:psql | PostgreSQLにアクセス
heroku config:set 環境変数のキー=環境変数の値 | 環境変数を追加
heroku pg:reset | データベースを削除し作り直す"
Ruby on Rails,データベースの変更,"次の2つのファイルを修正することで，Railsアプリのデータベースを変更できます。

- Gemfile
- config/database.yml

ここでは，「開発・テスト・本番全ての環境」のデータベースを変更する前提で，手順を解説します。

なお，各種設定はデフォルトのままですので，ユーザー名やパスワードを変更している場合や，AWSなどにデプロイする場合はさらなる修正が必要です。

データベースを変更する前に，現在のデータベースを削除しておくことをお勧めします。

```zsh:ターミナル
rails db:drop
```

## `PostgreSQL` に変更する場合

Gemfileに次のいずれかが含まれていれば，その行を削除しましょう。

```none:Gemfile
gem 'sqlite3'
gem 'mysql2'
```

代わりに，次を追加して下さい。

```none:Gemfile
gem 'pg', '>= 0.18', '< 2.0'
```

そして，`config/database.yml` を次に置き換えて下さい。

ただし，`my_app`, `MY_APP` は `アプリ名` に変更しておくことをお勧めします。

```config/database.yml
default: &default
  adapter: postgresql
  encoding: unicode
  pool: <%= ENV.fetch(""RAILS_MAX_THREADS"") { 5 } %>

development:
  <<: *default
  database: my_app_development

test:
  <<: *default
  database: my_app_test

production:
  <<: *default
  database: my_app_production
  username: my_app
  password: <%= ENV['MY_APP_DATABASE_PASSWORD'] %>
```

## `MySQL` に変更する場合

Gemfileに次のいずれかが含まれていれば，その行を削除しましょう。

```none:Gemfile
gem 'sqlite3'
gem 'pg'
```

代わりに，次を追加して下さい。

```none:Gemfile
gem 'mysql2', '>= 0.4.4'
```

そして，`config/database.yml` を次に置き換えて下さい。

ただし，`my_app`, `MY_APP` は `アプリ名` に変更しておくことをお勧めします。

```
default: &default
  adapter: mysql2
  encoding: utf8mb4
  pool: <%= ENV.fetch(""RAILS_MAX_THREADS"") { 5 } %>
  username: root
  password:
  socket: /tmp/mysql.sock

development:
  <<: *default
  database: my_app_development

test:
  <<: *default
  database: my_app_test

production:
  <<: *default
  database: my_app_production
  username: my_app
  password: <%= ENV['MY_APP_DATABASE_PASSWORD'] %>
```"
Ruby on Rails,SQLの基礎,"SQLとはデータベース言語で、主にデータベースの定義、操作をする目的で使用される言語です。従来のプログラミング言語とは違い、アプリケーションを作成する言語ではありません。

SQLを学習することでデータベース・テーブル・カラム・レコード・フィールド・データ型といった用語の意味やデータベースの設計や構造の概念を理解し、コマンドを操作することでデータを取得、更新、追加や削除をすることが出来るようになります。

ここでは、

- SQLの用語(基本)

- SQLをダウンロード（Mac/PostgreSQL）

- SQLコマンド（クエリ）

これらを紹介していきたいと思います。

## 1. SQL用語（基本）

### 1-1. データベース

Oracle、SQLServer、MySQL、PostgreSQL、Microsoft Accessといったソフトウェアを使用した、データを「蓄積」「保存」、「利用」出来るものになります。

また、よく耳にする「RDBMS」と「RDB」はそれぞれ以下のような意味と役割を持っています。

- RDBMS：リレーショナルデータベースマネジメントシステム(RDBを管理するシステムで、MySQLやPostgrSQLなどを指す）

- RDB：リレーショナルデータベース（データベースの種類の１つであり、テーブル同士を紐付けて管理するデータベース）


### 1-2. テーブル

行（レコード）と列（カラム）によって構成される、データの一覧を保存することが出来る「表（テーブル）」。Excelで作成した表がイメージし易いと思います。

### 1-3. レコード

テーブル内の各カラム毎に取得できる、一組の値。又は単位。Excelで作成した表でイメージすると「行」のようなものです。

### 1-4. カラム

テーブル内の各レコードのフィールドの値を並べたデータの集合。Excelで作成した表でイメージすると「列」のようなものです。

### 1-5. フィールド

テーブル内のレコードを構成する要素。Excelで作成した表でイメージすると「セル」のようなものです。

### 1-6. クエリ

クエリとはSQLを用いた命令文。SQLクエリ、SQL文と呼ばれています。

```sql
$ SELECT * FROM users WHERE ID=2
```

### 1-7. データ型

テーブルを作成する時に、それぞれのカラムに指定した形式のデータしか、入力できないように設定する必要があります。
この時に設定するデータの形式をデータ型と呼びます。以下にデータ型の一部を載せておきます。


|データ型の種類|データ型|
|---|---|
|整数型|int型、bit型|
|浮動小数点型|float型|
|通貨型|money型|
|日付型|date型、datetime型|
|文字列型|varchar型、text型|
|バイナリ型|binary型|

## 2. SQLの基本操作（Mac/PostgreSQL）

### 2-1. PostgreSQLのダウンロード・インストール

ターミナルから次を実行して下さい。（ `$` は入力しないで下さい）

```
$ psql --version
```

バージョンの確認ができれば，PostgreSQLのインストールは完了しています。まだの方は以下を実行して下さい。

```
$ brew update
$ brew install postgresql
$ brew services start postgresql
```

次のコマンドでバージョンの確認ができれば，PostgreSQLのインストールはOKです。

```
$ psql --version
```
バージョンの確認ができればPostgreSQLのインストールは完了です。




```
$ psql --version
```

### 2-2. bash_profileへパスを通す

※ shell が `zsh` の方は，`~/.bash_profile` を `~/.zshrc` に読み替えて下さい。

以下のコマンドでパスを通します。

```
$ echo 'export PGDATA=/usr/local/var/postgres' >> ~/.bash_profile
```

以下のコマンドで shell を更新します。（うまく行かない場合はターミナルを再起動させてください）

```
$ source ~/.bash_profile
```

### 2-3. データベースの起動状態を確認する


```
$ pg_ctl status
```

`pg_ctl: server is running (PID: 26644)`のように表示されれば接続は正常に行われています。
もし、`pg_ctl: no server running`と表示されるようであれば以下のコマンドを入力後、再度確認してみて下さい。


```
$ pg_ctl start
```


### 2-4. データベースを作成、一覧を表示、接続

`createdb`を入力し、続けて作成したいデータベース名を入力します。ここでは`database-sample`とします。

```
$ createdb database-sample
```

なお、以下のコマンドでこれまで作成したデータベースの一覧を表示します。

```
$ psql -l
```

それでは作成したデータベースへ接続しましょう。先程のデータベース名を使って接続します。

```
$ psql database-sample
```

入力後にターミナルの表示が`database-sample=#`と表示されれば接続は完了です。

### 2-5. テーブルの作成

データベースが作成出来たらテーブルを作成しましょう。ここで必要なものはテーブル名とカラム名とカラム毎のデータ型です。

```
$ CREATE TABLE 任意のテーブル名（カラム名1 データ型,カラム名2 データ型....）;
```

それでは以下を入力して下さい。（最後の `;` を忘れないように注意して下さい）

```sql
$ CREATE TABLE sampletable(id integer,name varchar(20),age integer);
```

`CREATE TABLE`と表示されればテーブルが作成されました。確認してみましょう。

```
$ \dt
```

次のように表示されていればOKです。

```
+--------+-------------+-------+-----------------+
| Schema |    Name     | Type  |      Owner      |
+--------+-------------+-------+-----------------+
| public | sampletable | table | ログインユーザー名 |
+--------+-------------+-------+-----------------+
```

### 2-6. テーブルにデータを追加

テーブルが作成出来ましたが、このままだと何もデータが入っていないのでデータを挿入していきます。一つずつ入れるのは大変なので今回は10レコード分をまとめて挿入します。

```sql
$ INSERT INTO sampletable (id, name, age) VALUES
(1, 'suzuki', 20),
(2, 'satou', 18),
(3, 'tanaka', 40),
(4, 'saitou', 33),
(5, 'yamamoto', 29),
(6, 'naitou', 50),
(7, 'okada', 45),
(8, 'higashi', 16),
(9, 'sasaki', 31),
(10, 'kanazawa', 30);
```

`INSERT 0 10`と表示されたらデータが挿入できています。

では、次からこのデータベースを操作していきます。

## 3. SQLコマンド（クエリ）

ここではSQLコマンド（クエリ）を一部紹介します。今回の内容はいずれも基本的な内容ではありますが、比較的使用頻度が高いものです。また、サブクエリに関しては記述する内容次第ですが、基本的なコマンドで代用出来たり、多段で複雑なサブクエリは可読性も落ちることに注意して利用してください。

### 3-1. SELECT

データベースからデータを検索するためのコマンドで、これ単体では機能しません。クエリはコマンドを複数組み合わせて使用します。例えば以下のクエリは`sampletable`から全ての要素（カラム）を取得するものになります。

```sql
$ SELECT * FROM sampletable;
```

```
 id |   name   | age
----+----------+-----
  1 | suzuki   |  20
  2 | satou    |  18
  3 | tanaka   |  40
  4 | saitou   |  33
  5 | yamamoto |  29
  6 | naitou   |  50
  7 | okada    |  45
  8 | higashi  |  16
  9 | sasaki   |  31
 10 | kanazawa |  30
```

`SELECT`に続いて書かれている`*`は「全ての要素」を指します。今度は要素を指定してみます。

```sql
$ SELECT id,name FROM sampletable;
```

```
 id |   name
----+----------
  1 | suzuki
  2 | satou
  3 | tanaka
  4 | saitou
  5 | yamamoto
  6 | naitou
  7 | okada
  8 | higashi
  9 | sasaki
 10 | kanazawa
```

`age`の要素が取得出来ませんでした。しかしこれは直前のクエリで指定した要素は`id`と`name`だったからですね。

### 3-2. FROM

使用するテーブルを指します。先程のクエリで記述しましたが、接続しているデータベース内のテーブルを指定することで、`SELECT` にて指定する要素（カラム）を出力させることが出来ます。

### 3-3. WHERE

テーブルデータの検索条件を指定するためのコマンドです。条件式は演算子を用いて指定します。
次のクエリを実行して下さい。

```sql
$ SELECT * FROM sampletable WHERE age > 30;
```

```
 id |  name   | age
----+---------+-----
  3 | tanaka  |  40
  4 | saitou  |  33
  6 | naitou  |  50
  7 | okada   |  45
  9 | sasaki  |  31
```

演算子を用いて`age`の要素から`30を超える`値のレコードを出力させました。
さらに、応用として以下のクエリを実行してみます。

### 3-4. AND(左辺かつ右辺の条件に当てはまるもの)

```sql
$ SELECT * FROM sampletable WHERE age > 30 AND age %2=0;
```

```
 id |  name  | age
----+--------+-----
  3 | tanaka |  40
  6 | naitou |  50
```

これは`AND`演算子を用いて、先程の`age`の要素から`30を超える`値かつ、年齢が偶数のレコードを出力させました。ANDも含め、以下のような演算子があります。それぞれのクエリを実行してみましょう。

| 演算子       　　　  | 意味　　　　　　　　　    |
|:-------------------|----------------------:|
| AND                |          左辺 かつ 右辺 |
| OR                 |         左辺 または 右辺 |
| IN                 |           いずれかを含む |
| LIKE               | 文字列の1部を含むパターン |
| AS                 | 列やテーブルに別名をつける |
| BETWEEN a AND b    |           a 以上 b 以下 |


### 3-5. OR(左辺または右辺に当てはまるもの)

```sql
$ SELECT * FROM sampletable WHERE id=2 or name='satou';
```

```
 id | name  | age
----+-------+-----
  2 | satou |  18
```

### 3-6. IN(指定するいずれかを含むもの)

```sql
$ SELECT * FROM sampletable WHERE name IN ('yamamoto','saitou');
```

```
 id |   name   | age
----+----------+-----
  4 | saitou   |  33
  5 | yamamoto |  29
```

### 3-7. LIKE(文字列の1部を含むもの)

```sql
$ SELECT * FROM sampletable WHERE name LIKE '%to%';
```

```
 id |   name   | age
----+----------+-----
  2 | satou    |  18
  4 | saitou   |  33
  5 | yamamoto |  29
  6 | naitou   |  50
```

### 3-8. as(列やテーブルに別名をつける)

```sql
$ SELECT id AS no, name AS 名前 FROM sampletable;
```

```
 no |   名前
----+----------
  1 | suzuki
  2 | satou
  3 | tanaka
  4 | saitou
  5 | yamamoto
  6 | naitou
  7 | okada
  8 | higashi
  9 | sasaki
 10 | kanazawa
```

### 3-9. BETWEEN a AND b(a以上b以下、範囲を指定する)

```sql
$ SELECT * FROM sampletable WHERE id BETWEEN 3 AND 5;
```

```
 id |   name   | age
----+----------+-----
  3 | tanaka   |  40
  4 | saitou   |  33
  5 | yamamoto |  29
```

### 3-10. ORDER BY

`ORDER BY`はデータを表示する順番を指定することができます。データの表示を昇順にする場合は`asc`を、降順にする場合は`desc`を使用します。
テーブルの`age`を昇順に並べ替えてみます。

```sql
$ SELECT * FROM sampletable ORDER BY age asc;
```

```
 id |   name   | age
----+----------+-----
  8 | higashi  |  16
  2 | satou    |  18
  1 | suzuki   |  20
  5 | yamamoto |  29
 10 | kanazawa |  30
  9 | sasaki   |  31
  4 | saitou   |  33
  3 | tanaka   |  40
  7 | okada    |  45
  6 | naitou   |  50
```

### 3-11. CASE(条件分岐)

CASE式は条件に一致するときに返す値や条件に一致しないときに返す値を記述します。
プログラミングの条件分岐といえば`if文`がメジャーですね。

```sql
$ SELECT name,age, CASE WHEN age >= 30 THEN '30over' ELSE '30under' END AS 年齢チェック FROM sampletable;
```

```
   name   | age | 年齢チェック
----------+-----+--------------
 suzuki   |  20 | 30under
 satou    |  18 | 30under
 tanaka   |  40 | 30over
 saitou   |  33 | 30over
 yamamoto |  29 | 30under
 naitou   |  50 | 30over
 okada    |  45 | 30over
 higashi  |  16 | 30under
 sasaki   |  31 | 30over
 kanazawa |  30 | 30over
```

### 4. 最後に

データベースから出るときには以下を入力しましょう。

```
$ exit

もしくは

$ \q
```

お疲れ様でした。

SQLを勉強する為のサンプルDBが公式チュートリアルにあります。MySQLにも公式チュートリアルがありますのでそれぞれリンクを記載します。

- [MySQLのサンプルデータ](https://dev.mysql.com/doc/index-other.html)
- [PosygreSQLのサンプルデータ](https://www.postgresqltutorial.com/postgresql-sample-database/)

### 5. 一覧

- 基本構文

SQL | 内容
--- | ---
CREATE TABLE テーブル名(列名1 型1,列名2 型2); | テーブルの作成
\dt | テーブルの一覧表示
INSERT INTO テーブル名 VALUES (値1, 値2); | データの追加（元の列順で値を決定）
INSERT INTO テーブル名 (列名1, 列名2) VALUES (値1, 値2); | データの追加
SELECT * FROM テーブル名; | 全表示
SELECT 列名1, 列名2 FROM テーブル名; | 列1, 列2を全表示
UPDATE テーブル名 SET 列名 = 値 WHERE 条件; | 条件に合うデータを全て更新
DELETE FROM テーブル名 WHERE 条件; | 条件に合うデータを全て削除
SELECT * FROM テーブル名 WHERE 条件; | 条件に合うデータを全表示

- WHERE句で使用される基本の条件式

条件 | 内容
--- | ---
id = 1 | id が 1
name = 'satou' | name が satou
age < 20 | age が 20 未満
age BETWEEN 20 AND 65 | age が 20以上65以下
age > 30 AND age %2=0 | age が 30以上かつ偶数
age = 2 OR name = 'satou' |
title LIKE '%ruby%' | title に ruby が含まれている
title LIKE 'git%' | title が git から始まる
genre IN ('ruby', 'rails') | genre が ruby, rails
genre NOT IN ('ruby', 'rails') | genre が ruby, rails 以外

- SELECT文のおまけ

SQL | 内容
--- | ---
SELECT 列名 AS 別の列名 FROM テーブル名; | 列名を変更して全表示
SELECT DISTINCT 列名 FROM テーブル名; | 重複行を除外
SELECT * FROM テーブル名 ORDER BY 列名 並び順; | 並び替え（並び順を略すと昇順）
SELECT * FROM テーブル名 ORDER BY 列名1 並び順, 列名2 並び順; | 並び替え"
Ruby on Rails,CRUD処理の実装,"REST（Representational State Transfer）とは「ネットワーク上に置かれたリソース（データ）に対して表示、作成、更新、削除などの操作を行う」というアプリケーション作成における考え方です。

こちらは、Ruby on RailsでデータのCRUD処理（新規登録、一覧表示、更新、削除）を実装するにあたり、最初のうちから理解しておいた方がいいです。
ただ、一度に理解するのは難しいので、折をみて何度も繰り返し復習してみてください。

RESTは、Ruby on Railsアプリケーションを作成する上では重要な概念です。
この概念によって、効率よくデータベース上のデータを扱うことができます。

## RESTを意識したアプリケーションを作成するには
Ruby on RailsにおけるREST機能の中心を担うのがルーティングです。
Railsには、RESTに基づいたやり方でウェブアプリケーションを作成する機能があり、それにのっとって作成されたアプリを「RESTフル」といいます。

RESTの機能を利用すれば、Ruby on Railsの原則である「Don't Repeat Yourself（同じことを二度書かない）」や、「設定より規約（自由さよりもルール）」という考えを忠実に守ることができ、アプリケーションの開発や保守がより簡単になります。

Railsにおける「リソース」とは、コントローラが扱う対象となるデータのことです。
このリソースに対する、RESTフルなルーティングは以下の通りになります。

|HTTPメソッド|パス|コントローラのアクション|
|---|---|---|
|GET|/users|index|
|GET|/users/new|new|
|POST|/users|create|
|GET|/users/:id|show|
|GET|/users/:id/edit|edit|
|PATCH|/users/:id|update|
|DELETE|/users/:id|destroy|

上記の表において、`:id`の部分には任意の数字が入ります。
今はまだ用途がわからなくてもいいので、`:id`は整数を格納する変数のようなものだと理解しておきましょう。

この`:id`という記述によって、特定のデータを指定してデータの更新や削除を行うことができます。

# アプリの立ち上げ

前回アプリを作成した`rails`ディレクトリに移動し，アプリを作成しましょう。今回から，データベースを `PostgreSQL` に指定するため `-d postgresql` を付けることとします。

```
cd ~/rails
rails new crud_sample -d postgresql
```

その後，アプリのディレクトリに移動し，データベースを作成しましょう。

```
cd crud_sample
rails db:create
```

## リソースを扱うコントローラ
コントローラでは、リソースベースのルーティングに従い決まった名前のアクションを7つ定義します。
このアクションに関しては、名前ごとに役割が決められているため、そのルールにしたがって実装すれば開発効率を向上させることができます。

以下の表には、RESTフルを実現させるために必要なアクション名とその役割をまとめておきます。

|アクション名|役割|対応するルーティング|
|---|---|---|
|index|リソースの一覧表示（テーブルのレコードを一覧表示）|/users|
|new|リソースを追加するためのフォームを表示する（新規作成画面を表示する）|/users/new|
|create|リソースを作成する（テーブルにレコードを追加する）|/users|
|show|リソースの詳細を表示する（レコードの詳細を表示する）|/users/:id|
|edit|リソースの更新画面を表示する（既存のレコードのカラムを更新するための画面）|/users/:id/edit|
|update|リソースを更新する（既存のレコードのカラムを更新する）|/users/:id|
|destroy|リソースを削除する（テーブルからレコードを削除する）|/users/:id|

コントローラにアクションを追加するときは、基本的に上の表にあるアクションを追加していきます。
実際にコードを書く際は、それぞれのアクションの役割をきちんと意識して使い分けられるようにしましょう。

ではさっそく、これからCRUD処理（新規登録、一覧表示、更新、削除）の実装をしていきましょう。
これが出来れば、晴れて初心者は卒業です。
何度も何度も繰り返して、体で覚えていきましょう。

# 新規投稿機能の実装

まず，ルーティングを設定します。
以下のコードを`config`ディレクトリ配下の`routes.rb`に記述しましょう。

```config/routes.rb
Rails.application.routes.draw do
  # 以下のルーティングを定義
  get '/users/new', to: 'users#new'
end
```

次にコントローラを作成します。
今回はユーザーのデータを扱うアプリを作成するので、`users`というコントローラを作成しましょう。
ターミナルから以下のコマンドを実行してください。

```
rails g controller users
```

無事に`users`コントローラが作成できたら、`app/controllers`の中にある`users_controller`を編集しましょう。

次は`new`アクションを定義します。
`users`コントローラに以下のコードを記述しましょう。

```app/controllers/users_controller.rb
class UsersController < ApplicationController
  # 以下のアクションを追加
  def new
    @user = User.new
  end
end
```

`users`コントローラに`new`アクションが作成できたら、`views/users`ディレクトリに`new.html.erb`を作成し、以下のコードを記述しましょう。
こちらが、投稿画面のフォームになります。

```erb:app/views/users/new.html.erb
<p>新規投稿</p>
<%= form_with model: @user, url: ""/users"", method: :post, local: true do |f| %>
  <p>お名前：<%= f.text_field :name %></p>
  <p>年齢：<%= f.text_field :age %></p>
  <%= f.submit ""送信"" %>
<% end %>
```

ここで、`form_with`というヘルパーメソッドを使用しています。
（`form_for`と`form_tag`は，Rails 5.1から`form_with`に統合されています）

今回はわかりやすいように、URLの部分を以下のように記載しました。

```erb
<%= form_with model: @user, url: ""/users"", method: :post, local: true do |f| %>
```

しかし、実際は以下のように記述することもできるのです。

```erb
<%= form_with model: @user, local: true do |f| %>
```

`form_with`は紐づけられたモデルオブジェクト（今回なら`@user`）がすでにテーブルに存在しているのかどうかを判定してくれます。

もし、テーブルに同一データが存在してなければ`create`アクションに、存在していれば`update`アクションに、それぞれ自動的にルーティングを指定してくれるわけです。


では、投稿画面が作成できたら、実際にデータを登録するテーブルとそれに関連するモデルを作成しましょう。

まずは以下のコマンドを実行し、`User` モデルを作成しましょう。
今回は、ユーザーの名前と年齢を登録できるようにするため、`name`と`age`のカラムが作成されるように指定します。

```
rails g model User name:string age:integer
```

`rails g model`コマンドを実行すると、同時にマイグレーションファイルも作成されます。
このファイルは、データベースにどのような構造のテーブルを作成するかを指定することができます。中身を確認しておきましょう。

```db/migrate/年月日時_create_users.rb
class CreateUsers < ActiveRecord::Migration[6.0]
  def change
    create_table :users do |t|
      t.string        :name
      t.integer       :age
      t.timestamps
    end
  end
end
```

ちなみに、マイグレーションファイルで指定できる型には以下のようなものがあります。
必要に応じて、指定する型を変えてください。

|データ方|説明|
|---|---|
|string|文字列|
|text|長い文字列|
|integer|整数|
|float|浮動小数|
|decimal|精度の高い小数|
|datetime|日時|
|timestamp|より細かい日時|
|time|時間|
|date|日付|
|binary|バイナリデータ|
|boolean|Boolean型|

マイグレーションファイルは中身を変更するだけではダメです。
以下のコマンドを実行し、マイグレーションファイルの内容をデータベースに反映させましょう。

```
rails db:migrate
```

そうすると、アプリに紐づいたデータベースの中に、`users`テーブルが作成されます。

テーブルが作成できたら、次にデータベースにデータを登録するためのルーティングやコントローラの処理を実装していきます。

まずは、ルーティングから設定しましょう。

`config`  の中にある、 `routes.rb`を編集します。
新たなルーティングとして、`post`メソッドで`users`コントローラの`create`アクションを指定しましょう。

```config/routes.rb
Rails.application.routes.draw do
  get '/users/new', to: 'users#new'
  # 以下のルーティングを追加
  post '/users', to: 'users#create'
end
```

ルーティングが指定できたら、次にコントローラのアクションでデータを登録するための処理を書いていきます。
`app/controllers`の中にある `users_controller.rb` を開いてください。

## Strong Parameter
Railsでは、データベースに予期せぬ値が登録されないように、登録する値を制限できる機能があります。
それにより、「数字を登録するはずのところに文字列が登録される」といった不測の自体を防いでくれます。
そして、その機能を実現するのが`Strong Parameter`です。ではさっそく、その機能を実装していきましょう。

まずは、`users`コントローラに`create`アクションを追加します。

```app/controllers/users_controller.rb
class UsersController < ApplicationController

  def new
    @user = User.new
  end

  # 以下のアクションを追加
  def create
    # Strong Parameter の記述
    User.create(user_params)
  end

end
```

`create`アクションが追加できたら、同じ`users`コントローラ内に以下のコードを追記します。
こちらが、データベースに登録するデータを制限するための`Strong Parameter`の記述になります。

```app/controllers/users_controller.rb
class UsersController < ApplicationController

  def new
    @user = User.new
  end

  def create
    User.create(user_params)
  end

  # 以下のメソッドを追加
  private
  def user_params
    params.require(:user).permit(:name, :age)
  end
end
```

この記述により、 `user` のパラメータに紐づいた `name` や `age` しかデータベースに登録できないようになります。

なぜ `user` に紐づいた `name` や `age` がパラメータとしてコントローラで取得できるのかというと、 `form_with` の部分で `User` モデルに対するフォームを作成しているからです。

そのため、 `User` モデルを格納した `@user` を用いて  `form_with model: @user` と記述すると、送信ボタンを押したときには `user` に紐づいたパラメータが送信されます。



`create`アクションが追加できたら、`views/users`ディレクトリに`create.html.erb`を追加します。
追加が終わったら、`create.html.erb`に以下のコードを記述しましょう。

```erb:app/views/users/create.html.erb
<h1>登録完了</h1>
<%= link_to ""一覧画面へ"", ""/users"" %>
```

ここまできたら、データベースにデータが登録できたか確認してみてください。
自分が投稿したデータがテーブルに保存されていれば、投稿機能の実装は成功です。

まずは、サーバーを立ち上げましょう。

```
rails s
```

サーバーが立ち上げられたら、以下のURLにアクセスしてください。

[http://localhost:3000/users/new](http://localhost:3000/users/new)

# 一覧表示機能の実装
新規投稿機能が実装できたら、次は投稿を一覧表示するための機能を作成します。
といっても、実装は簡単なのでサクッと終わらせちゃいましょう！

まずは、一覧表示画面へのルートを作成します。

```config/routes.rb
Rails.application.routes.draw do
  # 以下のルーティングを追加
  get '/users', to: 'users#index' 
  get '/users/new', to: 'users#new'
  post '/users', to: 'users#create'
end
```

ルートが作成できたら、投稿したデータをデータベースから取り出す処理を書きます。
`users`コントローラに`index`アクションを定義し、以下のコードを書きましょう。

```app/controllers/users_controller.rb
class UsersController < ApplicationController
  # 以下のアクションを追加
  def index
    @users = User.all
  end

  def new
    @user = User.new
  end

  def create
    User.create(user_params)
  end

  private
  def user_params
    params.require(:user).permit(:name, :age)
  end
end
```

`views/users`ディレクトリに`index.html.erb`を作成し、そこに以下のコードを記述しましょう。
これで、ユーザーデータが一覧表示できるようになります。

```erb:app/views/users/index.html.erb
<%= link_to ""投稿画面へ"", ""/users/new"" %>
<% @users.each do |user| %>
  <p>
    <%= user.name %>
    <%= user.age %>
  </p>
<% end %>
```

ここまでできたら、一度サーバーを立ち上げRailsアプリの動作を確認してみましょう。
ユーザーのデータが一覧表示されていれば大丈夫です。
以下のURLでアクセスしてみてください。

[http://localhost:3000/users](http://localhost:3000/users)

# 削除機能の実装
データが一覧表示できたら、つぎにデータの削除機能を実装しましょう。
まずは、削除ボタンを作成します。

```erb:app/views/users/index.html.erb
<% @users.each do |user| %>
  <p>
    <%= user.name %>
    <%= user.age %>
    <%= link_to '削除', ""/users/#{user.id}"", method: :delete, data: {confirm: ""削除しますか?""}  %>
  </p>
<% end %>
```

次に削除ボタンを押した時のルートを決めます。
以下のコードを`config/routes.rb`に追記しましょう。
すでに設定しているルートの下に書いて大丈夫です。

```config/routes.rb
Rails.application.routes.draw do
  get '/users', to: 'users#index'
  get '/users/new', to: 'users#new'
  post '/users', to: 'users#create'
  # 以下のルーティグを追記
  delete '/users/:id', to: 'users#destroy'
end
```

ここで`delete`などのメソッドの使い分けを確認！
ただページを遷移するだけなら`get`を使用しますが、それ以外は行いたい処理に合わせてHTTPメソッドを変更する必要があります。
ここで一通り、どんなHTTPメソッドがあるか確認しておきましょう。

|HTTPメソッド|用途|パス|コントローラ#アクション|
|---|---|---|---|
|GET|一覧表示|/users|users#index|
|GET|データ登録画面|/users/new|users#new|
|POST|データ登録|/users|users#create|
|DELETE|データ削除|/users/:id|users#destroy|
|PATCH/PUT|データ更新|/users/:id|users#update|

ルートが設定できたら、次は該当するユーザーのデータを削除する処理をコントローラに書きましょう。
その際使用するのは`delete`というメソッドです。
`users`コントローラのアクションは`destroy`ですが、HTTPメソッドは`delete`であることに注意しましょう。

```app/controllers/users_controller.rb
class UsersController < ApplicationController

  def index
    @users = User.all
  end

  def new
    @user = User.new
  end

  def create
    User.create(user_params)
  end

  # 以下のアクションを追加
  def destroy
    user = User.find(params[:id])
    user.destroy
  end 

  private
  def user_params
    params.require(:user).permit(:name, :age)
  end
end
```

上のコードに関して、 `destroy` アクションでインスタンス変数（ `@user` など@マークのついた変数）を使用しない理由は、ビューにデータを受け渡す必要はないからです。

`destroy` メソッドでは、ユーザーの情報を消すだけです。
なので、ビューにデータを受け渡す必要はなく、そのためインスタンス変数を使用せず、 `user` に対して `destroy` メソッドを実行しています。

アクションが追加できたら、 `views/users` ディレクトリにある `destroy.html.erb` に以下のコードを追加します。

```erb:app/views/users/destroy.html.erb
<h1>削除完了</h1>
<%= link_to ""一覧画面へ"", ""/users"" %>
```

以上で削除機能の実装は完了です。
データが削除できるか確認したら、次は編集機能の実装に移りましょう。

# 編集機能を実装
編集機能を実装する際も、基本的には `destroy` と感覚は同じです。
該当するユーザーデータの`id`パラメータを飛ばし、それをコントローラで受け取って`update`メソッドを実行するだけ！
それでは、学んでいきましょう。

編集画面へ遷移するためのボタンを一覧表示画面に作成します。
 `views/users` ディレクトリにある `index.html.erb` に以下のコードを追記しましょう。

```erb:app/views/users/index.html.erb
<%= link_to ""投稿画面へ"", ""/users/new"" %>
<% @users.each do |user| %>
  <p>
    <%= user.name %><%= user.age %>
    <%= link_to '削除', ""/users/#{user.id}"", method: :delete, data: {confirm: ""削除しますか?""}  %>
    <%= link_to '編集', ""/users/#{user.id}/edit"", method: :get %> 
  </p>
<% end %>
```

リンクが作成できたら、編集画面へ遷移するためのルートを設定します。

```config/routes.rb
Rails.application.routes.draw do
  get '/users', to: 'users#index'
  get '/users/new', to: 'users#new'
  post '/users', to: 'users#create'

  # 以下のルーティングを追加
  get '/users/:id/edit', to: 'users#edit'

  delete '/users/:id', to: 'users#destroy'
end
```

ルーティングが設定できたら、 `users` コントローラに `edit` アクションを定義し、編集対象となるユーザーのデータを取得するための処理を書きましょう。

```app/controllers/users_controller.rb
class UsersController < ApplicationController

  def index
    @users = User.all
  end

  def new
    @user = User.new
  end

  def create
    User.create(user_params)
  end

  # 以下のアクションを追加
  def edit
    @user = User.find(params[:id])
  end

  def destroy
    user = User.find(params[:id])
    user.destroy
  end

  private
  def user_params
    params.require(:user).permit(:name, :age)
  end
end
```

`edit` アクションが追加できたら、 `views/users` ディレクトリに `edit.html.erb` を作成し、以下のコードを記述しましょう。

```erb:app/views/users/edit.html.erb
<p>更新</p>
<%= form_with model: @user, url: ""/users/#{@user.id}"", method: :patch, local: true do |f| %>
  <p><%= f.text_field :name %></p>
  <p><%= f.text_field :age %></p>
  <%= f.submit ""送信"" %>
<% end %>
```

編集完了画面へのルーティング

```config/routes.rb
Rails.application.routes.draw do
  get '/users', to: 'users#index'
  get '/users/new', to: 'users#new'
  post '/users', to: 'users#create'
  get '/users/:id/edit', to: 'users#edit'

  # 以下のルーティングを追加
  patch '/users/:id', to: 'users#update'

  delete '/users/:id', to: 'users#destroy'
end
```

ルーティングが設定できたら、 `users` コントローラにデータを更新するための `update` アクションを追加

```app/controllers/users_controller.rb
class UsersController < ApplicationController

  def index
    @users = User.all
  end

  def new
    @user = User.new
  end

  def create
    User.create(user_params)
  end

  def edit
    @user = User.find(params[:id])
  end

  # 以下のアクションを追加
  def update
    user = User.find(params[:id])
    user.update(user_params)
  end

  def destroy
    user = User.find(params[:id])
    user.destroy
  end

  private
  def user_params
    params.require(:user).permit(:name, :age)
  end
end
```

アクションが追加できたら `view/users` ディレクトリに `update.html.erb` を作成し、以下のコードを記述しましょう。

```erb:app/views/users/update.html.erb
<h1>更新完了</h1>
<%= link_to ""一覧画面へ"", ""/users"" %>
```

これで編集機能の実装が完了しました。ユーザーのデータがきちんと更新できるか確認してみましょう。更新が確認できたらCRUD処理の実装は一通り終了です。
お疲れ様でした。

## おまけ
CRUD処理は実装できたのですが、コントローラの記述でもう少し改善できるところがあります。それが、 `create` `update` `destroy` の部分です。

これらのアクションに対応するビューは特に表示しなくても問題ないので、処理をした後すぐに一覧表示画面に遷移するようにしても問題ありません。

アクションの中で特定の処理をした後、他のアクションに処理を渡すためには `redirect_to` を使用します。以下のように、コントローラを編集してみましょう。

```app/controllers/users_controller.rb
class UsersController < ApplicationController

  def index
    @users = User.all
  end

  def new
    @user = User.new
  end

  def create
    User.create(user_params)
    # 以下のメソッドを追加
    redirect_to action: :index
  end

  def edit
    @user = User.find(params[:id])
  end

  def update
    user = User.find(params[:id])
    user.update(user_params)
    # 以下のメソッドを追加
    redirect_to action: :index
  end

  def destroy
    user = User.find(params[:id])
    user.destroy
    # 以下のメソッドを追加
    redirect_to action: :index
  end

  private
  def user_params
    params.require(:user).permit(:name, :age)
  end
end
```

以上のように編集することで、 `create` `update` `destroy` の処理を行った後に、すぐに `index` に処理が渡されるようになりました。

試しに、データを新規作成し、データを投稿した後すぐに一覧表示画面に遷移するか確かめてみてください。確認できたら、実装は完了です。


# まとめ
このCRUD処理に関しては、現場でプログラマーとして働くためのボーダーラインと言われています。ということは、この処理をしっかり実装できるようになるだけで、現場で働くための最低限のスキルが身についたということになります。

この流れはとても大切なので、何度も繰り返し実装してみてください。

また、RESTフルなアプリケーションとはなんなのかを改めて確認しておきましょう。

お疲れ様でした！"
Ruby on Rails,Active Recordの様々なメソッド,"Active Recordとは、直接SQLを記述することなくデータベースに存在するデータを扱えるようにする Ruby on Railsの機能です。
このActrive Recordのおかげで、プログラマーはSQL文を記述することなく、簡単なメソッドのみでデータの操作を行うことができます。

# データ検索に関するメソッド一覧
データベースからデータを検索するActrive Recordのメソッドはたくさんあります。
よく利用するものから順に書いていきますので、上の方から優先して学んでみてください。

- all
- find
- find_by
- first
- where
- pluck
- order
- distinct
- select
- group
- joins
- having

# all
テーブルの全てのレコードを検索する

```ruby
User.all
```

# find
`id`などの主キーが一致するレコードを取得します。

```ruby
user = User.find(1)
```

# find_by
指定したカラムで条件が一致する最初の1件のレコードを取得します。

```ruby
user = User.find_by(name: 'tanaka')
```

# first
レコードの最初の1件を取得します。

```ruby
user = User.first
```

# where
条件が一致するすべてのレコードを取得します。

```ruby
# 名前がsuzukiのユーザーを検索する
User.where(name: 'suzuki')
```

# where().first
条件が一致するレコードの最初の一件を取得します。

```ruby
user = User.where(name: 'tanaka').first
```

# pluck
特定のカラムで配列を作成する

```ruby
users_name = User.pluck(:name)
```

# order
取得したレコードを特定のカラムを基準に並べ換える

```ruby
# usersテーブルのレコードを降順で並び替えて取得する
user = User.order('id DESC')
```

# delete_all
テーブルのすべてのデータを削除する

```ruby
User.delete_all
```

# eager_load
テーブルを外部結合して全てのデータを取得する

```ruby
User.eager_load(:items)
```"
Ruby on Rails,Active Record の様々な削除メソッド,"Railsには、様々な種類のデータ削除メソッドが用意されています。
ぜひ、それぞれのメソッドの種類を把握し、使いこなせるようにしてみてください。

各メソッドを試したい場合は`rails c`を使用し、モデルオブジェクトに対してメソッドを実行すると、簡単にテストを行うことができて便利です。

# destroy
`destroy`は、データを1件削除し、アソシエーションで関連付けたデータも自動的に削除します。

```ruby
User.find(1).destroy
```

# destroy_all
`destroy_all`は、複数のデータを削除し、アソシエーションで関連付けたデータも自動的に削除します。

```ruby
# idが20~26の間のデータを削除
# 関連データも削除
User.where(id: 20..26).destroy_all
```

# delete
`delete`は、データを1件削除します。その際、関連するデータは削除されません。

```ruby
User.find(4).delete
```

# delete_all
`delete_all`は、複数のデータを削除します。その際、関連するデータは削除されません。

```ruby
# idが1~10の間のデータを削除
User.where(id: 1..10).delete_all
```

# まとめ
`destroy`は関連付けされたデータも一気に消すことができますが、影響範囲が大きいので、使用する際は注意しましょう。

それぞれのメソッドの微妙な違いを把握し、使いこなせるようにしておくと処理の幅が広がります。"
Ruby on Rails,resources を使ったCRUD処理の実装,"今回は、URLを直書きせず名前付きルートを使用したCRUD処理の実装について解説していきます。現場では、今回ご紹介するやり方が一般的なので、CRUD処理の基本を理解できたらぜひ挑戦してみてください。

まずはアプリを作成し，データベースを作成しましょう。

```
cd ~/rails
rails new crud_resources_sample -d postgresql
cd crud_resources_sample
rails db:create
```

# resources

`resources`とは、`index, new, create, show, edit, update, destroy`などのルーティングを一括で定義することができるとても便利なメソッドです。これにより、簡単にRESTフルなRailsアプリを作成することができます。

```config/routes.rb
Rails.application.routes.draw do
  # 以下のルーティングを定義
  resources :users
end
```

# 新規投稿機能の実装

次にコントローラを作成します。今回はユーザーのデータを扱うアプリを作成するので、`users`というコントローラを作成しましょう。

```
rails g controller users
```

コントローラが作成できたら、`new`アクションを定義します。`users`コントローラに以下のコードを記述しましょう。

```app/controllers/users_controller.rb
class UsersController < ApplicationController
  # 以下のアクションを追加
  def new
    @user = User.new
  end
end
```

`users`コントローラに`new`アクションが作成できたら、`views/users`ディレクトリに`new.html.erb`を作成し、以下のコードを記述しましょう。こちらが、投稿画面のフォームになります。
（`form_for`と`form_tag`は，Rails 5.1から`form_with`に統合されています）

```erb:app/views/users/new.html.erb
<p>新規登録</p>
<%= form_with model: @user, local: true do |f| %>
  <p>お名前：<%= f.text_field :name %></p>
  <p>年齢：<%= f.text_field :age %></p>
  <%= f.submit ""送信"" %>
<% end %>
```

投稿画面が作成できたら、実際にデータを登録するテーブルとそれに関連するモデルを作成します。まずは以下のコマンドを実行し、`user`モデルを作成しましょう。

```
rails g model User name:string age:integer
```

以下のコマンドを実行し、マイグレーションファイルの内容をデータベースに反映させましょう。

```
rails db:migrate
```

マイグレーションファイルを実行できたら、`users`コントローラに`create`アクションを追加します。

```app/controllers/users_controller.rb
class UsersController < ApplicationController

  def new
    @user = User.new
  end

  # 以下のアクションを追加
  def create
    # Strong Parameter の記述
    User.create(user_params)
  end

end
```

`create`アクションが追加できたら、同じ`users`コントローラ内に以下のコードを追記します。こちらが、データベースに登録するデータを制限するための`Strong Parameter`の記述になります。

```app/controllers/users_controller.rb
class UsersController < ApplicationController

  def new
    @user = User.new
  end

  def create
    User.create(user_params)
  end

  # 以下のアクションを追加
  private
  def user_params
    params.require(:user).permit(:name, :age)
  end
end
```

`create`アクションが追加できたら、`views/users`ディレクトリに`create.html.erb`を追加します。追加が終わったら、`create.html.erb`に以下のコードを記述しましょう。

```erb:app/views/users/create.html.erb
<h1>登録完了</h1>
<%= link_to ""一覧画面へ"", users_path %>
```

ここまできたら、データベースにデータが登録できたか確認してみてください。自分が投稿したデータがテーブルに保存されていれば、投稿機能の実装は成功です。

# 一覧表示機能の実装
新規投稿機能が実装できたら、次は投稿を一覧表示するための機能を作成します。

投稿したデータをデータベースから取り出す処理を書きます。`users`コントローラに`index`アクションを定義し、以下のコードを書きましょう。

```app/controllers/users_controller.rb
class UsersController < ApplicationController
  # 以下のアクションを追加
  def index
    @users = User.all
  end

  def new
    @user = User.new
  end

  def create
    User.create(user_params)
  end

  private
  def user_params
    params.require(:user).permit(:name, :age)
  end
end
```

`views/users`ディレクトリに`index.html.erb`を作成し、そこに以下のコードを記述しましょう。これで、ユーザーデータが一覧表示できるようになります。

```erb:app/views/users/index.html.erb
<%= link_to ""投稿画面へ"", new_user_path %>
<% @users.each do |user| %>
  <p>
    <!-- 以下の2行のコードを追加 -->
    <%= user.name %>
    <%= user.age %>
  </p>
<% end %>
```

ここまでできたら、一度サーバーを立ち上げRailsアプリの動作を確認してみましょう。ユーザーのデータが一覧表示されていれば大丈夫です。

[http://localhost:3000/users](http://localhost:3000/users)にアクセスしてみてください。


# 削除機能の実装
データが一覧表示できたら、つぎにデータの削除機能を実装しましょう。まずは、`views/users`ディレクトリにある`index.html.erb`に削除ボタンを作成します。

```erb:app/views/users/index.html.erb
<%= link_to ""投稿画面へ"", new_user_path %>
<% @users.each do |user| %>
  <p>
    <%= user.name %>
    <%= user.age %>
    <!-- 以下のコードを追加 -->
    <%= link_to ""削除"", user_path(user), method: :delete, data: {confirm: ""削除しますか?""} %>
  </p>
<% end %>
```

該当するユーザーのデータを削除する処理をコントローラに書きましょう。その際使用するのは`delete`というメソッドです。`users`コントローラのアクションは`destroy`ですが、HTTPメソッドは`delete`であることに注意しましょう。

```app/controllers/users_controller.rb
class UsersController < ApplicationController

  def index
    @users = User.all
  end

  def new
    @user = User.new
  end

  def create
    User.create(user_params)
  end

  # 以下のアクションを追加
  def destroy
    user = User.find(params[:id])
    user.destroy
  end 

  private
  def user_params
    params.require(:user).permit(:name, :age)
  end
end
```

アクションが追加できたら、`views/users`ディレクトリにある`destroy.html.erb`に以下のコードを追加します。

```erb:app/views/users/destroy.html.erb
<h1>削除完了</h1>
<%= link_to ""一覧画面へ"", users_path %>
```

以上で削除機能の実装は完了です。データが削除できるか確認したら、次は編集機能の実装に移りましょう。

# 編集機能を実装
編集機能を実装する際も、基本的には`destroy`と感覚は同じです。該当するユーザーデータの`id`パラメータを飛ばし、それをコントローラで受け取って`update`メソッドを実行するだけ！それでは、学んでいきましょう。

編集画面へ遷移するためのボタンを一覧表示画面に作成します。`views/users`ディレクトリにある`index.htmle.erb`に以下のコードを追記しましょう。

```erb:app/views/users/index.html.erb
<%= link_to ""投稿画面へ"", new_user_path %>
<% @users.each do |user| %>
  <p>
    <%= user.name %>
    <%= user.age %>
    <%= link_to ""削除"", user_path(user), method: :delete, data: {confirm: ""削除しますか?""} %>
    <!-- 以下のコードを追加 -->
    <%= link_to ""編集"", edit_user_path(user) %>
  </p>
<% end %>
```

`index.html.erb`に追記ができたら、`users`コントローラに`edit`アクションを定義し、編集対象となるユーザーのデータを取得するための処理を書きましょう。

```app/controllers/users_controller.rb
class UsersController < ApplicationController

  def index
    @users = User.all
  end

  def new
    @user = User.new
  end

  def create
    User.create(user_params)
  end

  # 以下のアクションを追加
  def edit
    @user = User.find(params[:id])
  end

  def destroy
    user = User.find(params[:id])
    user.destroy
  end

  private
  def user_params
    params.require(:user).permit(:name, :age)
  end
end
```

`edit`アクションが追加できたら、`views/users`ディレクトリに`edit.html.erb`を作成し、以下のコードを記述しましょう。

```erb:app/views/users/edit.html.erb
<p>更新</p>
<%= form_with model: @user, local: true do |f| %>
  <p>お名前：<%= f.text_field :name %></p>
  <p>年齢：<%= f.text_field :age %></p>
  <%= f.submit ""送信"" %>
<% end %>
```

`edit.html.erb`に記述ができたら、`users`コントローラにデータを更新するための`update`アクションを追加

```app/controllers/users_controller.rb
class UsersController < ApplicationController

  def index
    @users = User.all
  end

  def new
    @user = User.new
  end

  def create
    User.create(user_params)
  end

  def edit
    @user = User.find(params[:id])
  end

  # 以下のアクションを追加
  def update
    user = User.find(params[:id])
    user.update(user_params)
  end

  def destroy
    user = User.find(params[:id])
    user.destroy
  end

  private
  def user_params
    params.require(:user).permit(:name, :age)
  end
end
```

アクションが追加できたら`view/users`ディレクトリに`update.html.erb`を作成し、以下のコードを記述しましょう。

```erb:app/views/users/update.html.erb
<h1>更新完了</h1>
<%= link_to ""一覧画面へ"", users_path %>
```

これで編集機能の実装が完了しました。ユーザーのデータがきちんと更新できるか確認してみましょう。更新が確認できたらCRUD処理の実装は一通り終了です。お疲れ様でした。"
Ruby on Rails,デバッグツール（binding.pry）の使い方,"Railsの `エラー解消` で，まず重要なのは

- （サーバーを起動したターミナル の） `ログを確認` する

ことです。その上で，この教材で紹介するデバッグツールをうまく利用できるようになると，

- `真のエラー原因を効率よく絞り込める`
- `正しいコードを効率よく確かめられる`

ようになります。さらに，複雑なプログラムを書く際にも非常に強力な武器となります。

早いうちからデバッグツールを理解し，エラー時だけでなく，気になったところでどんどん使用していくことをお勧めします。

デバッグツールの使い方は検索するといろいろ出てきますが，初心者目線に立った記事はほとんど見当たりません。

この教材では，アプリを作成する段階からスタートし，デバッグツール `pry-byebug` の基本的な使い方を丁寧に解説していきます。

なお，「Rails の CRUD 処理」を理解できていることを前提とします。

## 準備

まずは，アプリを作成していきましょう。

```zsh:ターミナル 
rails new debug_sample_app -d postgresql
cd debug_sample_app
rails db:create
```

デバッグツール `pry-byebug` を `Gemfile` にいれましょう。本番環境では必要ないので，開発環境(development)とテスト環境(test)のみに追加します。

```rb:Gemfile
# 略

group :development, :test do
  # Call 'byebug' anywhere in the code to stop execution and get a debugger console
  gem 'byebug', platforms: [:mri, :mingw, :x64_mingw]
  # ***** 以下を追加 *****
  gem 'pry-byebug'
  # ***** 以上を追加 *****
end

# 略
```

```zsh:ターミナル 
bundle install
```

メッセージ投稿アプリを作成しつつ，ログの見方，デバッグツールの使い方を解説していきます。

まず，モデルとコントローラを作成しましょう。
カラムは，「タイトル(`title`)」と「内容(`content`)」とします。

```zsh:ターミナル 
rails g model Post title:string content:string
rails g controller posts index new create
rails db:migrate
```

ルーティングは `resources` を使用したものに変更しておきます。

```config/routes.rb
Rails.application.routes.draw do
  resources :posts, only: [:index, :new, :create]
end
```

次に，初期データを作成しておきましょう。

```db/seeds.rb
3.times do |i|
  Post.create!(title: ""タイトル#{i}"", content: ""内容#{i}"")
end
puts ""初期メッセージを3個追加しました。""
```

```zsh:ターミナル 
rails db:seed
```

`rails db:seed` を実行することで `seeds.rb` が実行され，データが追加されます。
（コンソール もしくは `Postico` でデータが入っているか確認しましょう）

さらに，メッセージの一覧表示を作成しておきましょう。

```app/controllers/posts_controller.rb
class PostsController < ApplicationController
  def index
  # ***** 以下を追加 *****
    @posts = Post.all
  # ***** 以上を追加 *****
  end

  # 略
end
```

次は `そのままコピペして下さい` 。

```erb:app/views/posts/index.html.erb
<h1>一覧表示</h1>
<section>
  <% @post.each do |post| %>
    <div>
      <p>タイトル: <%= post.taitle %></p>
      <p>内容: <%= post.content %></p>
    </div>
  <% end %>
</section>
```

（おや？と思った箇所があるかもしれませんが，一旦忘れて下さい）

## コントローラで `binding.pry`

さて，ここでサーバーを起動しましょう。

```zsh:ターミナル 
rails s
```

ブラウザで， [http://localhost:3000/posts](http://localhost:3000/posts) にアクセスしてみましょう。

エラーが発生しますね……

ブラウザにもエラー内容が書かれてありますが，サーバーを起動したターミナルのログにも次のようなエラー内容が書かれているので確認して下さい。

```none:ターミナルのログ
ActionView::Template::Error (undefined method `each' for nil:NilClass):
    1: <h1>一覧表示</h1>
    2: <section>
    3:   <% @post.each do |post| %>
    4:     <div>
    5:       <p>タイトル: <%= post.taitle %></p>
    6:       <p>内容: <%= post.content %></p>

app/views/posts/index.html.erb:3
```

さて，原因はどこでしょうか？

まず，ログから分かる情報を整理しましょう。

- app/views/posts/index.html.erb:3
  - このファイルの3行目でエラーが出ている

- ActionView::Template::Error (undefined method `each' for nil:NilClass)
  - `nil` に対して `each` を使っている

これで原因に気づく人も多いかもしれませんが，まだ分かっていないとして `デバッグツール` でさらに原因を絞り込んでいきましょう。

デバッグツール `pry-byebug` を入れることで， `binding.pry` というコードが使えるようになります。

この `binding.pry` を入れると，このコードを読み込んだタイミングで処理が一時的に止まり，その時点での様々な情報を確認することができます。

たとえば，コントローラのindexアクションの一番最後に追加してみましょう。

```app/controllers/posts_controller.rb
class PostsController < ApplicationController
  def index
    @posts = Post.all
    # ***** 以下を追加 *****
    binding.pry
    # ***** 以上を追加 *****
  end

  # 略
end
```

その後，ブラウザをリロードしましょう。

すると，ブラウザが更新されず，タブが読み込み中の状態になります。ここで，サーバーを起動したターミナルを確認してください。

```none:ターミナルのログ
From: /Users/tt/Desktop/debug_sample_app/app/controllers/posts_controller.rb:5 PostsController#index:

    2: def index
    3:   @posts = Post.all
    4:   binding.pry
 => 5: end

[1] pry(#<PostsController>)>
```

このような状況になっているでしょう。
（`pry` が表示されず `lines ~~/~~ ` のように表示されている場合は `q` を押しましょう）

`binding.pry` のところで処理が止まっているのです。ここで，次のようなものを試してみましょう。

```none:binding.pry
@posts
@posts.ids
@posts.pluck(:title)
@posts.title

@posts[0]
@posts[0].title

Post.order(id: :desc)
post = Post.find(2)
post.id
post.content
post.created_at
```

このように，`binding.pry` の箇所でいろいろと調査ができるわけです。

さて，この時点で大きく2つのことが分かりました。

- `@posts` は存在し，データも入っている
- `posts_controller.rb` の `index` アクションではエラーが出ていない

このように，`エラー原因を徐々に絞り込んでいく` のがデバッグの重要な考え方です。

それでは， `binding.pry` を終了し，処理を継続させましょう。

（何も入力していない状態で）ショートカットキー（`control + D`） を使用するか， `exit` と入力してEnterキーを押すと，`binding.pry` を終了できます。

## ビューで `binding.pry`

 `posts_controller.rb` の `binding.pry` を消した上で，今度は `ビュー` に入れてみましょう。

```erb:app/views/posts/index.html.erb
<h1>一覧表示</h1>
<section>
  <!-- ***** 以下を追加 ***** -->
  <% binding.pry %>
  <!-- ***** 以上を追加 ***** -->
  <% @post.each do |post| %>
    <div>
      <p>タイトル: <%= post.taitle %></p>
      <p>内容: <%= post.content %></p>
    </div>
  <% end %>
</section>
```

Rubyのコードですので，`ビュー` に入れるときは `<% binding.pry %>` と書く必要があります。

念のため，`control + C` でサーバーを停止して`rails s` で再起動した上で，リロードしてみましょう。

```none:ターミナルのログ
From: /Users/tt/Desktop/debug_sample_app/app/views/posts/index.html.erb:4 #<Class:0x00007f9fec27d268>#_app_views_posts_index_html_erb__3081260616125523257_70162419281660:

    1: <h1>一覧表示</h1>
    2: <section>
    3:   <% binding.pry %>
 => 4:   <% @post.each do |post| %>
    5:     <div>
    6:       <p>タイトル: <%= post.taitle %></p>
    7:       <p>内容: <%= post.content %></p>
    8:     </div>
    9:   <% end %>

[1] pry(#<#<Class:0x00007f9fec27d038>>)>
```

`binding.pry` を入れたところで処理が止まっています。ここで，また色々調べてみましょう。

```none:binding.pry
@post.each
@post
@posts
```

原因が分かりましたね！コントローラで `@posts` を定義したのに， `@post.each` と書いてしまっていたからです。

それでは，`control + D` で終了し，`<% binding.pry %>` を削り， `@post` を `@posts` に修正した上で，リロードしましょう。

また，エラーが出ましたね。こちらはログを確認するだけで修正すべき箇所が分かるでしょうが，次の位置に `binding.pry` を入れてみましょう。

```erb:app/views/posts/index.html.erb
<h1>一覧表示</h1>
<section>
  <% @post.each do |post| %>
    <!-- ***** 以下を追加 ***** -->
    <% binding.pry %>
    <!-- ***** 以上を追加 ***** -->
    <div>
      <p>タイトル: <%= post.taitle %></p>
      <p>内容: <%= post.content %></p>
    </div>
  <% end %>
</section>
```

次のようなものを調べてみましょう。`each` の中ですので，変数 `post` が使えるようになっています。

```none:binding.pry
@posts
post
post.id
post.taitle
post.title
post.content
```

`post.taitle` が正しくは `post.title` ですね！修正し，`<% binding.pry %>`も削りましょう。

そして，`control + D` で終了し……と思いきや，また中断されるはずです。次を確認してみましょう。

```none:binding.pry
post
```

`each` 文の中に`<% binding.pry %>` を入れたために，`@posts` の2つ目でまた `binding.pry` が発動したわけです。

`control + D` を何回も押せば終了して処理が進むようになりますが，何度も繰り返していつまでも終わらない！という場合は `exit!` を入力して Enter キーを押せば，サーバー自体を強制停止させることができます。

さて，サーバーを起動してリロードしてみましょう。問題なく一覧表示されるはずです。

このタイプミスの修正は簡単に分かると思いますが，エラーが出てきた際に正しい書き方がすぐに分からない場合は，`binding.pry` で一旦止めて調査する，という方法もあるわけです。

## 処理の流れ

ここで，改めてRailsの処理の流れを確認しておきましょう。

`ルーティング` --> `コントローラ` --> `ビュー`

この流れは，`エラー原因を特定する上で非常に重要` です。

## 新規投稿機能のデバッグ

今度は新規投稿機能を実装するために次のように設定したとします。今回もいくつかミスがあります。コードはどちらもコピペして下さい。

```app/controllers/posts_controller.rb
class PostsController < ApplicationController
  def index
    @posts = Post.all
  end

  def new
    @posts = Post.new
  end

  def create
    @post = Post.create!(post_params)
    redirect_to action: :index
  end

  private

  def post_params
    params.require(:posts).permit(:title, :content)
  end
end
```

```erb:app/views/posts/new.html.erb
<h1>新規投稿</h1>
<%= form_with model: @post, local: true do |f| %>
  <p><%= form.label :title, ""タイトル"" %> <%= form.text_field :title %></p>
  <p><%= form.label :content, ""内容"" %> <%= form.text_field :content %></p>
  <p><%= form.submit ""送信"" %></p>
<% end %>
```

新規投稿ページにアクセスしてみましょう。
（リンクが分からない場合は `rails routes` で確認）

---

【問題】新規投稿が問題なくできるところまで，まずは自分でエラー解決をしてみましょう！

---

## 新規投稿機能のデバッグ：回答編（その1）

全てのエラーを解決して新規投稿ができるようになりましたか？

ひとまず，エラーを解消する前の状態からスタートしてデバッグを行っていきましょう。
（コードを上記に戻した上で読み進めて下さい）

まず，新規投稿ページのリンクですが，

```zsh:ターミナル 
rails routes | grep posts
```

を実行すると，ルーティングの内 `posts` が含まれているものに絞って表示することができます。

```none:実行結果
posts    GET  /posts(.:format)     posts#index
         POST /posts(.:format)     posts#create
new_post GET  /posts/new(.:format) posts#new
```

新規投稿ページは [http://localhost:3000/posts/new](http://localhost:3000/posts/new) ですね。

アクセスすると，次のエラーが出ます。

```none:ターミナルのログ
ActionView::Template::Error (undefined local variable or method `f' for #<#<Class:0x00007fc97e74c5d0>:0x00007fc97e76fda0>):
    1: <h1>新規投稿</h1>
    2: <%= form_with model: @post, local: true do |f| %>
    3:   <p><%= form.label :title, ""タイトル"" %> <%= form.text_field :title %></p>
    4:   <p><%= form.label :content, ""内容"" %> <%= form.file_field :content %></p>
    5:   <p><%= form.submit ""送信"" %></p>
    6: <% end %>

app/views/posts/new.html.erb:3
app/views/posts/new.html.erb:2
```

対応するビューファイルは `app/views/posts/new.html.erb` です。このファイルの2行目と3行目の間に `<% binding.pry %>` を入れて次のようなものを確認してみましょう。

```none:binding.pry
form
f

# （以下はおまけ）
f.label :title
f.text_field :content
f.text_area :content
f.submit ""送信""
```

---

【補足】`lines ~~/~~ ` のように表示された場合は `q` を押すと終了できます。
なお，`f` で次のページ，`b`で前のページが見られます

---

ブロック内（3〜5行目）では `form` にしているのに，2行目で変数を `f` としてしまっているのが原因ですね。2行目の変数を `form` にしましょう。

これで新規投稿ページにはアクセスできるようになります。

## 新規投稿機能のデバッグ：回答編（その2）

ところが，何かしら入力をして投稿をしてみると，別のエラーが発生します。

今回はエラー文が長いので，最初だけ載せておきます。

```none:ターミナルのログ
Started POST ""/posts/new"" for ::1 at 2020-06-01 23:40:02 +0900

ActionController::RoutingError (No route matches [POST] ""/posts/new""):
```

このログからエラー原因を特定できたでしょうか。

`RoutingError`ですが，ルーティングには問題ありません。

よく見ると，`POST ""/posts/new""` になっています。これはおかしいですね。`create` アクションに対応するURLは `POST ""/posts""` です。

（正しいURLが `POST ""/posts""` であることが分からない場合は， `rails routes | grep posts` で再度確認！）

ここから，ルーティングに問題があるのではなく，「投稿ボタンの送信先URLに誤りがある」と推測できます。

そこで，新規投稿ページで「ページのソースを表示」してみましょう。

```html:view-source:http://localhost:3000/posts/new
<form action=""/posts/new"" accept-charset=""UTF-8"" method=""post""><input type=""hidden"" name=""authenticity_token"" value=""Rx9CVno1gb182t6X1sn5kaAmYKiBBUvBOxjpDLDg73iSx0AyQKVwa2tEnVOC49yquNBnFZ0DoV51NK6JS3l8Tg=="" />
  <p><label for=""title"">タイトル</label> <input type=""text"" name=""title"" id=""title"" /></p>
  <p><label for=""content"">内容</label> <input type=""text"" name=""content"" id=""content"" /></p>
  <p><input type=""submit"" name=""commit"" value=""送信"" data-disable-with=""送信"" /></p>
</form>
```

`form action=""/posts/new""` ですので，やはり送信先URLに誤りがあります。そこで，対応する`app/views/posts/new.html.erb` を確認します。見た目は特に問題なさそうです。

今度は，`new.html.erb` の1行目と2行目の間に `<% binding.pry %>` を入れ，[新規投稿ページ](http://localhost:3000/posts/new)にアクセスしましょう。

```none:binding.pry
form_with model: @post, local: true
@post
```

`model: @post` でRailsは自動的に送信先URLを決定するのですが，1つ目を実行すると送信先URLが誤っています。そこで`@post`を調べてみると，なんと`nil` になっています。

処理順は，

`ルーティング` --> `コントローラ` --> `ビュー`

です。ビューの `@post` は，コントローラで決めたものですから，`posts_controller` の `new` アクションに問題があると推測できます。

```app/controllers/posts_controller.rb
  def new
    @posts = Post.new
  end
```

`@posts` になってしまっていますね。投稿は1つですから正しくは `@post` です。修正しましょう。

## 新規投稿機能のデバッグ：回答編（その3）

ここまでに，2箇所修正しました。

- `app/views/posts/new.html.erb` の 2行目の `f` を `form` に修正

- `app/controllers/posts_controller.rb` の 7行目（`new` アクション内）の `@posts` を `@post` に修正

これでエラーが全て解決！……と思いきや，投稿ボタンをクリックすると，またエラーが出ています。

ログを確認してみましょう。

```none:ターミナルのログ
Started POST ""/posts"" for ::1 at 2020-06-02 07:53:20 +0900
Processing by PostsController#create as HTML
  Parameters: {""authenticity_token""=>""jM5szYiAxQhY2vADfGB2NGsBtrZMXbdYj11fFiza5MxzQZmIOmuWMYFT/U/SvVWS0mSrCIcCEZWL0YkCwETFIw=="", ""post""=>{""title""=>""おはよう"", ""content""=>""今日は天気がいいですね！""}, ""commit""=>""送信""}
Completed 400 Bad Request in 1ms (ActiveRecord: 0.0ms | Allocations: 1348)



ActionController::ParameterMissing (param is missing or the value is empty: posts):

app/controllers/posts_controller.rb:18:in `post_params'
app/controllers/posts_controller.rb:11:in `create'
```

`ActionController::ParameterMissing` ですので，コントローラのパラメータに問題がありそうです。

それでは，`binding.pry` をどこに入れて，どのようにして処理を止め，どのようなことをチェックすればよいかを考えてみて下さい。

「何をすればよいかがサッパリ分からない……」ということであれば，`処理の流れを理解できていない` ということになります。くどいですが，処理順は，

`ルーティング` --> `コントローラ` --> `ビュー`

です。今回の場合ならば

1. 新規投稿ページ `new.html.erb` で送信ボタンをクリック
2. 送信先URLは`POST ""/posts""`
3. URLに対応するルーティングを確認すると `posts#create`
4. `posts_controller` の `create` アクションが動く

です。そこで，`create`アクションの一番最初に `binding.pry` を入れてみましょう。

```app/controllers/posts_controller.rb
class PostsController < ApplicationController
  # 略

  def create
    # ***** 以下を追加 *****
    binding.pry
    # ***** 以上を追加 *****
    @post = Post.create!(post_params)
    redirect_to action: :index
  end

  private

  def post_params
    params.require(:posts).permit(:title, :content)
  end
end
```

次に，この場所で処理を止めてみましょう。`create`アクションを動作させればよいわけですから，[新規投稿ページ](http://localhost:3000/posts/new) でフィールドに入力した上で送信ボタンをクリックすればよいわけです。

処理が止まったら，まず次を確認していきましょう。

```none:binding.pry
post_params
params.require(:posts).permit(:title, :content)
params
```

最初の2つで出てくるエラーはこちらです。

```none:ターミナルのログ
ActionController::ParameterMissing: param is missing or the value is empty: posts
```

`posts`が空だと出ています。一方 `params` は次のような結果になります。

```none:ターミナルのログ
<ActionController::Parameters {""authenticity_token""=>""5sEQOScpqEqgNcQYQbiRJK4lj0yC4VWaMnWMdvOa95wZTuV8lcL7c3m8yVTvZbKCF0CS8km+81c2+VpiHwTWcw=="", ""post""=>{""title""=>""おはよう"", ""content""=>""いい天気ですね！""}, ""commit""=>""送信"", ""controller""=>""posts"", ""action""=>""create""} permitted: false>
```

さらに次のようなものを確認してみると原因がハッキリするでしょう。

```none:binding.pry
params.require(:posts)
params.require(:post)
params.require(:post).permit(:title, :content)
params.require(:post).permit(:title)

# ストロングパラメータの理解が曖昧な方は，ついでに次もチェックしておくことをお勧めします
params
params[:post]
params[:post][:title]
params[:post][:content]
```

---

`require(:post)` と書いた場合は `post` というキーが無かった時点でエラーが発生します。（`require` は `必要とする` という意味です）

また，`permit(:title)` だけにすると，`title` に対応するパラメータしか受け取らなくなります。

---

`post_params` の `posts` を `post` に修正すれば，新規投稿機能のエラーが全て解消するはずです。

長くなりましたが，ログの見方と `binding.pry` の基本的な使い方を実践形式で解説していきました。

闇雲にエラー箇所を探すのではなく，このように論理的にエラー原因を絞り込むことで効率よくエラーを解消していくことができます。

エラーが出ることは悪いことではありません。エラー原因を絞り込めないのがよろしくないのです。エラーが出た際には是非実践をして，効率よくエラーを解消していくようにしましょう。

お疲れ様でした！

---

以下，エラー解消後のコードです。

```app/controllers/posts_controller.rb
class PostsController < ApplicationController
  def index
    @posts = Post.all
  end

  def new
    @post = Post.new
  end

  def create
    @post = Post.create!(post_params)
    redirect_to action: :index
  end

  private

  def post_params
    params.require(:posts).permit(:title, :content)
  end
end
```

```erb:app/views/posts/new.html.erb
<h1>新規投稿</h1>
<%= form_with model: @post, local: true do |form| %>
  <p><%= form.label :title, ""タイトル"" %> <%= form.text_field :title %></p>
  <p><%= form.label :content, ""内容"" %> <%= form.text_field :content %></p>
  <p><%= form.submit ""送信"" %></p>
<% end %>
```"
Ruby on Rails,メッセージ投稿アプリ（その1・CRUD処理）,"次の手順でメッセージ投稿アプリを作成しつつ，Railsの基礎を学んでいきましょう。

- 簡単なメッセージ投稿アプリを作成（CRUD処理の実装）
- リファクタリング
- フラッシュの実装
- バリデーション
- エラー処理
- Bootstrapでスタイルを付ける

なお，`Git`, `GitHub` も最低限度利用しながら進めていきます。

## アプリを作成

まずはアプリを作成し，データベースを作成しましょう。

```zsh:ターミナル
rails new post_bootstrap_app -d postgresql -T
cd post_bootstrap_app
rails db:create
```

---

- `-d postgresql` はデータベースを `PostgreSQL` に指定するオプション
  - このオプションを付けた場合は `rails db:create` が必須となります
- `-T` は `--skip-test` の略で `MiniTest` のディレクトリを作成しないオプション

---

アプリを作成すると，大量のファイルが作成されますので，すぐにGitでコミットをしておくことをお勧めします。

初回のコミットメッセージは，`first commit`, `initial commit` をよく使用されますが，後者の短縮形である `init` を採用しておきます。

```zsh:ターミナル
git add .
git commit -m ""init""
```

次に，GitHubでリポジトリを作成し，プッシュしておきましょう。リポジトリ名はアプリ名と同じ `post_bootstrap_app` でよいでしょう。

```zsh:ターミナル
# GitHubでリポジトリを作成した後で

git remote add origin URL名
git push origin HEAD
```



`Heroku` にデプロイされたい場合は，この段階で `Heroku` の本番環境・ステージング環境を用意し，パイプラインの構築・自動デプロイまで済ませておきましょう。なお，`Procfile` はこの後の作業ブランチで追加すればよいでしょう。

## コントローラとモデルの作成

作業に入る前に，ブランチを切っておきましょう。

```zsh:ターミナル
git switch -c feature/settings
```

なお，`git switch -c` は `git checkout -b` と同じです。

`checkout` に2種類の役割があったため，Git のバージョン 2.23 から `git switch` が導入されました。どちらを使用しても問題はありません。

### .gitignoreの追記

`.gitignore` に書かれたファイル・ディレクトリは，Git の管理下から除外されます。

不要なファイルをGitHubにプッシュしないように，アプリ作成後すぐに以下を追記しましょう。

```.gitignore
# 以下を追加
.DS_Store
/vendor/bundle

# RubyMineを使用されている方は次も追加
/.idea
```

```zsh:ターミナル
git add .
git commit -m "".gitignore に .DS_Store と /vendor/bundle を追加""
```

---

#### 参考 : なぜ Git の管理下から除外すべきか

`.DS_Store` は `Finder` がフォルダの設定を記録するためのファイルです。

これは他人に共有するメリットがないどころか，無駄にコンフリクトが起きる原因となります。必ず Git の管理下から除外しましょう。

一方，`/vendor/bundle` は次のコマンドを実行した場合に作成される `gem` のディレクトリです。

```
# 旧式（現在，非推奨）
bundle install --path vendor/bundle

# 現在は以下の2つに分かれています
bundle config set path vendor/bundle --local
bundle install
```

`bundle config set path “vendor/bundle” --local` を1度でも使用すると `.bundle/config` ファイルに次の1行が追加されます。

```
BUNDLE_PATH: “vendor/bundle”
```

この設定が入っている状態で `bundle install` を実行すると，アプリ内の `/vendor/bundle` ディレクトリに rails などの各種 gem がインストールされるようになります。

このディレクトリに入るデータ量は `200MB以上` です。

もし，このディレクトリをGitの管理下にいれてしまいますと，全く必要のない大量の gem データを GitHub にプッシュしてしまうことになります。上記コマンドを実行する場合は必ずGitの管理下から外しましょう。

なお，学習用のアプリに gem データを入れるのは時間の無駄ですのでお勧めしません。

詳しくは，以下の記事を参考にして下さい。

- [bundle install時に--path vendor/bundleを付ける必要性は本当にあるのか、もう一度よく考えてみよう](https://qiita.com/jnchito/items/99b1dbea1767a5095d85)

---


### モデルの作成

まず，`Post モデル` と `posts テーブル` を作成していきましょう。

今回はメッセージの投稿アプリということで，「タイトル（`title`）」と「内容（`content`）」の2つのカラムを用意することにします。「内容」の方は長文になる可能性を踏まえ `text` 型にしておきます。

（モデルを作成するコマンドは `Post` のように `単数形` です。小文字 `post` でも問題はありません）

```zsh:ターミナル
rails g model Post title:string content:text
```

作成された2つのファイルを確認しておきましょう。

- モデル

```rb:app/models/post.rb(確認のみ)
class Post < ApplicationRecord
end
```

- マイグレーションファイル

```rb:db/migrate/年月日時_create_posts.rb(確認のみ)
class CreatePosts < ActiveRecord::Migration[6.0]
  def change
    create_table :posts do |t|
      t.string :title
      t.text :content

      t.timestamps
    end
  end
end
```

ここで1点注意があります。

`rails g model` コマンドでは，`テーブル` は作成されていません。

次のコマンドで `マイグレーション` を実行することで，`マイグレーションファイル` が実行され，データベースにテーブルが作成されます。

（本来，マイグレーションの前にカラムに制約を入れる必要がありますが，今回はそのままとします）

```zsh:ターミナル
rails db:migrate
```

マイグレーション後は，必ず `db/schema.rb` を確認しましょう。現在のテーブル一覧を確認できます。

```rb:db/schema.rb(確認のみ)
# 略

  create_table ""posts"", force: :cascade do |t|
    t.string ""title""
    t.text ""content""
    t.datetime ""created_at"", precision: 6, null: false
    t.datetime ""updated_at"", precision: 6, null: false
  end
```

確認ができたらコミットをしましょう。

```zsh:ターミナル
git add .
git commit -m ""Post モデルと posts テーブルを作成""
```

---

#### おまけ：マイグレーションファイルについて

特別なことをしない限り，`マイグレーションファイル` は1度実行されると，2度と実行されません。

（`rails db:migrate:status` でマイグレーションの実行状況を確認できます）

例えば，カラム名を間違えた場合に，単に `マイグレーションファイル` を修正して`rails db:migrate` を実行しても何も起きません。

修正したマイグレーションファイルを反映したい場合，次を使用するのが最も楽です。データベースを作成し直し，マイグレーションを行うコマンドです。

```
rails db:migrate:reset
```

ただし，このコマンドを実行すると，そのアプリで使用している `データベースのデータが全て消えます` 。特に本番環境で無闇に使用してはいけません。

なお，`rails db:rollback`, `rails db:migrate:down` コマンドをうまく使用することで，一部のマイグレーションファイルだけ実行前に戻すことも可能です。

#### おまけ：なぜマイグレーションファイルを編集してはいけないか

masterブランチやdevelopブランチにマージされた後，マイグレーションファイルを修正するのは原則避けるべきです。

なぜ避けるべきか。

最大の理由は，`他の開発者や本番環境などに影響が出る` ためです。

まず，データベースのテーブルやデータは `GitHub` で管理されていません。

例えば，`posts` テーブルのカラム名を変更するために，直接マイグレーションファイルを修正したとします。

自分の開発環境は `rails db:migrate:reset` などで対応できますが，`他の開発者や本番環境には反映されません`。

特に本番環境の対処はかなり厄介です。

このような問題を起こさないため，（マイグレーションを実行した後） `マイグレーションファイルは原則修正してはいけない` のです。

カラム名の追加・修正・削除をしたいならば，`rails g migration` コマンドでその指示を入れたマイグレーションファイルを作成すべきです。

なお，自分の作業ブランチ内で作成したマイグレーションファイルであれば，原則自分にしか問題は発生しませんので，必要があれば修正してもよいでしょう。

---

### 作成されるファイルを制限

コントローラとビューのファイルを作成する前に，`rails g controller` コマンドで作成されるファイルを制限しておきましょう。

次のファイルを作成すれば，コントローラとビュー以外のファイルが作成されないようになります。

```rb:config/initializers/generators.rb(新規作成)
Rails.application.config.generators do |g|
  g.skip_routes true
  g.assets false
  g.helper false
end
```

【補足】このアプリでは問題ありませんが，  `assets` や `stylesheets` を `true`にしておかないと必要なファイルが作成されないことがあります。

ファイルを作成したら，コミットをしておきましょう。

```zsh:ターミナル
git add .
git commit -m ""rails g controller コマンドで作成されるファイルを制限""
```

### コントローラの作成

それでは，次のコマンドで，`コントローラ` と `ビュー` のファイルを作成しましょう。

コントローラを作成する際の `posts` は原則 `複数形` にしなければならないので要注意です。

```zsh:ターミナル
rails g controller posts index show new create edit update destroy
```

作成されたファイルの内，次の3つは使用しませんので削除しておきましょう。

- app/views/posts/create.html.erb
- app/views/posts/destroy.html.erb
- app/views/posts/update.html.erb

なお，次のコマンドで削除することも可能です。

```zsh:ターミナル
rm -f app/views/posts/create.html.erb app/views/posts/destroy.html.erb app/views/posts/update.html.erb
```

これで最低限度の設定は完了ですので，GitHubにプッシュし，プルリクを出し，マージして，masterブランチをプルしておきましょう。

```zsh:ターミナル
git add .
git commit -m ""postsコントローラとビューファイルを作成""

git push origin HEAD

# GitHubでプルリク
# GitHubでコードの差分を確認
# GitHubでマージ

git switch master
git pull origin HEAD
```

なお，GitHubにプルリクを出す際は，次のように `マークダウン` を使用すると見やすくなります。

```none:プルリクのタイトル
初期設定
```

```md:プルリクの本文
## 概要

- メッセージ投稿機能に必要なファイルを作成

### 内容

- `.gitignore` に `.DS_Store` と `/vendor/bundle` を追加
- `rails g controller` コマンドで作成されるファイルを「コントローラ」と「ビュー」に制限
- メッセージ投稿用の「モデル」「コントローラ」「ビュー」のファイルを作成
```

## CRUD処理

作業に入る前に，ブランチを切っておきましょう。

```zsh:ターミナル
git switch -c feature/post-crud
```

### ルーティングの設定

最初にルーティングを設定しておきましょう。

（トップページは仮に一覧表示に設定しておきます）

```config/routes.rb
Rails.application.routes.draw do
  root ""posts#index""
  resources :posts
end
```

`resources :posts` で作成されるルーティングは `rails routes` で確認ができます。

ただ，これをそのまま実行すると他のルーティングがたくさん含まれてしまいます。例えば次を実行すれば `posts` が含まれる行のみを表示できます。

```zsh:ターミナル
rails routes | grep posts
```

Prefix | HTTPメソッド | URL | Controller#Action
--- | --- | --- | ---
posts | GET | /posts | posts#index
〃 | POST | /posts | posts#create
new_post | GET | /posts/new | posts#new
edit_post | GET | /posts/:id/edit | posts#edit
post | GET | /posts/:id | posts#show
〃 | PATCH | /posts/:id | posts#update
〃 | PUT | /posts/:id | posts#update
〃 | DELETE | /posts/:id | posts#destroy

ルーティングの設定が完了したら，コミットしておきましょう。

```zsh:ターミナル
git add .
git commit -m ""ルーティングを作成""
```

## リンクの作成

全てのページで `一覧ページ` と `新規投稿ページ` のリンクが表示されるようにしておきましょう。

全てのページに共通するコードは `application.html.erb` にありますので，ここに追記しましょう。

```app/views/layouts/application.html.erb
<!-- ***** 略 ***** -->

  <body>
    <!-- ***** 以下を追加 ***** -->
    <%= link_to ""投稿一覧"", posts_path %> <%= link_to ""新規投稿"", new_post_path %>
    <hr>
    <!-- ***** 以上を追加 ***** -->
    <%= yield %>
  </body>
</html>
```

ここで `link_to` ヘルパーメソッドが出てきましたが，以下は全て同じものです。

```erb:link_toの書き方（全て同じ）
<%= link_to ""投稿一覧"", posts_path %>
<%= link_to ""投稿一覧"", ""/posts"" %>
<a href=""/posts"">投稿一覧</a>
```

HTMLではリンクは `<a>` タグを使用しますが，Railsではよく `link_to` を使用されます。「ページのソース」を確認すると明らかなように，中身は通常の `a`タグです。

URLを用いた書き方もできますが， `link_to` の場合は `rails routes` で表示される `Prefix` を利用したパスで表すことができます。通常，こちらの記法が使用されます。

Prefix | HTTPメソッド | URL | Controller#Action
--- | --- | --- | ---
posts | GET | /posts | posts#index
new_post | GET | /posts/new | posts#new

例えば，新規投稿（`posts#new`）に対応する Prefix は `new_post` ですので，path は `new_post_path` です。 （ `Prefix` に `_path` を付けた形式です）

リンクを追加したら，コミットしておきましょう。

```zsh:ターミナル
git add .
git commit -m ""投稿一覧・新規投稿ページへのリンクを追加""
```

### 新規投稿(new, create)

それでは，新規投稿機能を作成していきましょう。

ルーティングは全て設定済みですので，コントローラとビューを順番に作成していきましょう。

```app/controllers/posts_controller.rb
class PostsController < ApplicationController
  # 略

  def new
  # ***** 以下を追加 *****
    @post = Post.new
  # ***** 以上を追加 *****
  end

  def create
  # ***** 以下を追加 *****
    post = Post.create!(post_params)
    redirect_to post
  # ***** 以上を追加 *****
  end

  # 略

  # ***** 以下を追加 *****
  private

  def post_params
    params.require(:post).permit(:title, :content)
  end
  # ***** 以上を追加 *****
end
```

`create` アクションで， `redirect_to post` が出てきていますが，この書き方で `投稿詳細ページ` にリダイレクトさせることができます。

具体的には，次は全て同じです。特に理由がなければ，最初か最後の書き方を使用していきましょう。

```rb:redirect_toの書き方（全て同じ）
redirect_to post
redirect_to ""/posts/#{post.id}""
redirect_to action: :show, id: post.id
redirect_to post_path(post.id)
redirect_to post_path(post)
```

なお，ストロングパラメータ（private の下にある `post_params`）については，デバッグの教材で解説していますので，ここでは省略します。

次にビューファイルを作成しましょう。新規投稿後は「詳細ページ（`show.html.erb`）」にリダイレクトさせますので，`create.html.erb` は不要です。

```app/views/posts/new.html.erb
<h1>新規投稿</h1>
<%= form_with model: @post, local: true do |form| %>
  <div>
    <%= form.label :title, ""タイトル"" %>
    <%= form.text_field :title %>
  </div>
  <div>
    <%= form.label :content, ""内容"" %>
    <%= form.text_field :content %>
  </div>
  <div>
    <%= form.submit ""送信"" %>
  </div>
<% end %>
```

`form_with model: @post` で「create アクションに対応するURL」を「投稿先のURL」に設定できます。

`@post` の中身は `Post.new` ですので，ここから Rails が自動で決定しています。

`local: true`の解説は省略しますが，このオプションの意味を理解していない間は `必ず付ける` ようにして下さい。これがないと，投稿後にページが移動しない問題が発生します。

なお，古い記事で `form_for` や `form_tag` を見かけることがあると思いますが，Rails 5.1から`form_with`に統合されていますので原則こちらを使用していくようにしましょう。

```zsh:ターミナル
git add .
git commit -m ""新規投稿機能を実装""
```

### 詳細(show)

次に，詳細表示ページを作成していきましょう。

```app/controllers/posts_controller.rb
class PostsController < ApplicationController
  # 略

  def show
    # ***** 以下を追加 *****
    @post = Post.find(params[:id])
    # ***** 以上を追加 *****
  end

  # 略

end
```

`params[:id]` は，URLの `posts/:id` の `:id` に対応する数です。ここから，対応する投稿をデータベースから取り出し `@post` に代入しています。

```app/views/posts/show.html.erb
<h1>投稿詳細</h1>
<p>タイトル <%= @post.title %></p>
<p>内容 <%= @post.content %></p>
```

それでは，ここで動作確認をしていきましょう。

```zsh:ターミナル
rails s
```

でサーバーを起動し，新規投稿ページにアクセスし，問題なく投稿ができるか確認しましょう。

新規投稿ページのURL: [http://localhost:3000/posts/new](http://localhost:3000/posts/new)

（URLは，`rails routes | grep posts` で確認できます）

確認ができたら，コミットをしておきましょう。

```zsh:ターミナル
git add .
git commit -m ""詳細表示機能を実装""
```

---

#### おまけ

`posts_controller` において， `create` アクションでは変数名を `post`, `show` アクションでは変数名を `@post` にしています。

`@` を付けた変数はビューで使用できますが，`@`を付けていない変数はビューで使用できません。

変数に`@`を付ければ，ビューで使用する場合にも使用しない場合にも対応できますが，無駄に`@`を付けないように心がけましょう。

---

### 一覧(index)

一覧ページを作成していきましょう。一覧ページでは「タイトル」のみを表示する形式としておきます。

```app/controllers/posts_controller.rb
class PostsController < ApplicationController
  def index
    # ***** 以下を追加 *****
    @posts = Post.order(id: :asc)
    # ***** 以上を追加 *****
  end

  # 略

end
```

`Post.all` を使用すると，「編集時に順番が入れ替わってしまう」問題が起きるため，id順で並べるようにしておきます。

```app/views/posts/index.html.erb
<h1>投稿一覧</h1>
<table>
  <thead>
    <tr>
      <th scope=""col"">No.</th>
      <th scope=""col"">タイトル</th>
      <th scope=""col""></th>
    </tr>
  </thead>
  <tbody>
    <% @posts.each.with_index(1) do |post, i| %>
      <tr>
        <th scope=""row""><%= i %></th>
        <td><%= post.title %></td>
        <td>
          <%= link_to ""詳細"", post %>
          <%= link_to ""編集"", edit_post_path(post) %>
          <%= link_to ""削除"", post, method: :delete, data: { confirm: ""削除しますか?"" } %>
        </td>
      </tr>
    <% end %>
  </tbody>
</table>
```

「詳細」「編集」などのリンクが縦に並ぶように，`<table>` タグを利用しています。

（`<table>` の基本的な使い方が分からない場合は検索しましょう！）

1行目のヘッダ部分は固定で，2行目以降はデータベースから取り出した「タイトル（title）」などが並ぶように `each` メソッドで繰り返し処理を行っています。

さらに，`link_to` について2つ解説しておきます。

`<%= link_to ""詳細"", post %>` が出てきていますが，これで詳細ページへのリンクを作成できます。次は全て同じです。

```erb:link_toの書き方（全て同じ）
<%= link_to ""詳細"", post %>
<%= link_to ""詳細"", post_path(post.id) %>
<%= link_to ""詳細"", post_path(post) %>
<%= link_to ""詳細"", ""/posts/#{post.id}"" %>
<a href=""/posts/<%= post.id %>"">詳細</a>
```

一方，削除のリンクに `method: :delete` が入っています。

Prefix | HTTPメソッド | URL | Controller#Action
--- | --- | --- | ---
post | DELETE | /posts/:id | posts#destroy

`link_to` は特に指定しない限りHTTPメソッドが `GET` です。`DELETE` の場合は`method: :delete` のように追記する必要があります。

また，`data: { confirm: ""削除しますか?"" }` を入れることで，クリック時に確認ダイアログを表示することができます。

```zsh:ターミナル
git add .
git commit -m ""一覧表示機能を実装""
```

### 削除（destroy）

削除のリンクは作成済みですので，コントローラだけ追記しましょう。

```app/controllers/posts_controller.rb
class PostsController < ApplicationController
  # 略

  def destroy
    # ***** 以下を追加 *****
    post = Post.find(params[:id])
    post.destroy!
    redirect_to post
    # ***** 以上を追加 *****
  end

  # 略

end
```

サーバーを起動し，削除ができるか確認した上でコミットしましょう。

```zsh:ターミナル
git add .
git commit -m ""削除機能を実装""
```

### 編集（edit, update）

最後に編集機能を実装しましょう。

```app/controllers/posts_controller.rb
class PostsController < ApplicationController
  # 略

  def edit
    # ***** 以下を追加 *****
    @post = Post.find(params[:id])
    # ***** 以上を追加 *****
  end

  def update
    # ***** 以下を追加 *****
    post = Post.find(params[:id])
    post.update!(post_params)
    redirect_to post
    # ***** 以上を追加 *****
  end

  # 略

end
```

```app/views/posts/edit.html.erb
<h1>編集</h1>
<%= form_with model: @post, local: true do |form| %>
  <div>
    <%= form.label :title, ""タイトル"" %>
    <%= form.text_field :title %>
  </div>
  <div>
    <%= form.label :content, ""内容"" %>
    <%= form.text_field :content %>
  </div>
  <div>
    <%= form.submit ""送信"" %>
  </div>
<% end %>
```

中身は `new.html.erb` とほぼ同じです。

今回は，`@post` はデータベースに存在するデータですので，ここから Rails が update に対応する 「URL」「HTTPメソッド」を自動で決めているのです。

サーバーを起動し，編集ができるか確認した上でコミットしましょう。

```zsh:ターミナル
git add .
git commit -m ""編集機能を実装""
```

これで，投稿機能を一通り実装することができました！

GitHubにプッシュし，プルリクを出し，マージして，masterブランチをプルしておきましょう。

```
git push origin HEAD

# GitHubでプルリク
# GitHubでコードの差分を確認
# GitHubでマージ

git switch master
git pull origin HEAD
```"
Ruby on Rails,メッセージ投稿アプリ（その2・エラー処理）,"## リファクタリング

投稿機能が一通り完成しましたが，よく眺めてみますと重複している箇所が複数あります。

全く同じ処理を複数箇所に書いてしまうと，修正時に全て変更しなければならなくなり，変更のしづらいプログラムとなります。

`before_action` と 部分テンプレートを利用して，なるべく処理を共通化させていきましょう。

作業に入る前に，ブランチを切っておきましょう。

```zsh:ターミナル
git switch -c feature/post-crud-refactoring
```

### before_action

改めて `posts_controller.rb` を眺めてみましょう。

`@post = Post.find(params[:id])` が3箇所出てきています。（1箇所だけ`@`がありませんが）

これは `before_action` フィルタで共通化できます。`before_action :メソッド名` で各アクションの前に実行するメソッドを指定できます。限定したい場合は，`only` や `except` を使います。

```app/controllers/posts_controller.rb
class PostsController < ApplicationController
  # ***** 以下を追加 *****
  before_action :set_post, only: %i[show edit update destroy]
  # ***** 以上を追加 *****

  def index
    @posts = Post.order(id: :asc)
  end

  def show
  # ***** 修正 *****
  end

  def new
    @post = Post.new
  end

  def create
    post = Post.create!(post_params)
    redirect_to post
  end

  def edit
  # ***** 修正 *****
  end

  def update
  # ***** 修正(@を追加しているので注意！) *****
    @post.update!(post_params)
    redirect_to @post
  end

  def destroy
  # ***** 修正(@を追加しているので注意！) *****
    @post.destroy!
    redirect_to @post
  end

  private

  # ***** 以下を追加 *****
  def set_post
    @post = Post.find(params[:id])
  end
  # ***** 以上を追加 *****

  def post_params
    params.require(:post).permit(:title, :content)
  end
end
```

共通化のために `update`, `destroy`アクションで `post` を `@post` に変更している点に注意して下さい。

（エラー時にビュー側でこの変数を使用しますので，無駄に `@` を付けることにはなりません）

```zsh:ターミナル
git add .
git commit -m ""コントローラの処理を before_action で共通化""
```

### 部分テンプレート

次にビューを眺めてみましょう。`new.html.erb` と `edit.html.erb` が1行目以外全く同じです。

これは `部分テンプレート` を使用することで共通化することができます。

共通部分を抜き出して，部分テンプレート `_form.html.erb` を作成しましょう。ファイル名の最初を `_` で始めることに注意しましょう。

```erb:app/views/posts/_form.html.erb(新規作成)
<%= form_with model: @post, local: true do |form| %>
  <div>
    <%= form.label :title, ""タイトル"" %>
    <%= form.text_field :title %>
  </div>
  <div>
    <%= form.label :content, ""内容"" %>
    <%= form.text_field :content %>
  </div>
  <div>
    <%= form.submit ""送信"" %>
  </div>
<% end %>
```

`<%= render ""_を除いたファイル名"" %>` でこの部分テンプレートを使用できます。

```app/views/posts/new.html.erb
<!-- ***** 以下に置き換える ***** -->
<h1>新規投稿</h1>
<%= render ""form"" %>
```

```app/views/posts/edit.html.erb
<!-- ***** 以下に置き換える ***** -->
<h1>編集</h1>
<%= render ""form"" %>
```

だいぶすっきりしましたね！

さらに「変数」を利用すれば，送信ボタンの表示名を，新規投稿ページでは「投稿」，編集ページでは「更新」にすることができます。

```app/views/posts/_form.html.erb
<%= form_with model: @post, local: true do |form| %>
  <div>
    <%= form.label :title, ""タイトル"" %>
    <%= form.text_field :title %>
  </div>
  <div>
    <%= form.label :content, ""内容"" %>
    <%= form.text_field :content %>
  </div>
  <div>
    <!-- ***** ""送信""を button_value に変更 ***** -->
    <%= form.submit button_value %>
  </div>
<% end %>
```

```app/views/posts/new.html.erb
<h1>新規投稿</h1>
<!-- ***** 変数を追加 ***** -->
<%= render ""form"", button_value: ""投稿"" %>
```

```app/views/posts/edit.html.erb
<h1>編集</h1>
<!-- ***** 変数を追加 ***** -->
<%= render ""form"", button_value: ""更新"" %>
```

```zsh:ターミナル
git add .
git commit -m ""投稿ページを部分テンプレートで共通化""
```

次に，`application.html.erb` のリンク部分も，部分テンプレート `_header.html.erb` に切り出すことにしましょう。

```app/views/layouts/application.html.erb
<!-- ***** 略 ***** -->

  <body>
    <!-- ***** リンクとhrタグ部分をカットし，次に置き換える ***** -->
    <%= render ""layouts/header"" %>
    <%= yield %>
  </body>
</html>
```

```erb:app/views/layouts/_header.html.erb(新規作成)
<!-- ***** こちらにペースト ***** -->
<%= link_to ""投稿一覧"", posts_path %> <%= link_to ""新規投稿"", new_post_path %>
<hr>
```

後に，このヘッダー部分は `Bootstrap` でスタイルを付ける際にコード量が増えます。

`application.html.erb`は情報量が多いので，このファイルに大量のコードを書くのはなるべく避けるべきです。

なお，`<%= render ""header"" %>` としないように注意しましょう。

例えば，新規投稿ページ（`posts#new`）で部分テンプレートを使用する際は，`<%= render ""posts/form"" %>`の `posts` を `<%= render ""form"" %>` と略せますが，`<%= render ""header"" %>` では `<%= render ""posts/header"" %>` の意味になってしまい，エラーが出ます。

```zsh:ターミナル
git add .
git commit -m ""ヘッダーを部分テンプレート化""
```

それでは，GitHubにプッシュし，プルリクを出し，マージして，masterブランチをプルしておきましょう。

```
git push origin HEAD

# GitHubでプルリク
# GitHubでコードの差分を確認
# GitHubでマージ

git switch master
git pull origin HEAD
```

## フラッシュ

現状，投稿した後に何のメッセージもなく投稿詳細ページに移動しています。

これでは，本当に投稿や更新ができているのか不安になる方もあるでしょう。

一覧表示にリダイレクトするように設定しているならば，なおさらです。

そこで `フラッシュ` を追加し，投稿に成功しているかどうかを表示すれば，そのような不安を解消することができます。

作業に入る前に，ブランチを切っておきましょう。

```zsh:ターミナル
git switch -c feature/flash
```

### フラッシュメッセージの設定

フラッシュを表示するには2種類の作業が必要です。

- コントローラでフラッシュメッセージを設定
- ビューでフラッシュメッセージを表示

まずは，コントローラから準備していきましょう。

```app/controllers/posts_controller.rb
class PostsController < ApplicationController
  # 略

  def create
    post = Post.create!(post_params)
    # ***** 次を編集 *****
    redirect_to post, notice: ""投稿しました""
  end

  def edit
  end

  def update
    @post.update!(post_params)
    # ***** 次を編集 *****
    redirect_to @post, notice: ""更新しました""
  end

  def destroy
    @post.destroy!
    # ***** 次を編集 *****
    redirect_to @post, alert: ""削除しました""
  end

  # 略

end
```

一般に，`flash[:notice] = ""フラッシュメッセージ""`のように書けばフラッシュを設定できます。

ただ，今回のようにフラッシュとリダイレクトを併用する場合は，まとめることができます。

```rb:(参考)
# 次の2行は「redirect_to post, notice: ""投稿しました""」と同じ意味

flash[:notice] = ""投稿しました""
redirect_to post
```

フラッシュはデフォルトでは2種類あり，成功時は`notice`，失敗時や削除時は`alert`を使うのが通例です。

```zsh:ターミナル
git add .
git commit -m ""コントローラでフラッシュメッセージを設定""
```

### フラッシュメッセージの表示

コントローラにフラッシュメッセージを設定しただけでは表示されません。
ビュー側でフラッシュを表示する箇所を指定する必要があります。

今回は，全ページで使用できるように `application.html.erb` に追記することにしましょう。

```app/views/layouts/application.html.erb
<!-- ***** 略 ***** -->

  <body>
    <%= render ""layouts/header"" %>
    <!-- ***** 次を追加 ***** -->
    <%= render ""layouts/flash"" %>
    <%= yield %>
  </body>
</html>
```

```erb:app/views/layouts/_flash.html.erb(新規作成)
<% flash.each do |flash_type, msg| %>
  <p><%= msg %></p>
  <hr>
<% end %>
```

フラッシュを単に表示させるだけならば，`<%= flash[:notice] %>` または `<%= flash[:alert] %>` でよいのですが，両方を共通化させるため，上記のように `each` メソッドを利用する方法がよく使われます。

`flash_type` を利用して次のように条件分岐すれば， `notice` の場合と `alert` の場合で「色分け」もできます。

```app/views/layouts/_flash.html.erb
<% flash.each do |flash_type, msg| %>
  <p style=""color: <%= flash_type == 'notice' ? 'green' : 'red' %>;""><%= msg %></p>
  <hr>
<% end %>
```

（フラッシュは後に `Bootstrap` を利用してよりよい形に修正します）

```zsh:ターミナル
git add .
git commit -m ""フラッシュメッセージをヘッダー下部に表示できるように設定""
git push origin HEAD

# GitHubでプルリク
# GitHubでコードの差分を確認
# GitHubでマージ

git switch master
git pull origin HEAD
```

## バリデーション

現在のアプリには一つ大きな問題点があります。

実は「何も入力しなくても投稿ができてしまう」のです！

また，例えば10万文字の投稿もできてしまいます。

空投稿を禁止したり，文字数制限を入れたい場合は，モデルに `バリデーション` が必要です。

本来は，`rails g model` の実行後すぐに行うべきことなのですが，バリデーションを入れますと `別の問題が発生` します。

そこで，あえてこのタイミングで解説することにします。作業に入る前に，ブランチを切っておきましょう。

```zsh:ターミナル
git switch -c feature/add-validation
```

### バリデーションの追加

`posts` テーブルには「タイトル（`title`）」と「内容（`content`）」のカラムがあります。

今回は次のようにバリデーションを決めておくことにしましょう。

- title（空文字禁止，50文字以下）
- content（空文字禁止，500文字以下）

この場合であれば，次のように書きます。

```app/models/post.rb
class Post < ApplicationRecord
  # ***** 以下を追加 *****
  validates :title, presence: true, length: { maximum: 50 }
  validates :content, presence: true, length: { maximum: 500 }
  # ***** 以上を追加 *****
end
```

バリデーションが効いているか，コンソールを使用して確かめてみましょう。

（本当は `RSpec` などでテストを書くとよいのですが，話が膨らみすぎますので略します）

```zsh:ターミナル
rails c
```

```rb:コンソール
Post.create!(title: """", content: """")
Post.create!(title: """", content: ""おはよう"")
Post.create!(title: ""こんにちは"", content: """")
Post.create!(title: ""a"" * 51, content: ""こんばんは"")
Post.create!(title: ""おやすみ"", content: ""b"" * 501)
```

全てバリデーションエラーが出るでしょう。

（`create!` ではなく `create` にすると，エラーメッセージが出ません）

確認ができたら，サーバーを起動して空投稿（フォームに何も入力せず投稿）してみましょう。

次のような表示が出ていればOKです。

```none:ターミナルのログ
ActiveRecord::RecordInvalid (Validation failed: Content can't be blank, Title can't be blank):
```

フィールドの片方だけ入力して投稿した際にもエラーが出ることを確認しましょう。

確認ができれば，今回はこれでコミットしてプルリク・マージまで済ませましょう。

```zsh:ターミナル
git add .
git commit -m ""Post モデルにバリデーションを追加""
git push origin HEAD

# GitHubでプルリク
# GitHubでコードの差分を確認
# GitHubでマージ

git switch master
git pull origin HEAD
```

## エラーメッセージの表示

さて，バリデーションを入れますと，「バリデーションエラーが出た際にどのように対処するのか」が問題になります。

対処方法はいろいろあるのですが，今回はRailsが自動生成するエラーメッセージを利用する形式で解説していきます。

作業に入る前に，ブランチを切っておきましょう。

```zsh:ターミナル
git switch -c feature/error-message
```

### エラーメッセージの日本語化

最初に，エラーメッセージを日本語化しておきましょう。`rails-i18n` を利用すれば簡単に対応できます。

- 【参考】 [rails-i18nのGitHub](https://github.com/svenfuchs/rails-i18n)

```Gemfile
# 略
gem 'bootsnap', '>= 1.4.2', require: false
# ***** 以下を追加 *****
gem 'rails-i18n', '~> 6.0.0'
# ***** 以上を追加 *****
group :development, :test do
# 略
```

```zsh:ターミナル
bundle install
```

```zsh:ターミナル
git add .
git commit -m ""rails-i18n をインストール""
```

これでgemをインストールできましたが，これだけでは日本語にはなりません。

この gem はあくまでも `多言語` に対応できるようにするためのものですので，日本語にしたい場合はその設定を追加しなければなりません。

```config/application.rb
# 略
module CrudSampleApp
  class Application < Rails::Application
    # Initialize configuration defaults for originally generated Rails version.
    config.load_defaults 6.0
    # ***** 以下を追加 *****
    config.i18n.default_locale = :ja
    # ***** 以上を追加 *****
    # Settings in config/environments/* take precedence over those specified here.

    # 略
```

さらに，日本語訳をダウンロードしておきましょう。

直接[本家](https://github.com/svenfuchs/rails-i18n/blob/master/rails/locale/ja.yml)からダウンロードして，`config/locales/ja.yml`というファイル名で保存してもよいのですが，楽をするために `curl` コマンドで直接アプリ内に入れてしまいましょう。

```
curl -o config/locales/ja.yml -L https://raw.github.com/svenfuchs/rails-i18n/master/rails/locale/ja.yml
```

再度，以下を試してみましょう。

```zsh:ターミナル
rails c
```

```rb:コンソール
Post.create(title: """", content: """")
Post.create!(title: """", content: """")
Post.create!(title: """", content: ""おはよう"")
Post.create!(title: ""こんにちは"", content: """")
Post.create!(title: ""a"" * 51, content: ""こんばんは"")
Post.create!(title: ""おやすみ"", content: ""b"" * 501)
```

エラーメッセージがほぼ日本語になっていますが，「Titleを入力してください」のように中途半端です。

これは，モデルのカラムに対応する日本語訳を設定できていないからです。`ja.yml`に追記しましょう。

（`yml` 形式はインデント幅に厳格で，`半角1マスでも違っているとエラーが発生します`）

```config/locales/ja.yml
---
ja:
  activerecord:
    # ***** 以下を追加 *****
    models:
      post: メッセージ
    attributes:
      post:
        title: タイトル
        content: 内容
    # ***** 以上を追加 *****
    errors:
      messages:
        # 略
```

再度，コンソールを起動して確かめましょう。

実は，この日本語訳はフォームのラベルでも使用できます。次のように修正しておきましょう。

```app/views/posts/_form.html.erb
<!-- 略 -->
  <div>
  <!-- ***** 次を修正(, ""タイトル"" を消去) ***** -->
    <%= form.label :title %>
    <%= form.text_field :title %>
  </div>
  <div>
  <!-- ***** 次を修正 ***** -->
    <%= form.label :content %>
    <%= form.text_field :content %>
  </div>
<!-- 略 -->
```

サーバーを起動して新規投稿ページなどを確認しましょう。

確認ができたらコミットしておきましょう。

```zsh:ターミナル
git add .
git commit -m ""エラーメッセージを日本語化""
```

### エラー時の処理を変更

現在，バリデーションエラーなどが発生したときは，`create!`メソッドでエラーを発生させるようにしています。

```rb:app/controllers/posts_controller.rb(確認のみ)
  # 略
  def create
    # 次に注目！
    post = Post.create!(post_params)
    redirect_to post, notice: ""投稿しました""
  end
  # 略
```

エラーが出た際に，アプリ内でエラーメッセージを表示するには，コントローラの処理を変更する必要があります。

データベースの保存・更新に成功した際はこれまで通りリダイレクトを行い，失敗した場合は投稿ページに戻るようにしておきます。

```app/controllers/posts_controller.rb
  # 略

  def create
    # ***** 以下を修正 *****
    @post = Post.new(post_params)
    if @post.save
      redirect_to @post, notice: ""投稿しました""
    else
      flash.now[:alert] = ""投稿に失敗しました""
      render :new
    end
    # ***** 以上を修正 *****
  end

  # 略

  def update
    # ***** 以下を修正 *****
    if @post.update(post_params)
      redirect_to @post, notice: ""更新しました""
    else
      flash.now[:alert] = ""更新に失敗しました""
      render :edit
    end
    # ***** 以上を修正 *****
  end

  # 略
```

いろいろと新しい内容が出てきましたが，ひとまずサーバーを起動し，新規投稿ページや編集ページで空投稿などをしてみましょう。

エラーのページには移動しないようになっています。解説をする前に，先にコミットしておきましょう。


```zsh:ターミナル
git add .
git commit -m ""バリデーションエラー時に投稿ページをレンダリングするように修正""
```



#### バリデーションエラー時は `レンダリング` を使用

保存が失敗した際に `リダイレクト` ではなく `レンダリング` を使用しています。

`render :new` ではなく `redirect_to action: :new` のようにリダイレクトさせると，1つ問題が起こります。

試しに置き換えてみるとよいでしょう。

新規投稿ページで，タイトルに51文字以上入力して投稿すると，バリデーションエラーが発生し，新規投稿ページに戻ります。

ところが，`入力した文字が全て消えてしまいます`。

リダイレクトさせると，入力した情報が全て消えてしまうためです。(コントローラで設定したインスタンス変数 `@post` などの情報は，リダイレクト時に全て消えます)

`render :new` のようにレンダリングさせると，入力値を残したまま新規投稿ページに戻すことができます。

ただし，例えば `new` アクションにレンダリングする際は，`new.html.erb` で使用している `@post` が必要となります。(`new` アクションは動作しません)

createアクションの `post` を `@post` に変更した理由はここにあります。

#### レンダリングする際の注意点

バリデーションエラー時にレンダリングを使う場合，注意すべき点が複数あります

- フラッシュを設定する場合は `flash.now` を使用
- エラー箇所のラベル・フィールドに，自動で`field_with_errors` クラスを持つ `<div>`タグが付く
- URLが，レンダリングの呼び出し先のアクションとなる

順番に確認していきましょう。

- フラッシュを設定する場合は `flash.now` を使用

フラッシュとレンダリングを併用する場合は，`flash` ではなく `flash.now` を使用しなければなりません。

試しに，`create`アクションの `flash.now` を `flash`に変更して，フォームに入力せずに新規投稿しましょう。そして，一覧ページに移動してみて下さい。フラッシュが残ったままになります。

`flash` は次のアクションが動くまで残る仕様ですので，レンダリングで `flash` を使用すると，他のページに移動しても1度だけフラッシュが残ってしまいます。`flash.now` にすれば，次のアクションが動いた時点で消えます。

- エラー箇所のラベル・フィールドに，自動で `field_with_errors` クラスを持つ `<div>`タグが付く

バリデーションエラーが発生した際に，スタイルが変化している(ラベルとフィールドが改行されている)ことに気付きましたか？

Chromeの検証ツールで確認してみましょう。

```html:バリデーションエラー前のフォーム(確認のみ)
<div>
  <label for=""post_title"">タイトル</label>
  <input type=""text"" name=""post[title]"" id=""post_title"">
</div>
```

```html:バリデーションエラー後のフォーム(確認のみ)
<div>
  <div class=""field_with_errors""><label for=""post_title"">タイトル</label></div>
  <div class=""field_with_errors""><input type=""text"" value="""" name=""post[title]"" id=""post_title""></div>
</div>
```

エラーの出たラベル・フィールド に `field_with_errors` クラスを持つ `<div>`タグが追加されています。

これは Rails の仕様です。クラスにスタイルを付けることで，例えばエラーしたフィールドの枠を赤色にして目立たせる，ということが可能になっているのです。

ただ，`<div>` で囲まれてしまったことでスタイルが変化してしまいました。解消するため，`display` プロパティを修正しましょう。

```app/assets/stylesheets/application.css
/*
 *= require_tree .
 *= require_self
 */

// ***** 以下を追加 *****

div.field_with_errors {
  display: contents;
}
```

なお，エラーしたフィールドを赤色にしたい場合は，次のように設定しましょう。`scss` 記法を用いていますので，ファイルの拡張子 `css` を `scss` に変更して下さい。

```scss:app/assets/stylesheets/application.scss(application.cssの拡張子を変更)
/*
 *= require_tree .
 *= require_self
 */

div.field_with_errors {
  display: contents;

// ***** 以下を追加 *****
  input {
    border: 2px solid red;
  }
// ***** 以上を追加 *****
}
```

```zsh:ターミナル
# git status や git diff でスタイル以外の変更を戻し忘れていないか確認

git add .
git commit -m ""バリデーションエラー時のフィールド枠を赤色に変更""
```

- URLが，レンダリングの呼び出し先のアクションとなる

例えば，新規投稿時(`create` アクションに対応するURLは `/posts`)にバリデーションエラーが発生した場合，新規投稿ページにもかかわらずURLが `/posts` のままになっています。

リダイレクトしていないのでURLは変わりません。無理やり合わせることはお勧めできませんので，無視しましょう。

### エラーメッセージの表示

最後に，エラーメッセージを表示できるようにしましょう。まず，どのようにメッセージが入っているかをコンソールで確認してみましょう。

```zsh:ターミナル
rails c
```

```rb:コンソール
post = Post.new(title: ""a"" * 51, content: """")
post.errors
post.save
post.errors
post.errors.full_messages
```

`save`メソッドに失敗した際に，エラーメッセージが追加されています。これをビューに表示すればよいわけです。

エラーメッセージはフォームのすぐ上にリスト表示させることにします。

```erb:app/views/layouts/_error_messages.html.erb(新規作成)
<% if @post.errors.any? %>
  <div>
    <ul>
      <% @post.errors.full_messages.each do |msg| %>
        <li><span style=""color: red;""><%= msg %></span></li>
      <% end %>
    </ul>
  </div>
<% end %>
```

```erb:app/views/posts/_form.html.erb
<!-- ***** 一番上に追加 ***** -->
<%= render ""layouts/error_messages"" %>
<!-- ***** 略 ***** -->
```

サーバーを起動し，空投稿してみましょう。全てのエラーメッセージがリスト形式で表示されればOKです。

長くなりましたが，これでスタイル部分を除いてかなり使いやすくなったでしょう。

その3では，Bootstrapを利用して見た目も最低限度の状態に仕上げていきましょう！

```zsh:ターミナル
git add .
git commit -m ""バリデーションエラーメッセージを表示できるように設定""
git push origin HEAD

# GitHubでプルリク
# GitHubでコードの差分を確認
# GitHubでマージ

git switch master
git pull origin HEAD
```"
Ruby on Rails,メッセージ投稿アプリ（その3・Bootstrap）,"## Bootstrap と FontAwesome の導入(Rails 6)

メッセージ投稿機能を実装し，バリデーションを入れ，フラッシュ・エラーメッセージ 表示機能を実装してきました。

最後に，CSSでスタイルを適用し，見た目もよりよい状態にしていきましょう。

ここでは，簡単に実装するため `Bootstrap` と `Font Awesome` を利用します。

作業に入る前に，ブランチを切っておきましょう。

```zsh:ターミナル
git switch -c feature/add-bootstrap-and-fontawesome
```

### Bootstrap と FontAwesome のインストール

`Rails 6` の前提で導入方法を解説します。 `Rails 5` の場合は情報がたくさんありますので，各自で調べて下さい。

```zsh:ターミナル
yarn add bootstrap jquery popper.js @fortawesome/fontawesome-free
git add .
git commit -m ""Bootstrap と FontAwesome を インストール""
```

### Bootstrap と FontAwesome のインポート

インストールだけでは使えませんので，ファイルを読み込めるように設定しましょう。

```app/javascript/packs/application.js
// ***** 一番下に追加（コメントは全て削除してOKです） *****
require(""bootstrap/dist/js/bootstrap"")
require(""@fortawesome/fontawesome-free/js/all"")
```

```app/assets/stylesheets/application.scss
/*
 *= require_tree .
 *= require_self
 */

/* 以下を追加 */
@import ""bootstrap/scss/bootstrap"";

$fa-font-path: '@fortawesome/fontawesome-free/webfonts';
@import ""@fortawesome/fontawesome-free/scss/fontawesome"";
@import ""@fortawesome/fontawesome-free/scss/regular"";
@import ""@fortawesome/fontawesome-free/scss/solid"";
@import ""@fortawesome/fontawesome-free/scss/brands"";
/* 以上を追加 */

.field_with_errors {
  display: contents;

  input {
    border: 2px solid red;
  }
}
```

```zsh:ターミナル
git add .
git commit -m ""Bootstrap と FontAwesome をインポート""
```

### Bootstrap と FontAwesome の動作確認

それでは，動作確認をしておきましょう。一覧表示に対応する `index.html.erb` の一番上に次を追加してみましょう。

```app/views/posts/index.html.erb
<!-- ***** 以下を一番上に仮置き ***** -->
<a href=""#"" class=""btn btn-primary"">アイコン無し</a>
<a href=""#"" class=""btn btn-primary""><i class=""fas fa-envelope-open-text""></i> 詳細</a>

<%= link_to ""アイコン無し"", ""#"", class: ""btn btn-success"" %>
<%= link_to '<i class=""far fa-edit""></i> 編集'.html_safe, ""#"", class: ""btn btn-success"" %>

<%= link_to ""#"", class: ""btn btn-danger"" do %>
  アイコン無し
<% end %>
<%= link_to ""#"", class: ""btn btn-danger"" do %>
  <i class=""far fa-trash-alt""></i> 削除
<% end %>
<!-- ***** 以上を追加 ***** -->
```

「投稿一覧」の上に，青色と緑色のボタンが表示されていれば `Bootstrap` の導入はOKです。さらに，ボタンの中にアイコンが表示されていれば `Font Awesome` の導入もOKです。

ここで Rails における `Bootstrap` や `Font Awesome` の使い方を確認しておきましょう。

### `link_to` のクラスの付け方

`Bootstrap` を適用するにはクラスを付ける必要があります。

HTMLタグにクラスを付ける場合は `class=""クラス名""` の形式ですが，`link_to` にクラスを付ける場合は `class: ""クラス名""` の形式となります。

```none:クラスの付け方
<%= link_to ""リンク名"", ***_path, class: ""クラス名"" %>
<a href=""URL"" class=""クラス名"">リンク名</a>
```

他にもコンマが必要など異なりますので注意しましょう。

### `link_to` でブロックを渡す

`Font Awesome` の使い方は，基本的な使い方はCSS教材（その2）を確認して下さい。

`link_to` で `Font Awesome` でアイコンを付ける際，次のような書き方はできません。

```none:間違った書き方
<%= link_to ""<i class=""far fa-edit""></i> 編集"", ""#"" %>
<%= link_to '<i class=""far fa-edit""></i> 編集', ""#"" %>
```

上の書き方では，`""<i class=""`までが文字列と判定されます。下の書き方ならエラーは出ませんが，タグと認識されず単純に文字がそのまま出力されるだけです。

```none:よくない書き方
<%= link_to '<i class=""far fa-edit""></i> 編集'.html_safe, ""#"" %>
```

このように`html_safe` メソッドを使用すればタグと認識されて正しく出力されますが，このメソッドは使い方次第でセキュリティ的な問題（XSS）を引き起こす要因となりかねないので，極力避けるべきです。

次のようにブロックを利用する書き方を利用しましょう。

```none:正しい書き方
<%= link_to ***_path do %>
  <i class=""FontAwesomeのクラス""></i> アイコンの後の文字
<% end %>
```

それでは，次のコマンドを実行して，動作確認用に追加したコードを削除しておきましょう。

```zsh:ターミナル
git stash
```

その上で，GitHubにプッシュし，プルリクを出し，マージして，masterブランチをプルしておきましょう。

```
git push origin HEAD

# GitHubでプルリク
# GitHubでコードの差分を確認
# GitHubでマージ

git switch master
git pull origin HEAD
```

---

#### 参考: `html_safe` メソッドの危険性

`html_safe` メソッドがなぜ恐ろしいかが分からない方は，`app/views/posts/index.html.erb` に次を追加し，一覧表示ページ（[http://localhost:3000/posts](http://localhost:3000/posts)）にアクセスしてみましょう。

```app/views/posts/index.html.erb
<% message = ""<script>alert('このサイトはGoogle先生に乗っ取られました!!');location.href='https://www.google.co.jp/'</script>"" %>
<%= message.html_safe %>
```

このようなリスクを回避するため，「ユーザーが入力したもの」を表示する際に `html_safe` メソッドを絶対に使用してはいけません。

上記のボタン表示のように「決まった内容」に対して使用するのは問題ありませんが，その場合もなるべくブロック表記や `tag` メソッドで代用すべきです。

（確認後は `git stash` で差分を消して下さい）

---

## スタイルを適用

作業に入る前に，ブランチを切っておきましょう。

```zsh:ターミナル
git switch -c feature/apply-bootstrap-style
```

おおよそ次の手順になりますが，まずは自分で実装してみることをお勧めします。

- レスポンシブに対応するための `viewport` を追加
- ページ全体の最大横幅を設定し，中央寄せにする
- ヘッダーのリンクは Bootstrap の [Navbar](https://getbootstrap.jp/docs/4.5/components/navbar/) を利用
- フォームは Bootstrap の [Forms](https://getbootstrap.jp/docs/4.5/components/forms/) を利用
- 詳細ページは Bootstrap の [Cards](https://getbootstrap.jp/docs/4.5/components/card/) を利用
- 一覧ページは Bootstrap の [Tables](https://getbootstrap.jp/docs/4.5/content/tables/) を利用
- `link_to` 部分は，上記の「動作確認例」のようなボタンにする
- フラッシュ・エラーメッセージは Bootstrap の [Alerts](https://getbootstrap.jp/docs/4.5/components/alerts/) を利用

### viewport を追加

【参考】 [レスポンシブ ウェブデザインの基本](https://developers.google.com/web/fundamentals/design-and-ux/responsive?hl=ja)
【参考】 [Bootstrap はじめに](https://getbootstrap.jp/docs/4.5/getting-started/introduction/)

まず，レスポンシブ対応のための `viewport`を追加しておきましょう。

```app/views/layouts/application.html.erb
<!-- 略 -->
<%= csp_meta_tag %>
<!-- ***** 次を追加 ***** -->
<meta name=""viewport"" content=""width=device-width, initial-scale=1, shrink-to-fit=no"">
<!-- ***** 以上を追加 ***** -->
<%= stylesheet_link_tag 'application', media: 'all', 'data-turbolinks-track': 'reload' %>
<!-- 略 -->
```

```zsh:ターミナル
# add, commitを実行
# コミットメッセージは各自考えましょう。
```

### ページ全体の最大横幅を設定

【参考】[Bootstrap 概要(Overview)](https://getbootstrap.jp/docs/4.5/layout/overview/#containers)

まず，現時点では左寄せになっています。これを修正しましょう。

各ページを `max-width` などを設定した `<div>` タグで囲み，中央寄せにすればよいのですが，今回のアプリではページごとに最大横幅を変更する必要がありません。

そこで，`application.html.erb` を修正し，全ページ共通にしてしまいましょう。

```app/views/layouts/application.html.erb
<!-- 略 -->
  <body>
    <!-- ***** 以下を修正 ***** -->
    <header>
      <%= render ""layouts/header"" %>
    </header>
    <main>
      <%= render ""layouts/flash"" %>
      <div class=""base-container"">
        <%= yield %>
      </div>
    </main>
    <!-- ***** 以上を修正 ***** -->
  </body>
</html>
```

リンク部分はナビバーにするので，`<div>` で囲まないようにします。
フラッシュは好みの問題になりますが，この教材では囲まないことにしておきます。

あとは，`base-container` クラスに必要な属性を付けましょう。Bootstrap が用意している `container` もしくは `container-fluid` をベースにするとよいでしょう。

```app/assets/stylesheets/application.scss
// ***** 以下を追加 *****
// 共通
.base-container {
  @extend .container-fluid;
  max-width: var(--breakpoint-lg);
  padding: 30px 15px;
}
```

【参考】`var(--breakpoint-lg)` は `992px` です。

- [概要(Overview) Responsive breakpoints](https://getbootstrap.jp/docs/4.5/layout/overview/#responsive-breakpoints)

```zsh:ターミナル
# add, commitを実行
# コミットメッセージは各自考えましょう。
```

### ヘッダーに Bootstrap の ナビバーを利用

【参考】[Bootstrap Navbar](https://getbootstrap.jp/docs/4.5/components/navbar/)

基本的に本家のナビバーをコピーし，リンクのみ `link_to` の書き方に修正すればOKです。

```app/views/layouts/_header.html.erb
<nav class=""navbar navbar-expand-sm navbar-dark bg-primary fixed-top"">
  <span class=""navbar-brand"">メッセージ投稿アプリ</span>
  <button class=""navbar-toggler"" type=""button"" data-toggle=""collapse"" data-target=""#navbarNavAltMarkup"" aria-controls=""navbarNavAltMarkup"" aria-expanded=""false"" aria-label=""Toggle navigation"">
    <span class=""navbar-toggler-icon""></span>
  </button>
  <div class=""collapse navbar-collapse"" id=""navbarNavAltMarkup"">
    <div class=""navbar-nav"">
      <%= link_to ""投稿一覧"", posts_path, class: ""nav-item nav-link active"" %>
      <%= link_to ""新規投稿"", new_post_path, class: ""nav-item nav-link active"" %>
    </div>
  </div>
</nav>
```

注意点は次の2つでしょう。

- レスポンシブ対応にしておく
  - 横幅が小さいときは，いわゆる `ハンバーガーメニュー` が表示されるようにしておく
  - `navbar-expand-sm` の `sm` の箇所を調整することで，ハンバーガーメニューに切り替わる横幅を変更できます
- ナビバーが上部で固定されるように `fixed-top` を入れておく
  - これだけですとページ上部がナビバーに隠れてしまいますので調整しておきましょう

```app/assets/stylesheets/application.scss
// ***** 以下を追加 *****
body {
  padding-top: 56px;
}
```

```zsh:ターミナル
# add, commitを実行
# コミットメッセージは各自考えましょう。
```

### 新規投稿機能の Bootstrap の フォーム を利用

【参考】[Bootstrap Forms](https://getbootstrap.jp/docs/4.5/components/forms/)

`form-group`, `form-control` を適切に入れるだけでフォームのスタイルが整います。

メッセージの投稿で「改行」を使用できるようにするため，`text-field` から `text-area` に変更しておきます。

```app/views/posts/_form.html.erb
<%= render ""layouts/error_messages"" %>
<%= form_with model: @post, local: true do |form| %>
  <div class=""form-group"">
    <%= form.label :title %>
    <%= form.text_field :title, class: ""form-control"" %>
  </div>
  <div class=""form-group"">
    <%= form.label :content %>
    <%= form.text_area :content, class: ""form-control"", rows: 10 %>
  </div>
  <div>
    <%= form.submit button_value, class: ""btn btn-primary btn-block"" %>
  </div>
<% end %>
```

ボタンに `btn-block` を入れることで横長になりますが，これは好み次第でしょう。

```zsh:ターミナル
git add .
git commit -m ""フォームに Bootstrap でスタイルを追加""
```

### 詳細表示で Bootstrap の カード を利用

【参考】[Bootstrap Cards](https://getbootstrap.jp/docs/4.5/components/card/)

詳細表示ページは，今回は Bootstrap の `カード` を使用することにします。

```app/views/posts/show.html.erb
<h1 class=""text-center"">詳細表示</h1>
<section class=""card border-dark mt-5"">
  <div class=""card-header"">
    <h4><%= @post.title %></h4>
  </div>
  <div class=""card-body"">
    <p class=""card-text""><%= simple_format(h @post.content) %></p>
  </div>
</section>
```

`@post.content` を `simple_format(h @post.content)` に変更しているのは，「改行」に対応するためです。

フォーム内で改行を行っても，単に `@post.content` では改行が反映されません。なぜなら，HTMLでは `改行は無視` されるからです。（HTMLの改行は `<br>` タグです）

`simple_format` メソッドを使用することで，改行が反映されるようになります。
（正確には，改行時に `<br>` タグを追加，連続改行は `<p>` タグで囲む）

ただし，`simple_format` メソッド単独では `<h1>` タグなども反映されます。これを避けたい場合は，`h` メソッド（`html_escape` メソッド）で全てのHTMLタグをエスケープしましょう。

```zsh:ターミナル
# add, commitを実行
# コミットメッセージは各自考えましょう。
```

### 一覧表示で Bootstrap の テーブル を利用

【参考】[Bootstrap Tables](https://getbootstrap.jp/docs/4.5/content/tables/)

`<table>` タグのクラスに `table` を付けるだけで最低限度のスタイルが付きます。以下では，枠を付けるために `table-bordered`，背景色をストライプにするため `table-striped` を付けています。

```app/views/posts/index.html.erb
<h1 class=""text-center"">投稿一覧</h1>
<table class=""table table-bordered table-striped mt-4"">
  <thead class=""table-primary"">
    <tr>
      <th scope=""col"">No.</th>
      <th scope=""col"" class=""w-100"">タイトル</th>
      <th scope=""col""></th>
    </tr>
  </thead>
  <tbody>
    <% @posts.each.with_index(1) do |post, i| %>
      <tr>
        <th scope=""row"" class=""text-right""><%= i %></th>
        <td class=""break-word""><%= post.title %></td>
        <td class=""text-nowrap"">
          <%= link_to post, class: ""btn btn-primary"" do %>
            <i class=""fas fa-envelope-open-text""></i> <span class=""d-none d-md-inline""> 詳細</span>
          <% end %>
          <%= link_to edit_post_path(post), class: ""btn btn-success"" do %>
            <i class=""far fa-edit""></i> <span class=""d-none d-md-inline""> 編集</span>
          <% end %>
          <%= link_to post, method: :delete, data: { confirm: ""削除しますか?"" }, class: ""btn btn-danger"" do %>
            <i class=""far fa-trash-alt""></i> <span class=""d-none d-md-inline""> 削除</span>
          <% end %>
        </td>
      </tr>
    <% end %>
  </tbody>
</table>
```

```app/assets/stylesheets/application.scss
// ***** 以下を追加 *****
// テーブル
th,
td {
  vertical-align: middle !important;
}

.break-word {
  word-break: break-word;
}
```

ボタンで `FontAwesome` を付ける方法など基礎的な部分はすでに解説した通りですが，それ以外にもレスポンシブ対応のための調整を行っています。

具体的には，`767px` 以下ではアイコンのみ，`768px` 以上で文字も表示されるようにするため，クラスに`d-none d-md-inline`を付けています。このような調整は [逆転教材](https://arcane-gorge-21903.herokuapp.com/texts) の Bootstrap教材（その1）にも解説がありますので，必要があれば復習して下さい。

【参考】 [Bootstrap Display property](https://getbootstrap.jp/docs/4.5/utilities/display/)

他にも次のような設定を入れています。

- ヘッダーの背景を水色に設定
- タイトル部分をなるべく広く取るために `w-100` を入れる
- ボタンの文字が改行されないよう `text-nowrap` を追加
- 番号を右寄せにするため `text-right` を追加
- 上下中央にするため `vertical-align` を `middle` に設定

```zsh:ターミナル
# add, commitを実行
# コミットメッセージは各自考えましょう。
```

### フラッシュで Bootstrap の アラート を利用

【参考】 [Bootstrap Alerts](https://getbootstrap.jp/docs/4.5/components/alerts/)

フラッシュは Bootstrap のアラートを使用すると見やすくなります。よく使用されるテンプレートが以下の形式です。

```app/views/layouts/_flash.html.erb
<% flash.each do |flash_type, msg| %>
  <div class=""alert alert-<%= flash_type %>"" role=""alert"">
    <a href=""#"" class=""close"" data-dismiss=""alert"">×</a>
    <%= msg %>
  </div>
<% end %>
```

`flash_type` はデフォルトでは `notice` か `alert` の2種類です。

`alert-<%= flash_type %>` と設定することで，`notice` の場合は `alert-notice`，`alert` の場合は `alert-alert` というクラスが付くことになります。

`alert-notice` などは Bootstrap で用意されていませんので，他のアラートのスタイルを利用するために次のように設定します。

```app/assets/stylesheets/application.scss
// フラッシュ

.alert-notice {
  @extend .alert-success;
}

.alert-alert {
  @extend .alert-danger;
}
```

新規投稿などをしてフラッシュを確認してみて下さい。`.alert-notice` は水色の `alert-info` でもよいでしょう。

```zsh:ターミナル
# add, commitを実行
# コミットメッセージは各自考えましょう。
```

### エラーメッセージで Bootstrap の アラート を利用

エラーメッセージ も Bootstrap のアラートを使用する形式としましょう。

```app/views/layouts/_error_messages.html.erb
<% if @post.errors.any? %>
  <% @post.errors.full_messages.each do |msg| %>
    <div class=""alert alert-danger"" role=""alert"">
      <a href=""#"" class=""close"" data-dismiss=""alert"">×</a>
      <%= msg %>
    </div>
  <% end %>
<% end %>
```

エラーが出ているフィールドを赤枠に設定していましたが，こちらもBootstrap のスタイルを利用する形式に置き換えましょう。

（`textarea` に対してもスタイルを入れる必要があります）

【参考】[Bootstrap Forms server-side](https://getbootstrap.jp/docs/4.5/components/forms/#server-side)

```app/assets/stylesheets/application.scss
.field_with_errors {
  display: contents;

  // ***** 以下を修正 *****
  input,
  textarea {
    @extend .is-invalid;
  }
  // ***** 以上を修正 *****
}
```

新規投稿画面で空投稿してみましょう。フォームの上にアラートと同様のスタイルのエラーメッセージが表示され，フィールドが赤枠で囲まれ `！` の丸文字が右上に表示されていればOKです。

```zsh:ターミナル
# add, commitを実行
# コミットメッセージは各自考えましょう。
```

これでエラー処理などに対応したメッセージ投稿アプリが完成です！

GitHubにプッシュし，プルリクを出し，マージして，masterブランチをプルしておきましょう。
お疲れ様でした！

```
git push origin HEAD

# GitHubでプルリク
# GitHubでコードの差分を確認
# GitHubでマージ

git switch master
git pull origin HEAD
```

---

#### 参考:フロント側のバリデーション

このアプリで使用したバリデーション

- 空文字禁止
- 最大文字数を設定

は，共に「フロント側で判定できる」内容です。

簡単な実装方法として，`required`, `maxlength` などを設定する方法です。

```app/views/posts/_form.html.erb
<%= render ""layouts/error_messages"" %>
<%= form_with model: @post, local: true do |form| %>
  <div class=""form-group"">
    <%= form.label :title %>
    <!-- ***** 次に required, maxlength を追加 ***** -->
    <%= form.text_field :title, class: ""form-control"", required: true, maxlength: 50 %>
  </div>
  <div class=""form-group"">
    <%= form.label :content %>
    <!-- ***** 次に required, maxlength を追加 ***** -->
    <%= form.text_area :content, class: ""form-control"", rows: 10, required: true, maxlength: 500 %>
  </div>
  <div>
    <%= form.submit button_value, class: ""btn btn-primary btn-block"" %>
  </div>
<% end %>
```

空文字投稿をしようとすると「このフィールドを入力して下さい」というアラートが出て送信ができず，文字数の最大を超えた場合は入力ができなくなります。

`jQuery Validation Plugin` などのライブラリを利用すれば，よりよいエラー表示も可能です。

この教材では，Railsのフラッシュ・エラー処理の基礎を学んでいただくために，単純にサーバー側で判定する方法を解説しました。

ところが，本来はサーバーに無駄な負担をかけることは避けるべきです。`フロント側で処理できるものはフロント側で処理すべきです`。

では，「Railsのエラー処理は不要なのか？」といえば，そうではありません。

例えば，ログイン機能の新規登録における「メールアドレス」には「一意性（uniqueness）」が必要で，これは`サーバー側でなければ判定できません`。

フロント側で対応できるものは原則フロント側で対処，サーバー側でなければ対応できないものはサーバー側で対処すれば，よりよいアプリケーションになるでしょう。

なお，フロント側にバリデーションを入れた場合にも，`サーバー側のバリデーションは必須`です。なぜなら，通常ではない操作（curlコマンドなど）でフロント側のバリデーションは簡単に突破できるからです。"
Ruby on Rails,Rails Best Practice の導入,"`Rails Best Practice`とは、Railsで推奨されている開発手法に則ってコードが書かれているかを簡単にチェックできるgemです。

このgemを使用することにより、データベースの作成の仕方やコントローラの記述、不要なファイルの存在などをチェックし、改善点を指摘してもらえるようになります。

## インストール方法
以下のコードを`Gemfile`に記述します。

```ruby
gem 'rails_best_practices'
```

`Gemfile`を編集したら、以下のコマンドをターミナルから実行し、gemをインストールします。

```
bundle install
```

そうすると、通常の`bundle install`の時とは異なり、以下のような表示が最後に出ます。

```
*************************************************************************
*******

  rails_best_practices is a code metric tool to check the quality of rail
s codes.

  I highly recommend you browse the Rails Best Practices website first.

      http://rails-bestpractices.com


  Enjoy!

      Richard Huang (flyerhzm@gmail.com)

*************************************************************************
*******
```

ちょっとビビるかもしれませんが、これは`rails_best_practices`を導入することによる表示なので、気にしないでください。

## 使用方法
この`Rails Best Practice`を使用するときは、以下のコマンドをターミナルから実行します。

Railsアプリ全体のチェックをする場合

```
bundle exec rails_best_practices .
```

特定のファイルのチェックをする場合（例：htmlに対してチェックを行う場合）

```
bundle exec rails_best_practices -f html .
```

特定のファイルを除外してチェックする場合（`e`は`exclude：除外`という意味）

```
bundle exec rails_best_practices -e ""db/migrate"" .
```

複数のディレクトリを除外する場合

```
bundle exec rails_best_practices -e ""db/migrate,vendor"" .
```

## 実行結果
僕の作ったアプリで、実際に`bundle exec rails_best_practices .`を実行してみると、以下のような結果が出ました。

```
/Users/yoshito/rails_lesson/login_sample4/db/schema.rb:15 - always add db
 index (items => [user_id])
/Users/yoshito/rails_lesson/login_sample4/app/views/items/index.html.erb:
4 - law of demeter
/Users/yoshito/rails_lesson/login_sample4/app/views/items/index.html.erb:
4 - law of demeter
/Users/yoshito/rails_lesson/login_sample4/app/helpers/items_helper.rb:1 -
 remove empty helpers
/Users/yoshito/rails_lesson/login_sample4/app/helpers/users_helper.rb:1 -
 remove empty helpers
 /Users/yoshito/rails_lesson/login_sample4/config/routes.rb:5 - restrict a
uto-generated routes items (only: [:new, :create, :index])
/Users/yoshito/rails_lesson/login_sample4/config/initializers/devise.rb:1

2 - remove trailing whitespace
```


１つ１つのメッセージを確認していきましょう。

### always add db index
こちらのメッセージは、ちゃんとインデックスをつけましょうという指摘です。

```
/Users/yoshito/rails_lesson/login_sample4/db/schema.rb:15 - always add db
 index (items => [user_id])
```

インデックスとは、データベースの検索を行いやすくするための索引のことですね。
それをマイグレーションファイルに記述してください、ということです。

このメッセージを解決するには、マイグレーションファイルに`add_index`のような記述をします。

```ruby
class CreateUsers < ActiveRecord::Migration[5.1]
  def change
    create_table :users do |t|
      t.string :name
      t.string :email      
      t.integer :age
      t.timestamps
    end
    # この記述
    add_index :users, :name
  end
end
```

### Law of Demeter
こちらのメッセージは、リレーションに関する指摘です。

```
/Users/yoshito/rails_lesson/login_sample4/app/views/items/index.html.erb:
4 - law of demeter
```

具体的には、「以下のようにデータを呼び出さないでね〜」ということです。

```
item.user.nickname
```

上のように`~.~.~`みたいに書くのではなく、`~.~`というふうに短く書くほうがスマートです。今回の場合だと、`item.user.nickname`ではなく`item.user_nickname`のように記述するということですね。

そのため、`item`モデルの記述を以下のように改善する必要があります。

`item`モデルの記述

```ruby
class Item
  # user_nicknameを定義
  def user_nickname
    user.nickname
  end
end
```

ビューの記述

```
item.user_nickname
```

### Remove Empty Helpers
こちらのメッセージは、不要な`helper`を削除してくださいということです。

```
/Users/yoshito/rails_lesson/login_sample4/app/helpers/users_helper.rb:1 -
 remove empty helpers
```

ちなみに、`helper`は`/app/helpers`の中にあります。
コマンドによっては、この`helper`が自動生成されるため、不要なファイルがいつの間にかできてしまいます。

使用していない`helper`に関しては、ソースコードを管理しやすくするためにも削除しておきましょう。

### Restrict auto-generated routes
こちらのメッセージは、「使用していないルーティングを省きましょう」という意味になります。

```
/Users/yoshito/rails_lesson/login_sample4/config/routes.rb:5 - restrict a
uto-generated routes items (only: [:new, :create, :index])
```

`resources`を使用している場合は自動でルーティングが設定されますが、アプリの構成によっては不要なルーティングが出てきます。

例えば、詳細ページ`new`や`create`、`index`しか使用していない場合、他のルーティングは不要になりますね。
その場合、いらないルーティングは使用しないように限定してあげたほうがいいです。

使用するルーティングを指定するには、以下のように記述します。

```ruby
resources :items, only: [:new, :create, :index]
```

# まとめ
Ruby on Railsを学ぶなら、この`Rails Best Practice`というgemを導入すると、学習効率が爆発的にアップします。
正しい記述を学ぶためにも、アプリを作成する際には毎回このgemを導入するようにしましょう。

それだけで、正しいRuby on Railsの使い方が身につくようになりますよ。

`Rails Best Practice`のメッセージを読むだけでもとても勉強になるので、ぜひ導入してみてください。"
Ruby on Rails,Bootstrap の導入,"Bootstrapは、Twitter社が開発したフロントエンドのフレームワークです。Bootstrapを利用すると、CSSやJavaScriptを書かなくてもおしゃれでレスポンシブなデザインが実装できます。フロントエンドの開発効率が飛躍的に上がので、ぜひ利用してみてください。

`Bootstrap` を導入する方法として，[Bootstrap公式](https://getbootstrap.jp/)ではCDNを利用する方法が書かれていますが，Rails に Bootstrap を導入する場合は以下の方法をお勧めします。

なお，`Rails 6` から `Webpacker` が導入されたため，`Rails 5` までと手順が異なります。

## 共通（レスポンシブ対応）

先に，動作確認用としてトップページに対応するビューファイルなどに次を追加しましょう。

```html
<button type=""button"" class=""btn btn-primary"">Primary</button>
```

Bootstrapに限定したものではありませんが，レスポンシブ対応のためのmetaタグを配置しましょう。

```app/views/layouts/application.html.erb
<!-- ***** 略 ***** -->
<%= csp_meta_tag %>
<!-- ***** 次を追加 ***** -->
<meta name=""viewport"" content=""width=device-width, initial-scale=1, shrink-to-fit=no"">
<!-- ***** 以上を追加 ***** -->
<%= stylesheet_link_tag 'application', media: 'all', 'data-turbolinks-track': 'reload' %>
<!-- ***** 略 ***** -->
```

## Rails 6 の場合

必要となるライブラリを Yarn に追加しましょう。

```
$ yarn add bootstrap jquery popper.js
```

次に Bootstrap で必要となる `JavaScript` のファイルを読み込めるようにします。

```app/javascript/packs/application.js
// ***** 一番下に追加（コメントは全て削除してOKです） *****
require(""bootstrap/dist/js/bootstrap"")
```

【参考】もし，`jQuery` を直接使用したい場合は，次のファイルにも追記しましょう。

```config/webpack/environment.js
const { environment } = require('@rails/webpacker')

// ***** 以下を追加 *****
const webpack = require('webpack')
environment.plugins.append('Provide', new webpack.ProvidePlugin({
    $: 'jquery',
    jQuery: 'jquery'
}))
// ***** 以上を追加 *****

module.exports = environment
```

あとは，CSSファイルを読み込むように設定すればよいのですが，方法が大きく2通りあります。

### CSS を Sprockets で扱う

Rails はデフォルトでは CSS を Webpacker で管理していないので，こちらの方が自然な導入方法であると思います。

- 【参考】[Rails 6: Webpacker+Yarn+Sprocketsを十分理解してJavaScriptを書く: 後編（翻訳）](https://techracho.bpsinc.jp/hachi8833/2020_01_17/85943)

- `app/assets/stylesheets/application.css` の拡張子 `css` を `scss` に変更
- `@import ""bootstrap/scss/bootstrap"";` を追加

- `app/assets/config/manifest.js` の `//= link_directory ../stylesheets .css` を削除

```app/assets/stylesheets/application.scss
/*
 *= require_tree .
 *= require_self
 */

@import ""bootstrap/scss/bootstrap"";
```

これで準備完了です。サーバーを起動して，青いボタンが表示されていればOKです。

（確認用のボタンは削除しておきましょう）

### CSSをWebpackerで扱う

CSS でも Webpacker を利用したい場合は，次の手順になります。

- [開発
 2019.11.28
Rails 6+Webpacker開発環境をJS強者ががっつりセットアップしてみた（翻訳）](https://techracho.bpsinc.jp/hachi8833/2019_11_28/83678)

```app/views/layouts/application.html.erb
<!-- ***** stylesheet_link_tag の行を削除して次に置き換える ***** -->
<%= stylesheet_pack_tag ""application"", media: ""all"", ""data-turbolinks-track"": ""reload"" %>
```

- `javascript` ディレクトリ内に CSS 用のディレクトリ・ファイルを作成

```zsh:ターミナル
mkdir app/javascript/stylesheets
touch app/javascript/stylesheets/application.scss
```

- 作成したscssファイルに次を追加
  - 今後，CSSは `app/javascript/stylesheets` ディレクトリに書くべきです

```app/javascript/stylesheets/application.scss
@import ""~bootstrap/scss/bootstrap"";
```

- `app/assets/stylesheets` ディレクトリを削除
  - ただし，CSSをすでに書いている場合は中身を `app/javascript/stylesheets/application.scss` に移動

- `application.js`の一番下に次を追加

```app/javascript/packs/application.js
require(""../stylesheets/application.scss"")
```

これで準備完了です。サーバーを起動して，青いボタンが表示されていればOKです。

（確認用のボタンは削除しておきましょう）

## Rails 5 の場合

まず，gemをインストールしましょう。バージョン部分は，[本家サイト](https://github.com/twbs/bootstrap-rubygem)に合わせることをお勧めします。

```none:Gemfile
gem 'bootstrap', '~> 4.5.0'
```

```zsh:ターミナル
$ bundle install
```

`Bootstrap` のCSSファイルを読み込めるようにするため，次の作業を行いましょう。

- アプリ作成時の `application.css` の記述を全て削除
  - `*= require_tree .` と `*= require_self`を削除
- `app/assets/stylesheets/application.css` の拡張子 `css` を `scss` に変更
- `@import ""bootstrap"";` を追加

```app/assets/stylesheets/application.scss
@import ""bootstrap"";
```

`application.js` の `rails-ujs`よりも上に，次の３つ追加しましょう。

```app/assets/javascripts/application.js
//= require jquery3
//= require popper
//= require bootstrap-sprockets
```

これで準備完了です。サーバーを起動して，青いボタンが表示されていればOKです。

（確認用のボタンは削除しておきましょう）

# テーブルにフィルターを追加する
試しにBootstrapに機能を用いて、テーブルにフィルター機能をつけてみましょう。

この機能は、検索窓にキーワードを入力すると、その文字が含まれている行だけをテーブルに表示できるようにするものです。

まずは、以下のコードをテーブルを配置するページのHTMLの一番下に追記してください。

```
<script>
  $(document).ready(function(){
    $(""#myInput"").on(""keyup"", function() {
      var value = $(this).val().toLowerCase();
      $(""#myTable tr"").filter(function() {
        $(this).toggle($(this).text().toLowerCase().indexOf(value) > -1)
      });
    });
  });
</script>
```

次に、テーブルを作成します。その際、テーブルの上に検索窓を設置するようにしましょう。

また、テーブルに関してもBootstrapで用意されているものを使用します。

```html
<!-- フィルタリングを行うための検索窓 -->
<input class=""form-control"" id=""myInput"" type=""text"" placeholder=""Search Curriculum.."">

<!-- テーブル -->
<table class=""table table-striped"">
  <thead class=""bg-danger text-white"">
    <tr>
      <th>言語</th>
      <th>説明</th>
    </tr>
  </thead>
  <tbody id=""myTable"">
    <tr>
      <td>HTML/CSS</td>
      <td>Webサイトの画面を作るための言語</td>
    </tr>
    <tr>
      <td>Ruby</td>
      <td>Webサイトの裏側の処理をする言語</td>
    </tr>
    <tr>
      <td>Python</td>
      <td>人工知能を開発するための言語</td>
    </tr>
  </tbody>
</table>
```

これだけで準備は完了です。

あとは、画面を表示して検索窓に何かしらのキーワードを入力し、データがきちんとフィルタリングできるか確かめてみてください。

このように、Bootstrapは動的でおしゃれな実装が簡単にできます。

そのため、現場でも非常によく使用されるフロントエンドのフレームワークです。

Bootstrapには、他にもたくさん利用できるパーツがあるので、色々と試してみてください。


# Component
Bootstrapには、非常に多彩なコンポーネント（部品）が用意されています。その中でも、よく利用するものをご紹介します。

## Buttons
様々なサイズや色、アクションのボタンが用意されています。

基本的なボタン

```html
<button type=""button"" class=""btn btn-primary"">Primary</button>
<button type=""button"" class=""btn btn-secondary"">Secondary</button>
<button type=""button"" class=""btn btn-success"">Success</button>
<button type=""button"" class=""btn btn-danger"">Danger</button>
<button type=""button"" class=""btn btn-warning"">Warning</button>
<button type=""button"" class=""btn btn-info"">Info</button>
<button type=""button"" class=""btn btn-light"">Light</button>
<button type=""button"" class=""btn btn-dark"">Dark</button>

<button type=""button"" class=""btn btn-link"">Link</button>
```

ホバーエフェクトのあるボタン

```html
<button type=""button"" class=""btn btn-outline-primary"">Primary</button>
<button type=""button"" class=""btn btn-outline-secondary"">Secondary</button>
<button type=""button"" class=""btn btn-outline-success"">Success</button>
<button type=""button"" class=""btn btn-outline-danger"">Danger</button>
<button type=""button"" class=""btn btn-outline-warning"">Warning</button>
<button type=""button"" class=""btn btn-outline-info"">Info</button>
<button type=""button"" class=""btn btn-outline-light"">Light</button>
<button type=""button"" class=""btn btn-outline-dark"">Dark</button>
```

ラジオボタン

```html
<div class=""btn-group btn-group-toggle"" data-toggle=""buttons"">
  <label class=""btn btn-secondary active"">
    <input type=""radio"" name=""options"" id=""option1"" autocomplete=""off"" checked> Active
  </label>
  <label class=""btn btn-secondary"">
    <input type=""radio"" name=""options"" id=""option2"" autocomplete=""off""> Radio
  </label>
  <label class=""btn btn-secondary"">
    <input type=""radio"" name=""options"" id=""option3"" autocomplete=""off""> Radio
  </label>
</div>
```

## Navbar
Bootstrapを使用すれば、レスポンシブなナビゲーションバーもあっという間に作れます。

基本的なナビゲーションバー

```html
<nav class=""navbar navbar-expand-lg navbar-light bg-light"">
  <a class=""navbar-brand"" href=""#"">Navbar</a>
  <button class=""navbar-toggler"" type=""button"" data-toggle=""collapse"" data-target=""#navbarSupportedContent"" aria-controls=""navbarSupportedContent"" aria-expanded=""false"" aria-label=""Toggle navigation"">
    <span class=""navbar-toggler-icon""></span>
  </button>

  <div class=""collapse navbar-collapse"" id=""navbarSupportedContent"">
    <ul class=""navbar-nav mr-auto"">
      <li class=""nav-item active"">
        <a class=""nav-link"" href=""#"">Home <span class=""sr-only"">(current)</span></a>
      </li>
      <li class=""nav-item"">
        <a class=""nav-link"" href=""#"">Link</a>
      </li>
      <li class=""nav-item dropdown"">
        <a class=""nav-link dropdown-toggle"" href=""#"" id=""navbarDropdown"" role=""button"" data-toggle=""dropdown"" aria-haspopup=""true"" aria-expanded=""false"">
          Dropdown
        </a>
        <div class=""dropdown-menu"" aria-labelledby=""navbarDropdown"">
          <a class=""dropdown-item"" href=""#"">Action</a>
          <a class=""dropdown-item"" href=""#"">Another action</a>
          <div class=""dropdown-divider""></div>
          <a class=""dropdown-item"" href=""#"">Something else here</a>
        </div>
      </li>
      <li class=""nav-item"">
        <a class=""nav-link disabled"" href=""#"">Disabled</a>
      </li>
    </ul>
    <form class=""form-inline my-2 my-lg-0"">
      <input class=""form-control mr-sm-2"" type=""search"" placeholder=""Search"" aria-label=""Search"">
      <button class=""btn btn-outline-success my-2 my-sm-0"" type=""submit"">Search</button>
    </form>
  </div>
</nav>
```

色付きのナビゲーションバー

```html
<nav class=""navbar navbar-expand-lg navbar-light bg-light"">
  <a class=""navbar-brand"" href=""#"">Navbar w/ text</a>
  <button class=""navbar-toggler"" type=""button"" data-toggle=""collapse"" data-target=""#navbarText"" aria-controls=""navbarText"" aria-expanded=""false"" aria-label=""Toggle navigation"">
    <span class=""navbar-toggler-icon""></span>
  </button>
  <div class=""collapse navbar-collapse"" id=""navbarText"">
    <ul class=""navbar-nav mr-auto"">
      <li class=""nav-item active"">
        <a class=""nav-link"" href=""#"">Home <span class=""sr-only"">(current)</span></a>
      </li>
      <li class=""nav-item"">
        <a class=""nav-link"" href=""#"">Features</a>
      </li>
      <li class=""nav-item"">
        <a class=""nav-link"" href=""#"">Pricing</a>
      </li>
    </ul>
    <span class=""navbar-text"">
      Navbar text with an inline element
    </span>
  </div>
</nav>
```

トグルナビゲーションバー

```html
<div class=""pos-f-t"">
  <div class=""collapse"" id=""navbarToggleExternalContent"">
    <div class=""bg-dark p-4"">
      <h5 class=""text-white h4"">Collapsed content</h5>
      <span class=""text-muted"">Toggleable via the navbar brand.</span>
    </div>
  </div>
  <nav class=""navbar navbar-dark bg-dark"">
    <button class=""navbar-toggler"" type=""button"" data-toggle=""collapse"" data-target=""#navbarToggleExternalContent"" aria-controls=""navbarToggleExternalContent"" aria-expanded=""false"" aria-label=""Toggle navigation"">
      <span class=""navbar-toggler-icon""></span>
    </button>
  </nav>
</div>
```

## Tables
オシャレなテーブルを作成することができます。

```html
<table class=""table"">
  <thead>
    <tr>
      <th scope=""col"">#</th>
      <th scope=""col"">First</th>
      <th scope=""col"">Last</th>
      <th scope=""col"">Handle</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th scope=""row"">1</th>
      <td>Mark</td>
      <td>Otto</td>
      <td>@mdo</td>
    </tr>
    <tr>
      <th scope=""row"">2</th>
      <td>Jacob</td>
      <td>Thornton</td>
      <td>@fat</td>
    </tr>
    <tr>
      <th scope=""row"">3</th>
      <td>Larry</td>
      <td>the Bird</td>
      <td>@twitter</td>
    </tr>
  </tbody>
</table>
```

ダークな感じ

```html
<table class=""table table-dark"">
  <thead>
    <tr>
      <th scope=""col"">#</th>
      <th scope=""col"">First</th>
      <th scope=""col"">Last</th>
      <th scope=""col"">Handle</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th scope=""row"">1</th>
      <td>Mark</td>
      <td>Otto</td>
      <td>@mdo</td>
    </tr>
    <tr>
      <th scope=""row"">2</th>
      <td>Jacob</td>
      <td>Thornton</td>
      <td>@fat</td>
    </tr>
    <tr>
      <th scope=""row"">3</th>
      <td>Larry</td>
      <td>the Bird</td>
      <td>@twitter</td>
    </tr>
  </tbody>
</table>
```

ヘッダーの色を変える

```html
<table class=""table"">
  <thead class=""thead-dark"">
    <tr>
      <th scope=""col"">#</th>
      <th scope=""col"">First</th>
      <th scope=""col"">Last</th>
      <th scope=""col"">Handle</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th scope=""row"">1</th>
      <td>Mark</td>
      <td>Otto</td>
      <td>@mdo</td>
    </tr>
    <tr>
      <th scope=""row"">2</th>
      <td>Jacob</td>
      <td>Thornton</td>
      <td>@fat</td>
    </tr>
    <tr>
      <th scope=""row"">3</th>
      <td>Larry</td>
      <td>the Bird</td>
      <td>@twitter</td>
    </tr>
  </tbody>
</table>

<table class=""table"">
  <thead class=""thead-light"">
    <tr>
      <th scope=""col"">#</th>
      <th scope=""col"">First</th>
      <th scope=""col"">Last</th>
      <th scope=""col"">Handle</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th scope=""row"">1</th>
      <td>Mark</td>
      <td>Otto</td>
      <td>@mdo</td>
    </tr>
    <tr>
      <th scope=""row"">2</th>
      <td>Jacob</td>
      <td>Thornton</td>
      <td>@fat</td>
    </tr>
    <tr>
      <th scope=""row"">3</th>
      <td>Larry</td>
      <td>the Bird</td>
      <td>@twitter</td>
    </tr>
  </tbody>
</table>
```

## 公式サイト
こちらにサンプルがあるので参考にして実装していきましょう。

[Bootstrap公式サイト](https://getbootstrap.com/docs/4.4/components/alerts/)"
Ruby on Rails,CSVデータインポート機能,"開発の現場では大量のデータを取り扱うため、ExcelでCSVデータを作成し、それをデータベースに一気に投入するという方法がよく使用されています。汎用性の高い技術なので、ぜひ自分で実装できるようにしましょう。

まず最初に、CSVデータ登録機能を実装するアプリを作成します。

```
rails new csv_data -d postgresql
```

アプリが作成できたら、アプリのディレクトリに移動しましょう。

```
cd csv_data
```

移動ができたら、アプリに対応するデータベースを作成するため、以下のコマンドを実行しましょう。

```
rails db:create
```

データを登録するテーブルを作成するため、以下のコマンドをターミナルから実行し、テーブルに対応する`user`モデルを作成します。今回は、name,age,addressの３つカラムを作成し、データ投入を行います。

```
rails g model User name:string age:integer address:string
```

マイグレーションファイルを実行し、データベースにテーブルを作成します。

```
rails db:migrate
```

`app/models`の中にある`application_record.rb`に、CSVデータをインポートするためのコードを追記します。

```ruby
# この記述がないとNameError: uninitialized constant DataTest::CSVになる
require 'csv'
```

次に、データ投入のコードを記述するためのmodelを作成します。こちらは、`rails g model `コマンドを実行せず、直接`models`配下にファイルを作成しましょう。ファイル名は`import_csv.rb`です。

ファイルが作成できたら、以下のコードを記述します。

```ruby
class ImportCsv < ApplicationRecord
  # CSVデータのパスを引数として受け取り、インポート処理を実行
  def self.import(path)
     CSV.foreach(path, headers: true) do |row|
       User.create(
         name: row[""name""],
         age: row[""age""],
         address: row[""address""]
       )
     end
  end
end
```

それでは、上のコードの解説に入ります。

以下の部分はクラスメソッドと呼ばれるメソッドの定義の仕方です。

```ruby
def self.import
end
```

このようにメソッドを定義すると、`new`演算子を用いてモデルクラスのオブジェクトを生成する必要がなくなります。

```ruby
# 通常のメソッドを呼び出す方法
# new演算子でオブジェクト化する必要がある
import_csv = ImportCsv.new
import_csv.import

# クラスメソッドの場合
# new演算子がいらない
ImportCsv.import
```

次に、`path`の部分では`csv`ファイルが存在する場所を示すための文字列を格納しています。

実際は、以下のように書いてもインポート処理を実行することができます。

```ruby
# CSVデータファイルのある場所（パス）
path = 'db/csv_data/csv_data.csv'

# pathの情報をもとにCSVファイルのデータを読み込み
CSV.foreach(path, headers: true) do |row|
  User.create(
    name: row[""name""],
    age: row[""age""],
    address: row[""address""]
  )
end
```

そして、以下の部分でCSVファイルのヘッダー情報を読み取っています。

```ruby
headers: true
```

これがあることによって、以下のコードで対応する列のCSVデータの情報を読み取れるようになるわけです。

```ruby
CSV.foreach(path, headers: true) do |row|
  User.create(
    # row[""name""]でCSVデータのname列の情報を指定して読み込むことができる
    name: row[""name""],
    # row[""age""]でCSVデータのage列の情報を指定して読み込むことができる
    age: row[""age""],
    # row[""address""]でCSVデータのaddress列の情報を指定して読み込むことができる
    address: row[""address""]
  )
end
```

次に、CSVファイルを保管するための`csv_data`ディレクトリを`db`に作成しましょう。そして、その中に`csv_data.csv`という名前のCSVファイルを作成します。作成したCSVファイルには、以下の内容を記述しましょう。

```
name,age,address
tanaka,33,okinawa
saitou,32,fukuoka
yanagi,24,hokkaido
```

CSVデータの用意が終わったら、ターミナルで`rails c`コマンドを入力し、Rails環境のコンソールを立ち上げます。

```
rails c
```

コンソールが立ち上がったら、以下のコマンドを実行しましょう。

```ruby
ImportCsv.import('db/csv_data/csv_data.csv')
```

エラーが出なければ、処理は完了です。きちんとデータが登録されているか確認しましょう。`rails c`で立ち上げた画面から、以下のコードを実行します。

```
User.all
```

ユーザーのデータが表示されれば、インポートは成功です。

```
User Load (0.4ms)  SELECT  ""users"".* FROM ""users"" LIMIT $1  [[""LIMIT"", 11]]
=> #<ActiveRecord::Relation [#<User id: 1, name: ""hogehoge1"", age: 11, address: ""hogehoge1"", created_at: ""2018-08-12 02:45:05"", updated_at: ""2018-08-12 02:45:05"">, #<User id: 2, name: ""hogehoge2"", age: 22, address: ""hogehoge2"", created_at: ""2018-08-12 02:45:05"", updated_at: ""2018-08-12 02:45:05"">, #<User id: 3, name: ""hogehoge3"", age: 33, address: ""hogehoge3"", created_at: ""2018-08-12 02:45:05"", updated_at: ""2018-08-12 02:45:05"">, #<User id: 4, name: ""hogehoge4"", age: 44, address: ""hogehoge4"", created_at: ""2018-08-12 02:45:05"", updated_at: ""2018-08-12 02:45:05"">, #<User id: 5, name: ""hogehoge5"", age: 55, address: ""hogehoge5"", created_at: ""2018-08-12 02:45:05"", updated_at: ""2018-08-12 02:45:05"">]>
```

## もうちょっと改善！
ここまでの内容でも、データベースへのインポート機能は実装できたのですが、もうちょっと改善したコードについても学んでいきましょう。これで実装する際のバリエーションがちょっと増えます。

```ruby

class ImportCsv < ApplicationRecord
  # CSVデータのパスを引数として受け取り、インポート処理を実行
  def self.users_data
    # インポートするファイルのパスを取得
    path = File.join Rails.root, ""db/csv/csv_data.csv""
    # インポートするデータを格納するための配列
    list = []
    # CSVファイルからインポートするデータを取得し配列に格納
    CSV.foreach(path, headers: true) do |row|
      list << {
          name: row[""name""],
          age: row[""age""],
          address: row[""address""]
      }
    end
    puts ""インポート処理を開始""
    # インポートができなかった場合の例外処理
    begin
      User.create!(list)
      puts ""インポート完了!!""
    rescue ActiveModel::UnknownAttributeError => invalid
      puts ""インポートに失敗：UnknownAttributeError""
    end
  end
end
```

# まとめ
CSVインポートは現場でもよく使うとても重要な機能です。

これを実装できるようになると、面接でも大きなアピール材料になります。

ぜひ、なんども繰り返し復習して、どんなにたくさんのデータが入っているCSVでもインポート処理を書けるようにして見てください。

自分でCSVデータを作って機能を実装する練習をするのもいいですね。

お疲れ様でした！"
Ruby on Rails,Rakeタスク,"アプリケーションを起動せず、行いたい処理をCUI（コマンドプロンプトやターミナル）から実行できます。CSVデータのインポートなど、サーバーを起動せず任意の処理を実行する際にこの機能がよく利用されます。

## タスクを定義しよう！
今回は、CSVデータをデータベースへ登録するアプリを元に、Rakeタスクの実装について学んでいきましょう。まずは、実装対象となるアプリを立ち上げます。以下のコマンドを入力してください。

```
rails new rake_task_sample
```

アプリが作成できたら、アプリのディレクトリに移動しましょう。

```
cd rake_task_sample
```

移動ができたら、アプリに対応するデータベースを作成します。ちなみに、対象となるデータベースが起動してなければデータベースの作成はできないので、以下のコマンドを入力する前に、データベースを起動する事を忘れないようにしてください。自動起動の設定をしている場合は、何もしなくて大丈夫です。

```
bundle exec rake db:create
```

データベースがうまく作成されると、以下のような表示が出ます。（多少違っていてもエラーが出なければ問題ないです）

```
Created database 'rake_task_sample_development'
Created database 'rake_task_sample_test'
```

きちんとアプリができているか心配な方は、`rails s`コマンドを実行し、初期画面が表示されるか確認しておくといいです。

```
rails s
```

さっそく、これからRakeタスクの実装に移ります。Railsでは、デフォルトで設定されているRakeタスクがあります。これらのタスクは、アプリを作成する際自動で作成されます。まずは既存のタスクを確認してみましょう。以下のコマンドをターミナルに入力してください。

```
rake -T
```

そうすると現在のアプリに定義されているタスク一覧が表示されます。自分が定義したタスクを確認したい場合は、`rake -T`コマンドを利用して確認するようにしましょう。

```
rake about                              # List versions of all Rails frameworks and the environment
rake active_storage:install             # Copy over the migration needed to the application
rake app:template                       # Applies the template supplied by LOCATION=(/path/to/template) or URL
rake app:update                         # Update configs and some other initially generated files (or use just update:configs or u...
rake assets:clean[keep]                 # Remove old compiled assets
rake assets:clobber                     # Remove compiled assets
rake assets:environment                 # Load asset compile environment
rake assets:precompile                  # Compile all the assets named in config.assets.precompile
rake cache_digests:dependencies         # Lookup first-level dependencies for TEMPLATE (like messages/show or comments/_comment.html)
rake cache_digests:nested_dependencies  # Lookup nested dependencies for TEMPLATE (like messages/show or comments/_comment.html)
rake db:create                          # Creates the database from DATABASE_URL or config/database.yml for the current RAILS_ENV ...
rake db:drop                            # Drops the database from DATABASE_URL or config/database.yml for the current RAILS_ENV (u...
rake db:environment:set                 # Set the environment value for the database
rake db:fixtures:load                   # Loads fixtures into the current environment's database
rake db:migrate                         # Migrate the database (options: VERSION=x, VERBOSE=false, SCOPE=blog)
rake db:migrate:status                  # Display status of migrations
rake db:rollback                        # Rolls the schema back to the previous version (specify steps w/ STEP=n)
rake db:schema:cache:clear              # Clears a db/schema_cache.yml file
rake db:schema:cache:dump               # Creates a db/schema_cache.yml file
rake db:schema:dump                     # Creates a db/schema.rb file that is portable against any DB supported by Active Record
rake db:schema:load                     # Loads a schema.rb file into the database
rake db:seed                            # Loads the seed data from db/seeds.rb
rake db:setup                           # Creates the database, loads the schema, and initializes with the seed data (use db:reset...
rake db:structure:dump                  # Dumps the database structure to db/structure.sql
rake db:structure:load                  # Recreates the databases from the structure.sql file
rake db:version                         # Retrieves the current schema version number
rake dev:cache                          # Toggle development mode caching on/off
rake initializers                       # Print out all defined initializers in the order they are invoked by Rails
rake log:clear                          # Truncates all/specified *.log files in log/ to zero bytes (specify which logs with LOGS=...
rake middleware                         # Prints out your Rack middleware stack
rake notes                              # Enumerate all annotations (use notes:optimize, :fixme, :todo for focus)
rake notes:custom                       # Enumerate a custom annotation, specify with ANNOTATION=CUSTOM
rake restart                            # Restart app by touching tmp/restart.txt
rake routes                             # Print out all defined routes in match order, with names
rake secret                             # Generate a cryptographically secure secret key (this is typically used to generate a sec...
rake stats                              # Report code statistics (KLOCs, etc) from the application or engine
rake test                               # Runs all tests in test folder except system ones
rake test:db                            # Run tests quickly, but also reset db
rake test:system                        # Run system tests only
rake time:zones[country_or_offset]      # List all time zones, list by two-letter country code (`rails time:zones[US]`), or list b...
rake tmp:clear                          # Clear cache, socket and screenshot files from tmp/ (narrow w/ tmp:cache:clear, tmp:socke...
rake tmp:create                         # Creates tmp directories for cache, sockets, and pids
rake yarn:install                       # Install all JavaScript dependencies as specified via Yarn
```

それではまず、Rakeタスクの処理を記述するファイルを作成します。Rakeタスクのファイルを作成するためには、ターミナルから以下のコマンドを実行します。今回は例なので、実際には入力しなくて大丈夫です。

```
rails g task task_name
```

`task_name`は、自分の好きな名前を指定することができます。どういう処理を実行するタスクなのか一目でわかるような名前をつけてあげると、後々タスク管理が楽になります。

### タスク定義の練習
まずは肩慣らしに、`Hello!!`などの簡単な挨拶を表示するタスクを作成しましょう。タスク名は`greet`にします。

```
rails g task greet
```

成功すると、以下の文が表示されます。

```
create  lib/tasks/greet.rake
```

`rails g task greet`コマンドを実行すると、`lib/tasks`に`greet.rake`という名前のファイルが作成されます。また、作成されたファイルには、自動で以下のようなコードが作成されています。

```ruby
namespace :greet do
end
```

では、作成したタスクファイルに、タスクとして行いたい処理を書いていきましょう。タスクは、基本的に以下のような構成要素になっています。`4. 名前空間`に関しては、後でご説明するので今は気にしなくて大丈夫です。

1. タスクの説明
2. タスクの名前
3. 実行したい処理
4. 名前空間

```ruby
# 名前空間
namespace :greet do
  # タスクの説明 desc => description（説明）
  desc """"
  # task_name => タスクの名前
  task task_name: :environment do
    # 実行したい処理を記述する場所
  end
end
```

descは`description`のことで、日本語でいうと「説明」という意味です。つまり、「どういうタスクを行うのか?」という説明をそこに書くというわけですね。そして、`task_name`がタスクの名前になります。どういう処理を行うタスクなのか分かりやすい名前をつけてあげると、後々タスクが増えた時にも混乱しなくて済みます。

では、`Hello World!!`を表示するだけの簡単なタスクを作成してみましょう。ファイル内の、好きな場所に以下のコードを記述しましょう。

```ruby
namespace :greet do
  desc ""Helloを表示するタスク""
  task say_hello: :environment do
    puts ""Hello!!""
  end
end
```

定義したタスクがきちんと表示されるか確認してみましょう。

```
rake -T
```

以下のような名前のタスクが存在すれば定義は成功です。

```
rake greet:say_hello                    # Helloを表示するタスク
```

確認ができたら、そのタスクを実行してみましょう。

```
rake greet:say_hello
```

以下のような表示になれば成功です。

```
Hello!!
```

## 名前空間について
簡単なタスクだけなら、ここまでで行ったやり方でも充分管理が可能なのですが、現場では目的が一緒でも名前を区別したいタスクが複数存在するときがあります。例えば、「データベースにCSVデータを登録する」という目的は同じでも、「ユーザーデータを登録するタスク」と「商品データを登録するタスク」を定義する場合です。この場合、いろんな目的を持ったタスクが大量に存在していたらどうなるでしょう？きっと混乱するのではないでしょうか？

そのような場合、それぞれのタスクをグループ分けできると、簡単に管理することができて便利です。そして、そのような実装を実現する時に便利なのが`名前空間（namespace）`なのです。

タスクは、名前空間を利用することで大まかなグループ分けを行い、管理することができます。ではさっそく、`名前空間（namespace）`の使い方をみていきましょう。

```ruby
namespace :namespace_name do

  task task_name1: :environment do
    # 実行したい処理
  end

  task task_name2: :environment do
    # 実行したい処理
  end
end
```
- namespace_name => 任意の名前空間
- task_name1, 2 => 任意のタスク名

この名前空間を利用して、挨拶を行うタスクと、簡単な計算を行うタスクをグループ化します。

```ruby
# greetという名前空間 => 挨拶をするタスクを定義
namespace :greet do

  desc ""Goodbyeを表示するタスク""
  task say_goodbye: :environment do
    puts ""Goodbye""
  end

  desc ""Helloを表示するタスク""
  task say_hello: :environment do
    puts ""Hello!!""
  end

end

# cgreet_when_datingという名前空間 => デート時の挨拶をするタスクを定義
namespace :greet_when_dating do

  desc ""容姿を褒める""
  task praise_appearance: :environment do
    puts ""You are beautiful!!""
  end

  desc ""ファッションを褒める""
  task praise_fashion: :environment do
    puts ""That's fashionable!!""
  end

end
```

定義したタスクがきちんと表示されるか確認してみましょう。

```
rake -T
```

以下のような表示がされていれば定義成功です。タスク名が`namespace`に紐づいた名前でグループ分けされていることが確認できます。

```
rake greet:say_goodbye                    # Goodbyeを表示するタスク
rake greet:say_hello                      # Helloを表示するタスク
rake greet_when_dating:praise_appearance  # 容姿を褒める
rake greet_when_dating:praise_fashion    # ファッションを褒める
```

確認ができたら、定義したタスクをどれか実行してみましょう。

```
rake greet_when_dating:praise_fashion
```

出力結果

```
That's fashionable!!
```

## CSVインポートのRakeタスクを定義
では、これからCSVデータを登録するタスクを実装していきましょう。まずは、データを格納するためのテーブルを作成する必要があるので、モデルを作成し、マイグレーションファイルを実行します。まずは、以下のコマンドを実行しましょう。

```
rails g model user
```

以下のような表示がされていれば成功です。

```
invoke  active_record
create    db/migrate/20180812021247_create_users.rb
create    app/models/user.rb
invoke    test_unit
create      test/models/user_test.rb
create      test/fixtures/users.yml
```

モデルの作成が完了したら、次にマイグレーションファイルの編集をします。今回は、ユーザーの名前、年齢、住所を格納するテーブルを作成したいので、以下のようにファイルを編集します。

```ruby
class CreateUser < ActiveRecord::Migration[5.0]
  def change
    create_table :users do |t|
      t.string :name
      t.integer :age
      t.string :address
      t.timestamps
    end
  end
end
```

マイグレーションファイルの編集が終わったら、以下のコマンドを実行しましょう

```
bundle exec rake db:migrate
```

無事にテーブルが作成できたら、次にrakeファイルを作成します。名前は`import_csv`にしてください。

```
rails g task import_csv
```

以下のような表示がされれば成功です。

```
create  lib/tasks/import_csv.rake
```

`rails g task import_csv`を実行すると、`lib/tasks`に`import_csv.rake`が作成されます。デフォルトでは、以下のようなコードが記述されています。

```ruby
namespace :import_csv do
end
```

それでは、いよいよCSVインポートの機能をRakeタスクに記述していきます。`import_csv.rake`に、以下のコードを記述してください。

```ruby
# CSVファイルを扱うために必要
require 'csv'

# 名前空間 => import
namespace :import_csv do
  # タスクの説明
  desc ""CSVデータをインポートするタスク""

  # タスク名 => users
  task users: :environment do
    # インポートするファイルのパスを取得
    path = File.join Rails.root, ""db/csv_data/csv_data.csv""
    # インポートするデータを格納するための配列
    list = []
    # CSVファイルからインポートするデータを取得し配列に格納
    CSV.foreach(path, headers: true) do |row|
      list << {
          name: row[""name""],
          age: row[""age""],
          address: row[""address""]
      }
    end
    puts ""インポート処理を開始""
    # インポートができなかった場合の例外処理
    begin
      User.create!(list)
      puts ""インポート完了!!""
    rescue ActiveModel::UnknownAttributeError => invalid
      puts ""インポートに失敗：UnknownAttributeError""
    end
  end
end
```

記述が終わったら、きちんと定義されているか確認しましょう。

```
rake -T
```

以下のような表示がされれば、タスクはきちんと定義されています

```
rake import_csv:users                     # CSVデータをインポートするタスク
```

次に、データを投入するためのCSVファイルを保管するディレクトリを作成しましょう。 `db` ディレクトリの中に `csv_data` ディレクトリを作成し、その中にCSVファイル `csv_data.csv` を作成します。

作成が完了したら、CSVファイルに以下の記述をしてください。

ちなみに、CSVとは `Comma Separated Value` の略で、Comma（カンマ）で値を区切ったデータ形式のことを指します。

```
name,age,address
hogehoge1,11,hogehoge1
hogehoge2,22,hogehoge2
hogehoge3,33,hogehoge3
hogehoge4,44,hogehoge4
hogehoge5,55,hogehoge5
```

それでは、Rakeタスクを実行するため、ターミナルに以下のコマンドを入力しましょう。

```
rake import_csv:users
```

これでデータベースへの登録ができれば、実装は完了です。 `rails c` でRails環境のコンソールを立ち上げ、以下のコードを入力してデータがきちんと投入されているか確かめてください。

```
rails c
```

ユーザーのデータが存在するかどうかを確かめるため、以下のコマンドを入力しましょう。

```
User.all
```

ユーザーのデータが表示されれば、データはきちんとインポートされています。

```
User Load (0.4ms)  SELECT  ""users"".* FROM ""users"" LIMIT $1  [[""LIMIT"", 11]]
=> #<ActiveRecord::Relation [#<User id: 1, name: ""hogehoge1"", age: 11, address: ""hogehoge1"", created_at: ""2018-08-12 02:45:05"", updated_at: ""2018-08-12 02:45:05"">, #<User id: 2, name: ""hogehoge2"", age: 22, address: ""hogehoge2"", created_at: ""2018-08-12 02:45:05"", updated_at: ""2018-08-12 02:45:05"">, #<User id: 3, name: ""hogehoge3"", age: 33, address: ""hogehoge3"", created_at: ""2018-08-12 02:45:05"", updated_at: ""2018-08-12 02:45:05"">, #<User id: 4, name: ""hogehoge4"", age: 44, address: ""hogehoge4"", created_at: ""2018-08-12 02:45:05"", updated_at: ""2018-08-12 02:45:05"">, #<User id: 5, name: ""hogehoge5"", age: 55, address: ""hogehoge5"", created_at: ""2018-08-12 02:45:05"", updated_at: ""2018-08-12 02:45:05"">]>
```

## トランザクション制御
トランザクションとは、データベースへの変更を反映させるタイミングを制御するものです。なぜわざわざこういうことをするのかというと、データの整合性を保障するためです。わかりやすくするために、銀行でのお金の取引を例に考えて見ましょう。

例えば、AさんがBさんにお金を送金するとします。

1. Aさん => Bさんに送金する
2. Bさん => Aさんからお金を受け取る

このとき、Aさんの口座からお金が引かれてデータベースに変更が反映された後に、Bさんの口座のお金を増やす処理で失敗したとします。そうすると、以下のような状態になります。

1. Aさん => 貯金額減った
2. Bさん => お金振り込まれない

Aさんの貯金額は減っているにも関わらず、Bさんにはちゃんと送金されていないのはとても困りますね。その状態を解決するのがトランザクション制御なのです。この場合、処理1と2が完了するまでデータベースに変更を反映させないようにすれば、処理が成功した時だけデータベースが変更されるようになります。そうすれば、送金した金額と受け取った金額の不整合が無くなり、余計なトラブルを防ぐことができます。

### トランザクション制御の実装
それではさっそく、Railsにトランザクション制御の実装に取り掛かりましょう。基本的な書き方は以下の通りとなります。

```
モデル名.transaction do
  # 例外が発生する可能性のある処理
end
  # 正常に動作した場合の処理
rescue => e
  # 例外が発生した場合の処理
```

以下の記述を `import_csv.rake` に記述しましょう。

```ruby
# CSVファイルを扱うために必要
require 'csv'

# 名前空間 => import
namespace :import_csv do
  # タスクの説明
  desc ""CSVデータをインポートするタスク""

  # タスク名 => users
  task users: :environment do
    # インポートするファイルのパスを取得
    path = File.join Rails.root, ""db/csv_data/csv_data.csv""
    # インポートするデータを格納するための配列
    list = []
    # CSVファイルからインポートするデータを取得し配列に格納
    CSV.foreach(path, headers: true) do |row|
      list << {
          name: row[""name""],
          age: row[""age""],
          address: row[""address""]
      }
    end
    puts ""インポート処理を開始""

    begin
      User.transaction do
        # 例外が発生する可能性のある処理
        User.create!(list)
      end
      # 正常に動作した場合の処理
      puts ""インポート完了!!""
    # 例外処理
    rescue ActiveModel::UnknownAttributeError => invalid
      # 例外が発生した場合の処理
      # インポートができなかった場合の例外処理
      puts ""インポートに失敗：UnknownAttributeError""
    end
  end
end
```

## おまけ
以上で目的は達成できたのですが、インポート処理を行う際のターミナルの出力をわかりやすくために `colorize` というgemを導入しましょう。そうすると、処理結果を色で分けることができてより見やすくなります。以下のコードをGemファイルに追加しましょう。

```
gem 'colorize'
```

gemをインストールします。

```
bundle install
```

その後、出力する文字列に色を変えるためのメソッドを記述していきます。出力する文字を赤に変えたい場合は`""hoge"".red`、緑に変えたい場合は`""fuga"".green`と記述すればOKです。

```ruby
# CSVファイルを扱うために必要
require 'csv'

# 名前空間 => import
namespace :import_csv do
  # タスクの説明
  desc ""CSVデータをインポートするタスク""

  # タスク名 => users
  task users: :environment do
    # インポートするファイルのパスを取得
    path = File.join Rails.root, ""db/csv_data/csv_data.csv""
    # インポートするデータを格納するための配列
    list = []
    # CSVファイルからインポートするデータを取得し配列に格納
    CSV.foreach(path, headers: true) do |row|
      list << {
          name: row[""name""],
          age: row[""age""],
          address: row[""address""]
      }
    end
    # 文字を赤色で出力
    puts ""インポート処理を開始"".red
    # インポートができなかった場合の例外処理
    begin
      User.create!(list)
      # 文字を緑色で出力
      puts ""インポート完了!!"".green
    rescue ActiveModel::UnknownAttributeError => invalid
      # 文字を赤色で出力
      puts ""インポートに失敗：UnknownAttributeError"".red
    end
  end
end

```

これで`start to create users data`と`raised error`のメッセージが赤に、`completed!!`のメッセージが緑に表示されれば完了です。

処理的には何も変わらないのですが、メッセージがちょっとおしゃれに表示されるようになりました。

# まとめ
Rakeタスクは現場でも非常に使う機能であり、これを定義することで「CSVデータをインポートする」などの定期的に行うテスクの実行がとても楽になります。

実装できるようになれば、面接時にもとてもいいアピールになるので、ぜひ自分でCSVデータをいじって、色々なデータをインポートできるタスクを実装して見てください。

なれてきたら、登録するデータの件数を増やしてもいいかと思います。

お疲れ様でした！"
Ruby on Rails,ログイン機能,"Webサイトでは、特定のページを観覧したりデータを登録したりする際に、ユーザーに制限を設けるためログイン機能をよく実装します。
Ruby on Railsを使用すれば、このログイン機能に関しても簡単に実装することができるので、ぜひやり方をマスターしてみてください。

まずは、アプリを作成します。

```
rails new devise_sample
```

アプリが作成できたら、アプリに対応するデータベースを作成しましょう。

```
bundle exec rake db:create
```

ログイン機能を実装するためには、`devise`というgemを使用します。
そのため、`Gemfile`に以下の内容を追記しましょう。

```ruby
gem 'devise'
```

`Gemfile`に追記が終わったら以下のコマンドを実行してgemをインストールします。

```
bundle install
```

gemがインストールできたら、ログイン機能を実装するために必要な設定をしていきましょう。
`devise`を使用するためには、Gemのインストールに加えてdevise専用のコマンドを利用して設定ファイルを作成する必要があります。
そのため、以下のコマンドを実行しましょう。

```
rails g devise:install
```

`devise`を使用する際のモデルの作成には通常の方法`rails g model`ではなく、`devise`専用のコマンドである`rails g devise user`を使用します。
これにより、ログイン機能に対応したモデルを作成することができます。

```
rails g devise user
```

`devise`に関連するモデルが作成できたら、migrationを実行してログイン機能に関連するテーブルを作成しましょう。

```
bundle exec rake db:migrate
```

マイグレーションファイルを実行し、ログイン機能に関連する`users`テーブルが作成できたら、`application.html.erb`にログイン状態によってナビゲーションバーの表示を変えるための記述を書きます。

|ログイン時|非ログイン時|
|---|---|
|ログアウト、トップに戻るリンクを表示|ログイン、新規登録リンクを表示|

それでは、以下のコードを`application.html.erb`に記述しましょう。

```application.html.erb
<!-- 略 -->

  <body>
    <!-- ここから -->
    <% if user_signed_in? %>
      <%= link_to ""ログアウト"", destroy_user_session_path, method: :delete %>
      <%= link_to ""トップ"", items_path %>
      <%= link_to '投稿画面へ', new_item_path %> 
    <% else %>
      <%= link_to ""ログイン"", new_user_session_path %>
      <%= link_to ""新規登録"", new_user_registration_path %>
    <% end %>
    <!-- ここまで -->
    <%= yield %>
  </body>
</html>
```

`application.html.erb`にナビゲーションバーが実装できたら、次は`item`モデルと`items`テーブルを作成しましょう。まずは`item`モデルの作成から。

```
rails g model item
```

`items`テーブルに`name`、`price`、`user_id`カラムを作成するための記述を追記します。`user_id`は、ログインユーザーのデータと紐づけるためのカラムです。

```ruby
class CreateItems < ActiveRecord::Migration[5.2]
  def change
    create_table :items do |t|
      # ここから
      t.string :name
      t.integer :price
      t.integer :user_id
      # ここまで
      t.timestamps
    end
  end
end
```

マイグレーションファイルを実行

```
bundle exec rake db:migrate
```

`db/seeds.rb`にて、必要なデータをテーブルに投入するための処理を記入します。

```ruby
Item.create(name: ""熱狂のWebマーケティング"", price: 1500, user_id: 1)
Item.create(name: ""0秒シンキング"", price: 1200, user_id: 1)
Item.create(name: ""死ぬこと以外、けっこう平気。"", price: 1300, user_id: 1)
```

シードデータが用意できたら、以下のコマンドを実行し、データベースにシードデータを登録しましょう。

```
bundle exec rake db:seed
```

コマンドを入力したら、`rails c`でコンソールを立ち上げ、以下のコードを入力して、きちんとデータが登録されているか確認しましょう。

```
Item.all
```

`rails c`からデータを確認できたら`exit`で終了し、`config/routes.rb`にて商品一覧ページへのルーティングを設定します。

```ruby
root to: 'items#index'
resources :items
```

`views/layouts/application.html.erb`に追記が終わったら、`items`コントローラを作成します。

```
rails g controller items
```

`index`アクションを定義します

```ruby
class ItemsController < ApplicationController
  def index
    @items = Item.all
  end
end
```

ルーティングが設定できたら、`views`の中に`index.html.erb` を作成し、投稿一覧を表示するための記述を書きます。

```
<h1>購入商品一覧</h1>
<% if user_signed_in? %>
  <% @items.each do |item| %>
    <p><%= item.name %>：<%= item.price %></p>
  <% end %>
<% else %>
  <p>ログインしてください</p>
<% end %>
```

`devise`でログイン機能を実装すると、ログイン・サインアップ画面は自動的に生成されますが`views`の中には該当するファイルが存在しません。
そのため、今のままだとログイン画面に変更を加えることができません。

もし変更を加えたい場合は、deviseのコマンドを利用してビューファイルを生成する必要があります。
ログイン画面用のビューファイルを生成するためには、以下のコマンドを実行しましょう。

```
rails g devise:views
```

上のコマンドを実行すると、ビューファイルがたくさん生成されたかと思います。
ログイン画面周りのデザインを変更したい場合は、こちらのビューファイルを編集しましょう。

ただ、何も変更しなくても問題ないので、ここではデザインは割愛させていただきます。
何よりも優先して、サーバーサイドの実装を学ぶようにしましょう。

では次に、`items`コントローラに`new`アクションを追加します。

```ruby
class ItemsController < ApplicationController

  def index
    @items = Item.all
  end

  # newアクションを追加
  def new
    @item = Item.new
  end

end
```

`new.html.erb`に投稿フォームを作成

```
<%= form_for @item, method: :post do |f| %>
  <h1>ご購入商品の情報を入力</h1>
  <p>商品名：<%= f.text_field :name %></p>
  <p>値段：<%= f.text_field :price %></p>
  <input type=""submit"" value=""SENT"">
<% end %>
```

コントローラにcreateアクションを追加→入力したデータをモデルに保存する処理を書く

```ruby
class ItemsController < ApplicationController

  def index
    @items = Item.all
  end

  def new
    @item = Item.new
  end

  def create
    Item.create(name: item_params[:name], price: item_params[:price], user_id: current_user.id)
  end

  private

  def item_params
    params.require(:item).permit(:name, :price)
  end
end
```

create.html.erbファイルの編集

```
<h1>投稿が完了しました</h1>
<%= link_to '投稿一覧へ戻る', items_path %>
```

`items`コントローラを編集（ログインしていない時にはトップページにリダイレクトする）

```ruby
class ItemsController < ApplicationController
  before_action :move_to_index, except: :index

  def index
    @items = Item.all
  end

  def new
    @item = Item.new
  end

  def create
    Item.create(name: item_params[:name], price: item_params[:price], user_id: current_user.id)
  end

  def move_to_index
    redirect_to action: :index unless user_signed_in?
  end

  private

  def item_params
    params.require(:item).permit(:name, :price)
  end
end
```

次に、マイページが表示されるように実装していきます。
まずはルーティングを設定しましょう。

今回は、`users`というルーティングの中でも`show`アクションしか使わないので、`only: :show`と定義しています。
この定義により、`users`を利用したルーティングでは、`show`アクションにしか処理が流れません。

```ruby
Rails.application.routes.draw do
  root to: 'items#index'
  devise_for :users
  resources :items
  # 以下のルーティングを追加　onlyでshowアクションのみに制限
  resources :users, only: :show
end
```

次に、`users`コントローラを作成します。

```
rails g controller users
```

`users`コントローラに以下を記述します。

```ruby
class UsersController < ApplicationController
  def show
    @items = Item.where(user_id: current_user.id)
  end
end
```

詳細ページに商品一覧ページを表示します。

```
<% @items.each do |item| %>
  <p><%= item.name %>：<%= item.price %></p>
<% end %>
```

マイページへのリンクを`application.html.erb`に追記します。

```
<!DOCTYPE html>
<html>
  <head>
    <title>LoginSample4</title>
    <%= csrf_meta_tags %>
    <%= csp_meta_tag %>

    <%= stylesheet_link_tag    'application', media: 'all', 'data-turbolinks-track': 'reload' %>
    <%= javascript_include_tag 'application', 'data-turbolinks-track': 'reload' %>
  </head>

  <body>
    <% if user_signed_in? %>
      <%= link_to ""ログアウト"", destroy_user_session_path, method: :delete %>
      <%= link_to ""トップ"", items_path %>
      <%= link_to '投稿画面へ', new_item_path %> 
      <!-- 以下の記述を追記 -->
      <%= link_to 'マイページへ', user_path(current_user.id) %> 
    <% else %>
      <%= link_to ""ログイン"", new_user_session_path %>
      <%= link_to ""新規登録"", new_user_registration_path %>
    <% end %>
    <%= yield %>
  </body>
</html>
```

次に、購入商品一覧に購入したユーザーのIDを表示させます。

`/views/items`の`index.html.erb`に会員Noを表示するため`<%= item.user.id %>`を追記しましょう。

```
<h1>購入商品一覧</h1>
<% if user_signed_in? %>
  <% @items.each do |item| %>
    <!-- item.user.idを追記 -->
    <p><%= item.name %>：<%= item.price %>：会員No.<%= item.user.id %></p>
  <% end %>
<% else %>
  <p>ログインしてください</p>
<% end %>
```

ただ、このままではエラーが出ます。
`item.user.id`というふうにデータを検索して表示するには、`users`テーブルと`items`テーブルのアソシエーションを設定する必要があります。

この設定により、`item.user.id`というふうに、データを検索する際の記述が簡単に書けるようになるわけです。

今回記述する`item.user.id`というコードは、「購入商品に紐づいたユーザーのidを表示する」という意味になります。

上のようなシンプルな記述だけで、商品に紐づいたユーザーのデータを`users`テーブルから検索し、全て表示することができるようになります。

それでは、`app/models/`ディレクトリにある`item.rb`を編集しましょう。

```ruby
class Item < ApplicationRecord
  # itemは1人のユーザーに所属する
  belongs_to :user
end
```

上のコードにある`belongs_to`は、モデルクラスに対応するデータがどのテーブルに所属しているのかを示しています。
この場合、`item`は1人の`user`に所有されるため、`belongs_to`となるわけです。
そのため、`user`というふうに単数形となっています。

`item.rb`が編集できたら`app/models`ディレクトリにある`user.rb`を編集しましょう。

```ruby
class User < ApplicationRecord
  # Include default devise modules. Others available are:
  # :confirmable, :lockable, :timeoutable, :trackable and :omniauthable
  devise :database_authenticatable, :registerable,
         :recoverable, :rememberable, :validatable
  # userはたくさんのitemを持っている
  has_many :items
end
```

上のコードにある`has_many`は、モデルクラスがどのテーブルのデータを所有するのかを示しています。
この場合、`user`は複数の`item`を所有しているため`has_many`となるわけです。
そのため、`items`というふうに複数形となっています。

アソシエーションが設定できたら、あらためて商品一覧ページを表示しましょう。
商品情報と一緒に会員Noが表示されていれば成功です。

また、アソシエーションを設定することで、改善できるコードがもう2箇所あります。

それは、`users`コントローラとそれに紐づく`show.html.erb`に書かれたコードです。
まずは、`users`コントローラを以下のように編集しましょう。

```ruby
class UsersController < ApplicationController
  def show
    @user = User.find(current_user.id)
  end
end
```

`users`コントローラが編集できたら、次は`show.html.erb`のコードを以下のように編集します。

```
<!-- @user.itemsに変更 -->
<% @user.items.each do |item| %>
  <p><%= item.name %>：<%= item.price %></p>
<% end %>
```

これでだいぶ、実戦に近いコードになりました。
画面がきちんと表示されるか確認してみましょう。
改善前と同じようにデータが表示されていればログイン機能の実装は完了です。

ただ、もう少し改善できる部分もあります。
余裕のある人は、続きをやってみましょう。
ちょっと疲れた人は休憩を入れてください。

それでは、ログイン時にニックネームを登録できる機能を追加していきましょう。まずは、ニックネームを登録するカラムを作るためマイグレーションファイルを作成します。

```
rails g migration AddNicknameToUsers nickname:string
```

マイグレーションファイルを作成したら、それをもとにテーブルを作成します。以下のコマンドを実行しましょう。

```
bundle exec rake db:migrate
```

マイグレーションが実行できたら、ニックネームを登録するためのカラムを`app/views/devise/registrations/new.html.erb`に作成します。
以下のようにコードを編集しましょう。

```
<h2>Sign up</h2>
<%= form_for(resource, as: resource_name, url: registration_path(resource_name)) do |f| %>
  <%= devise_error_messages! %>

  <!-- ここから -->
  <div class=""field"">
    <%= f.label :nickname %> <em>(6 characters maximum)</em><br />
    <%= f.text_field :nickname, autofocus: true, maxlength: ""6"" %>
  </div>
  <!-- ここまで -->

  <div class=""field"">
    <%= f.label :email %><br />
    <%= f.email_field :email %>
  </div>

  <div class=""field"">
    <%= f.label :password %>
    <% if @validatable %>
    <em>(<%= @minimum_password_length %> characters minimum)</em>
    <% end %><br />
    <%= f.password_field :password, autocomplete: ""off"" %>
  </div>

  <div class=""field"">
    <%= f.label :password_confirmation %><br />
    <%= f.password_field :password_confirmation, autocomplete: ""off"" %>
  </div>

  <div class=""actions"">
    <%= f.submit ""Sign up"" %>
  </div>
<% end %>
```

ビューファイルの編集ができたら、ニックネームをデータベースに登録するためのストロングパラメータを設定します。
`devise`に関するストロングパラメータを設定するには、`application_controller.rb`を編集します。

それでは、以下のように`app/controllers/application_controller.rb`のコードを編集しましょう。

```ruby
class ApplicationController < ActionController::Base
  # 以下を追記
  before_action :configure_permitted_parameters, if: :devise_controller?

  # ここから
  def configure_permitted_parameters
    devise_parameter_sanitizer.permit(:sign_up, keys: [:nickname])
  end
  # ここまで追記
end
```

上記の`devise_parameter_sanitizer.permit(:sign_up, keys: [:nickname])`の記述によって、`nickname`というパラメータがデータベースに登録できるようになります。
CRUD処理のところで実装した、ストロングパラメータと考え方は一緒ですね。

また、このストロングパラメータで登録の許可を出す判定は、全てのアクションよりも先に行われる必要があるため、`before_action`で`:configure_permitted_parameters, if: :devise_controller?`が実行されるように設定しているわけです。（`ApplicationController`はRailsで作成する全てのコントローラの親クラスなので`before_action`を定義すると全てのコントローラのアクションの前に実行されます）

ここまで実装できたら、動作を確認してみましょう。
新規登録時、ニックネームが登録できれば成功です。

ニックネームが登録できるようになったら、最後にもう一箇所だけ改善をしましょう。
本当にこれで最後です笑

今、商品一覧には購入者の会員Noが表示されているかと思います。
でも、これだとイマイチ誰が購入したのかわかりづらいですよね。

これを、購入したユーザーの名前が表示されるようにしましょう。
その際、ニックネームが無いユーザーの名前は表示しないように書き換えてあげます。

```
<h1>購入商品一覧</h1>
<% if user_signed_in? %>
  <% @items.each do |item| %>
    <!-- 以下に item.user.nickname if item.user.nickname.present? を追加 -->
    <p><%= item.name %>：<%= item.price %>：購入者　<%= item.user.nickname if item.user.nickname.present? %></p>
  <% end %>
<% else %>
  <p>ログインしてください</p>
<% end %>
```

`item.user.nickname if item.user.nickname.present?`は、もし、`item`に紐づいた`user`に`nickname`が存在しなかったら非表示にする記述になります。その判断をしているのが`present?`メソッドです。これを利用することにより、`nickname`がないときには何も表示されないように処理を書くことができます。

ただ、これだと購入者のニックネームがない場合はちょっと表示が不親切になってしまいます。

これだと、イマイチ実践的では無いので、「購入者のニックネームがある場合はニックネームを表示し、無い場合は会員Noを表示する」というように柔軟に対応できる処理を書いてみましょう。

その時にとても役に立つのが三項演算子です。
この三項演算子は、1行で2通りの処理を実装したい時に使います。
それでは、実際に処理を書いて見ましょう。

```
<h1>購入商品一覧</h1>
<% if user_signed_in? %>
  <% @items.each do |item| %>
    <!-- 三項演算子に修正 "" -->
    <p><%= item.name %>：<%= item.price %>：<%= item.user.nickname.present? ? ""購入者　#{item.user.nickname}"" : ""会員No.#{item.user.id}"" %></p>
  <% end %>
<% else %>
  <p>ログインしてください</p>
<% end %>
```

上のコードにおいて、三項演算子とは

```
item.user.nickname.present? ? ""購入者　#{item.user.nickname}"" : ""会員No.#{item.user.id}""
```

の部分です。
このように書くことによって`item.user.nickname.present?`の処理結果が`true`の場合は`""購入者　#{item.user.nickname}""`が表示され、`false`の場合は`""会員No.#{item.user.id}""`が表示されるようになります。

この三項演算子の部分を`if`文で書くと以下のようになります。

```
<p>
  <%= item.name %>：
  <%= item.price %>：
  <% if item.user.nickname.present? %>
    <%= ""購入者　#{item.user.nickname}"" %>
  <% else %>
    <%= ""会員No.#{item.user.id}"" %>
  <% end %>
</p>
```

これだと、行数が多くなる上に、`<p>`や`<%= %>`、`<%  %>`などの記述も入り、かなりコードを書くのがめんどくさくなります。
そしてなにより、読みにくいですね。
それがすっきりと1行にまとまるので、2つの条件分岐を行いたい場合は三項演算子の方が便利な時があります。

最後にもう一度。

```
<p><%= item.name %>：<%= item.price %>：<%= item.user.nickname.present? ? ""購入者　#{item.user.nickname}"" : ""会員No.#{item.user.id}"" %></p>
```

スッキリ！

以上がログイン機能の実装になります。
あとは、必要に応じてCRUD処理などを実装して見てください。
よりいっそう理解が深まるかと思います。

たくさんの学習項目があって最初は大変かと思いますが、ぜひ何度も繰り返し実装してみてください。
そのうち、すらすら理解できるようになります。
わからないところがあれば、また僕に聞いてください。

お疲れ様でした！


# デバッグ
`devise`を使用したログイン機能の実装に関して、以下のようなエラーが出た場合の対処法です。

```
NoMethodError in Devise::SessionsController#new
```

上記のようなエラーが出たら、一度、ログイン機能を実装するモデルの中で必要なさそうな記述を消して動作確認して見てください。
うまく動くようなら、モデルの中の記述が悪さをしています。

どの記述が悪影響を与えているのか調査して見ましょう。"
Ruby on Rails,管理者画面,"`Active Admin`とは、管理者画面を簡単に作成するためのGemです。これを利用することにより、データの作成、更新、削除を管理者画面から簡単に実行できるようになります。

そのため、ユーザーに見せる画面と、管理者用の画面を使い分けることができ、プログラミングができない人でもデータの更新が可能なWebサイトを構築することができます。

まずはじめに、Active Adminを実装するアプリを作成します。

```
rails new active_admin_sample
```

僕はデータベースに`PostgreSQL`を使用しているので、以下のコマンドを実行してアプリを立ち上げました。

```
rails new active_admin_sample -d postgresql
```

アプリが作成できたら、アプリのディレクトリに移動しましょう。

```
cd active_admin_sample
```

移動ができたら、アプリに対応するデータベースを作成するため、以下のコマンドを実行しましょう。また、データベースを作成する際はデータベースソフト（MySQLやPostgreSQL）が起動していないとエラーになるので注意が必要です。必ず起動してからコマンドを実行するようにしましょう。

```
rails db:create
```

データを登録するテーブルを作成するため、テーブルに対応する`user`モデルを作成します。

```
rails g model user
```

model作成と同時にマイグレーションファイルも作成されるので、そのファイルを以下のように編集しましょう。今回は、`name,age,address`の３つカラムを作成します。そのため、`name`のデータ型を`string`、`age`のデータ型を`integer`、`address`のデータ型を`string`に設定します。

```ruby
class CreateDataTests < ActiveRecord::Migration[5.2]
  def change
    create_table :users do |t|
      t.string :name
      t.integer :age
      t.string :address
      t.timestamps
    end
  end
end
```

マイグレーションファイルを実行し、データベースにテーブルを作成します。

```
rails db:migrate
```

Active Adminは、ログイン用のgemである`devise`と組み合わせて使用する必要があります。`activeadmin`と`devise`の2つのgemをGemfileに追記しましょう。

```ruby
gem 'activeadmin'
gem 'devise'
```

gemをインストールします。

```
bundle install
```

gemのインストールが完了したら、Active Adminに必要なファイルをインストールします。

```
rails g devise:install
rails g active_admin:install
```

マイグレートを実行します。

```
rails db:migrate
```

初期ユーザデータを作成するためシードファイルを実行します。

```
rails db:seed
```

※simple form を使用しているとエラーが出る：その場合は次のコマンドで解決

```
rails g simple_form:install
```

サーバを起動します。

```
rails s
```

以下のURLにアクセスします。

[http://localhost:3000/admin](http://localhost:3000/admin)

以下のユーザでアクセスします。

```
User: admin@example.com
Password: password
```

Active Adminでは、`rails generate active_admin:resource model_name`というコマンドを実行することにより、`model_name`に対応した管理画面を作成することができます。今回は、`user`モデルに対する管理画面を作成したいので、以下のコマンドを実行しましょう。

```
rails g active_admin:resource user
```

コマンド実行後、Userが管理画面に追加されていることを確認します。

また、今のままではUserモデルのデータを更新できないので、以下の記述を `app/admin/users.rb` に追加しましょう。

```
ActiveAdmin.register User do

  # 以下を追加
  permit_params :name, :age, :address

end
```


## 管理画面の日本語化
`config`の中にある`application.rb`に`config.i18n.default_locale = :ja`を記述すると、管理画面を日本語にすることができます。ただし、各モデルのラベルは日本語化されません。その方法については、後述します。

```ruby
require_relative 'boot'
require 'rails/all'

Bundler.require(*Rails.groups)

module ActiveAdminSample
  class Application < Rails::Application
    # Initialize configuration defaults for originally generated Rails version.
    config.load_defaults 5.2
    # 以下の表記で管理画面を日本語化することができる
    config.i18n.default_locale = :ja
  end
end
```

## ラベルの日本語化
管理画面のラベルは、デフォルトでは英語になっています。それを日本語化するため、`config/locales`に`ja.yml`を追加し、必要に応じて設定したいラベルの日本語を追記しましょう。

```yml
ja:
 activerecord:
    models:
      user: 'ユーザー'
    attributes:
      user:
        name: '名前'
        age: '年齢'
        address: '住所'
```

また、`rails-i18n`というgemを追加すると日付の部分も日本語にしてくれます。ちなみに、`rails-i18n`に書かれてある`i18n`とは`internationalization`の略で、国際化・多言語化を意味します。

```
gem 'rails-i18n'
```

```
bundle install
```

## 日本語化（必要な場合のみ）
locales直下にja.ymlを置く場合この記述は必要ありません。

```ruby
config.i18n.load_path += Dir[Rails.root.join('config', 'locales', '**', '*.{rb,yml}').to_s]
```

## まとめ
Active Admin は、管理画面を作成するために現場でも非常によく利用されているGemです。

これを活用することにより、高機能な管理画面が一瞬で作成できるようになるので、ぜひご自身のポートフォリオにも導入してみてください。

アプリの使いやすさが一段と上がります。"
Ruby on Rails,検索機能,"ransackはrails用の検索機能を実装するためのgemです。このgemを利用することにより、高機能なキーワード検索を実装できるようになります。

例えば、検索キーワードが入力された場合には、そのキーワードに紐づいたデータを取得し、検索キーワードが入力されていない場合には全件検索を行う、といった柔軟な検索機能が実装できるようになるわけです。

それではさっそく、`ransack`を導入してみましょう。以下のgemを`Gemfile`に追加します。

```ruby
gem 'ransack'
```

gemをインストールします。

```
bundle install
```

データを登録するためのデータベースを作成します。まずは、modelを作成しましょう。modelの名前はuserにしてください。

```
rails g model user
```

作成されたマイグレーションファイルを以下のように編集しましょう。

```ruby
class CreateUser < ActiveRecord::Migration[5.0]
  def change
    create_table :user do |t|
      t.string :name
      t.integer :age
      t.timestamps
    end
  end
end
```

マイグレーションファイルを編集したらマイグレートを実行し、テーブルを作成しましょう。

```
bundle exec rake db:migrate
```

次に、検索用のデータを投入します。今回は、`seed`の機能を利用してサンプルデータを作成します。以下のコードを`db/seeds.rb`に記入しましょう。

```
User.create(name: '斉藤', age: 35)
User.create(name: '田中', age: 21)
User.create(name: '佐藤', age: 32)
User.create(name: '山岸', age: 33)
User.create(name: '平', age: 26)
User.create(name: '加藤', age: 25)
```

`seeds.rb`に用意したデータをUsersテーブルへ投入します。以下のコマンドを実行しましょう。

```
bundle exec rake db:seed
```

データを投入したら、検索メソッドを実装するためのモデルを作成しましょう。今回作成するモデルのファイル名は`user_search.rb`です。`user_search.rb`ファイルの作成が終わったら、そのファイルに`UserSearch`クラスを定義し、`UserSearch`クラスに検索用の`execute`メソッドを定義しましょう。その際、`search_name`と`search_age`のインスタンス変数を定義します。その`execute`メソッドの中で、`ransack`の機能を利用します。

※`user`モデルに検索用のメソッドを実装する場合、インスタンス変数の名前（以下のコードにある`search_name`や`search_age`など）が`users`テーブルのカラム名と同じ値になると、データが登録できない状態になるので注意が必要です

```ruby
class UserSearch
  include ActiveModel::Model

  attr_accessor :search_name, :search_age

  def execute
    User.ransack(name_eq: @search_name, age_eq: @search_age).result
  end
end
```

モデルの編集が終わったら、次にルートを設定しましょう。`routes.rb`に以下のコードを追記してください。

```ruby
get '/users/search', to: 'users#search'
```

ルートの設定が終わったら、`users`コントローラに対応するアクションを記述します。そのため、まずは`users`コントローラを作成しましょう。以下のコマンドを実行してください。

```
rails g controller users
```

`users`コントローラが作成できたら、`search`アクションを追加しましょう。検索フォームから送信された`params`は`params_user_search`メソッドから受け取るようにします。

```ruby
def search
    user_search = UserSearch.new(params_user_search)
    @users = user_search.execute
end

private

def params_user_search
  params.permit(:search_name, :search_age)
end

```

`users`コントローラのアクションが定義できたら、次は画面の作成に移ります。検索機能を実装するには、検索ワードを入力するための画面が必要なので、次に、検索用の入力画面を作成しましょう。`users`ディレクトリに`search.html.erb`を作成し、以下のコードを記述しましょう。

```
<%= form_tag('/users/search', method: :get) do %>
  <%= label_tag :名前 %>
  <%= text_field_tag :search_name %>
  <%= label_tag :年齢 %>
  <%= text_field_tag :search_age %>
  <%= submit_tag '検索' %>
<% end %>
<table>
  <tbody>
    <thead>
      <tr>
        <th>名前</th>
        <th>年齢</th>
      </tr>
    </thead>
    <% @users.each do |user| %>
      <tr>
        <td><%= user.name %></td>
        <td><%= user.age %></td>
      </tr>
    <% end %>
  </tbody>
</table>
```

それでは、検索画面にアクセスし、動作確認をしましょう。サーバーを立ち上げた後、[http://localhost:3000/users/search](http://localhost:3000/users/search)にアクセスし、検索ワードを入力し、検索ボタンを押してみて下さい。

以上で検索機能の実装は終わりです。きちんとユーザーが検索できるか確かめて見ましょう。"
Ruby on Rails,画像投稿機能,"画像の投稿機能はWebサイトでよく使用する機能です。

画像の投稿機能を実装するための `gem` は数種類ありますが，その中でも最も利用されている `CarrierWave` を使った実装方法について解説します。

`CarrierWave` は，バリデーション・リサイズ・サムネイル用画像の作成・ファイル名の変更・デフォルト画像の設定など様々なオプションが用意されており，画像投稿機能をしっかり実装したい場合には最適です。

この教材では，「タイトル」と「画像」を投稿・表示できる機能を付けるまでの流れを解説します。

```zsh:ターミナル
rails new carrierwave_app -d postgresql -T
cd carrierwave_app
rails db:create
```

## テーブル設計

`CarrierWave` を使用して画像を投稿できるようにするには，画像のファイル名を保存する `image` カラムを 用意しておくのが最初のポイントです。

今回は，タイトル（`title`）と画像（`image`）を投稿できるように，この2つのカラムを持つテーブルを作成しておきましょう。

```zsh:ターミナル
rails g model Post title:string image:string
rails db:migrate
```

【補足】カラム名は`image`である必要はありません。例えば `avatar` とする場合は，以下の内容の `image` を全て `avatar` に置き換えて下さい。

## 準備: タイトルのCRUD処理を実装

一旦画像投稿のことは忘れて，タイトルのCRUD処理を実装しましょう。他の教材で解説済みですので，結論だけ記載しておきます。

```zsh:ターミナル
rails g controller posts index new create show edit update destroy --no-assets --no-helper --skip-routes
rm -f app/views/posts/create.html.erb app/views/posts/update.html.erb app/views/posts/destroy.html.erb
```

```config/routes.rb
Rails.application.routes.draw do
  root ""posts#index""
  resources :posts
end
```

```app/controllers/posts_controller.rb
class PostsController < ApplicationController
  before_action :set_post, only: %i[show edit update destroy]

  def index
    @posts = Post.order(id: :asc)
  end

  def new
    @post = Post.new
  end

  def create
    post = Post.create!(post_params)
    redirect_to post
  end

  def show
  end

  def edit
  end

  def update
    @post.update!(post_params)
    redirect_to @post
  end

  def destroy
    @post.destroy!
    redirect_to @post
  end

  private

  def set_post
    @post = Post.find(params[:id])
  end

  def post_params
    params.require(:post).permit(:title)
  end
end
```

```app/views/layouts/application.html.erb
<!-- ***** 省略 ***** -->
  <body>
    <!-- ***** 次を追加 ***** -->
    <%= link_to ""投稿一覧"", posts_path %> <%= link_to ""新規投稿"", new_post_path %>
    <%= yield %>
  </body>
</html>
```

```app/views/posts/index.html.erb
<h1>投稿一覧</h1>
<table>
  <thead>
  <tr>
    <th scope=""col"">No.</th>
    <th scope=""col"">タイトル</th>
    <th scope=""col""></th>
  </tr>
  </thead>
  <tbody>
  <% @posts.each.with_index(1) do |post, i| %>
    <tr>
      <th scope=""row""><%= i %></th>
      <td><%= post.title %></td>
      <td>
        <%= link_to ""詳細"", post %>
        <%= link_to ""編集"", edit_post_path(post) %>
        <%= link_to ""削除"", post, method: :delete, data: { confirm: ""削除しますか?"" } %>
      </td>
    </tr>
  <% end %>
  </tbody>
</table>
```

```app/views/posts/show.html.erb
<h1>投稿詳細</h1>
<p><%= @post.title %></p>
<p><%= link_to ""投稿一覧"", posts_path %></p>
```

```app/views/posts/new.html.erb
<h1>新規投稿</h1>
<%= render ""form"" %>
```

```app/views/posts/edit.html.erb
<h1>編集</h1>
<%= render ""form"" %>
```

```app/views/posts/_form.html.erb
<%= form_with model: @post, local: true do |form| %>
  <p><%= form.text_field :title %></p>
    <!-- ***** 次を追加 ***** -->
  <p><%= form.file_field :image %></p>
  <p><%= form.submit ""送信"" %></p>
<% end %>
```

## 画像投稿機能

それでは，画像も投稿・表示できるようにしていきましょう。

- [CarrierWave（GitHub）](https://github.com/carrierwaveuploader/carrierwave)
- [CarrierWave（公式ドキュメント）](https://rubydoc.info/gems/carrierwave/frames)

まず， `carrierwave` をインストールします。

```none:Gemfile
gem 'carrierwave', '~> 2.0'
```

```zsh:ターミナル
bundle install
```

次を実行することで，画像投稿機能を付けるために必要なファイル `image_uploader.rb` が作成されます。

```zsh:ターミナル
rails g uploader Image
```

作成された `image_uploader.rb` のクラス `ImageUploader` と `posts` テーブルの `image` カラムを連携させましょう。

```app/models/post.rb
class Post < ApplicationRecord   
  # ***** 次を追加 *****
  mount_uploader :image, ImageUploader
end
```

【補足】`app/uploaders/image_uploader.rb` ファイルに追記することで，バリデーション・リサイズなどの設定などができます。

フォームに `<%= form.file_field :image %>` を加えるだけで画像も選択できるようになります。

```app/views/posts/_form.html.erb
<%= form_with model: @post, local: true do |form| %>
  <p><%= form.text_field :title %></p>
  <!-- ***** 次を追加 ***** -->
  <p><%= form.file_field :image %></p>
  <p><%= form.submit ""送信"" %></p>
<% end %>
```

ただし，コントローラで受け取るパラメーターを追加しておく必要があります。

``````app/controllers/posts_controller.rb
  # 略
  def post_params
    # ***** 画像も受け取れるように :image を追加 *****
    params.require(:post).permit(:title, :image)
  end
  # 略
```

そして，詳細ページで画像を表示できるようにしましょう。画像は `<%= image_tag @post.image.url %>` で表示できますが，画像がないときにエラーが出ないよう条件分岐しておきましょう。

`@post.image?` で画像が存在するかどうかの判定ができます。

```app/views/posts/show.html.erb
<h1>投稿詳細</h1>
<p><%= @post.title %></p>
<!-- ***** 以下を追加 ***** -->
<% if @post.image? %>
  <p><%= image_tag @post.image.url %></p>
<% end %>
<!-- ***** 以上を追加 ***** -->
<p><%= link_to ""投稿一覧"", posts_pa
```

これで画像を投稿・表示できるようになりました。サーバーを起動し，画像付きで投稿してみましょう。更新・削除にも対応できています。

### 要注意

開発環境で投稿した画像は `public/uploads/` 内に入りますが，デフォルトではこのディレクトリは `Gitの管理下に含まれています`。つまり，今の状態でコミットし，GitHubにプッシュすると，開発環境で投稿した画像が全て GitHub のリポジトリに入ってしまいます。

そのため，`.gitignore` に次を追記し忘れないようにしましょう。 

```.gitignore
# 次を追加
/public/uploads/
```

## 画像ファイル形式のバリデーション

---

ここからは，`CarrierWave` に用意されている代表的なオプションを確認していきます。必要なもののみ実装すればOKですが，学習用であれば一通り確認しておくことをお勧めします。

---

現状ではどんなファイル形式でも投稿できてしまいます。`extension_whitelist` を定めることで，保存するファイル形式を制限することができます。

```app/uploaders/image_uploader.rb
  # 次の箇所のコメントアウトを解除
  def extension_whitelist
    %w(jpg jpeg gif png)
  end
```

設定後に `.txt` など，他のファイル形式を投稿してみましょう。エラーが出るはずです。

さらに，フロント側にもバリデーションを入れておきましょう。`accept` 属性を入れることで，選択できるファイル形式を制限することができます。

```app/views/posts/_form.html.erb
    <!-- ***** 次を修正 ***** -->
    <p><%= form.file_field :image, accept: ""image/png,image/jpeg,image/gif"" %></p>
```

## 画像ファイルサイズのバリデーション

画像ファイルサイズにバリデーションを入れたい場合は `size_range` メソッドを追加しましょう。ファイルサイズの上限を `5MB` に設定する場合は次のように書きます。

```app/uploaders/image_uploader.rb
  # 次を追加
  def size_range
    0..5.megabytes
  end
```

【注意】クラスのインスタンスメソッドですので，一番最後の `end` より上に追記しましょう。

## デフォルト画像の表示

画像がない場合は「デフォルト画像」を表示させたい，という場合は `default_url` メソッドの箇所をコメントアウトしましょう。

```app/uploaders/image_uploader.rb
  # 次の箇所のコメントアウトを解除
  def default_url(*args)
    # For Rails 3.1+ asset pipeline compatibility:
    # ActionController::Base.helpers.asset_path(""fallback/"" + [version_name, ""default.png""].compact.join('_'))

    ""/images/fallback/"" + [version_name, ""default.png""].compact.join('_')
  end
```

デフォルトの設定では，`public/images/fallback/default.png` をデフォルト画像と認識します。デフォルト画像にしたい画像ファイルを`public/images/fallback` ディレクトリに移動し，ファイル名を `default.png` としましょう。

```zsh:ターミナル
# 必要なディレクトリを作成
mkdir public/images public/images/fallback
```

（デフォルト画像のファイル形式が `jpg` の場合は，画像のファイル名と `default_url` 内の `png` の箇所を `jpg` に置き換えましょう）



なお，上記の設定だけでは詳細ページでデフォルト画像は表示されません。「画像がないときは表示しない」という条件分岐を消しておく必要があります。

```app/views/posts/show.html.erb
<h1>投稿詳細</h1>
<p><%= @post.title %></p>
<!-- ***** if @post.image? と end の行を削除 ***** -->
<p><%= image_tag @post.image.url %></p>
<!-- ***** 以上を編集 ***** -->
<p><%= link_to ""投稿一覧"", posts_pa
```

## ファイル名をランダムに変更

【参考】[How to: Create random and unique filenames for all versioned files](https://github.com/carrierwaveuploader/carrierwave/wiki/How-to:-Create-random-and-unique-filenames-for-all-versioned-files)

デフォルトでは，投稿した画像のファイル名は変更されずに保存されます。ファイル名をランダムに変更して保存したい場合は次のように設定しましょう。

```app/uploaders/image_uploader.rb
  # 略
  # ***** 以下を追加 *****
  def filename
    ""#{secure_token}.#{file.extension}"" if original_filename.present?
  end

  protected

  def secure_token
    var = :""@#{mounted_as}_secure_token""
    model.instance_variable_get(var) or model.instance_variable_set(var, SecureRandom.uuid)
  end
  # ***** 以上を追加 *****
end
```

【注意】以下，`image_uploader.rb` に設定を追記する際は `protected` よりも上に記載して下さい。

## 画像ファイルの加工

ここからは，画像のファイル形式を変更したり，リサイズする方法について解説します。画像を加工する場合は，`imagemagick` が必要となります。インストールがまだの場合はインストールして下さい。

```zsh:ターミナル
brew install imagemagick
brew link --force imagemagick
```

（インストール済みかどうかが分からない場合は，ターミナルから `brew list | grep imagemagick` を実行しましょう。 `imagemagick` が表示されればインストール済みです）


さらに，`RMagick` もしくは `MiniMagick` が必要となります。

[公式ドキュメント](https://rubydoc.info/gems/carrierwave/frames#adding-versions) では `MiniMagick` を推奨されているので，こちらをインストールしておきましょう。

```Gemfile
# 次を追加
gem 'mini_magick'
```

```zsh:ターミナル
bundle install
```

そして，`ImageUploader` クラスで使用できるようにすれば準備完了です。

```app/uploaders/image_uploader.rb
  # 次の箇所のコメントアウトを解除
  include CarrierWave::MiniMagick
```

### 画像のファイル形式を変更

`MiniMagick` を使用することで画像のファイル形式を変更することができます。

例えば，保存時の画像ファイルサイズを小さくするため， `bmp` や `png` を `jpg` に変換したい場合は次のように設定します。

```app/uploaders/image_uploader.rb
  # ***** 以下を追加 *****
  # jpg に変換
  process convert: ""jpg""

  # ファイル名の拡張子を jpg に変更
  def filename
    super.chomp(File.extname(super)) + "".jpg"" if original_filename.present?
  end
```

### 画像サイズを変更

保存時の画像ファイルサイズを小さくするもう一つの手段として，画像のリサイズ（縦横の長さを変更）する方法も考えられます。

例えば，最大の縦幅を200px，横幅を300pxにリサイズして保存したい場合は次のように設定します。

```app/uploaders/image_uploader.rb
  # 略
  # ***** 以下を追加 *****
  process resize_to_limit: [200, 300]
  # ***** 以上を追加 *****
end
```

画像のリサイズ方法は4種類用意されています。どれも最初にアスペクト比（縦横の長さの比率）を維持してリサイズする点は共通しています。詳しくは [公式ドキュメント](https://rubydoc.info/gems/carrierwave/frames#processing-methods-mini_magick) などを確認して下さい。

リサイズ方法 | 説明
--- | ---
resize_to_limit | 画像が大きい場合のみリサイズ（アスペクト比は同じ）
resize_to_fit | 画像が小さい場合もリサイズ（アスペクト比は同じ）
resize_to_fill | 指定サイズで切り抜く
resize_and_pad | 残りの領域を透過色で埋めて指定サイズにする

### サムネイル画像を作成

詳細表示では画像を大きく表示したいけれども，一覧表示では小さくても問題がない，ということがよくあります。一覧表示で元画像を読み込むように設定しますと，画像を全て読み込むのに時間がかかってしまいます。

これを避けるため，元の画像とは別に一覧表示用の小さい画像を保存しておき，一覧表示ではこの小さい画像を読み込むようする，という方法があります。

このようなサムネイル画像も作成して保存したい場合は次のように設定を加えます。

```app/uploaders/image_uploader.rb
  # 次の箇所のコメントアウトを解除。サイズは好みで変更しましょう。
  version :thumb do
    process resize_to_fit: [100, 100]
  end
```

新規投稿後に，`public/uploads/post/image` の一番最後のディレクトリを確認してみましょう。元画像とは別に，`thumb_`が頭についているサムネイル画像も保存されていることが確認できるでしょう。

このサムネイル画像を読み込みたい場合は，`image_tag @post.image.url` を `image_tag @post.image.thumb.url` に変更して下さい。

簡単のため，詳細ページでサムネイル画像を利用する場合を記載しておきます。

```app/views/posts/show.html.erb
<h1>投稿詳細</h1>
<p><%= @post.title %></p>
    <!-- ***** .thumb を追加 ***** -->
<p><%= image_tag @post.image.thumb.url %></p>
<p><%= link_to ""投稿一覧"", posts_path %
```"
Ruby on Rails,Herokuの画像投稿設定（その1・IAM S3）,"画像投稿機能のついたRailsアプリを`Heroku`にデプロイする際，特に何も設定していないと，以前投稿した画像がいつの間にか消えている，という現象が起こります。

- [Heroku: Automatic dyno restarts](https://devcenter.heroku.com/articles/dynos#automatic-dyno-restarts)
- [参考: herokuには画像を保存しておけない](https://yoji4910.hatenablog.com/entry/2020/02/01/161926)

「本番環境」では外部に画像を保存しなければなりません。

ここでは，画像の保存先として代表的な `AWS S3` を利用する方法を解説します。

[AWS S3](https://aws.amazon.com/jp/s3/) は，クラウド型のオブジェクトストレージサービスです。画像に限らずいろいろなデータを保存することができます。セキュリティ・耐久性共に優れ，価格も安いため，よく使用されています。

【注意】AWSは有料です。 `S3` や `CloudFront` については学習用であればほぼ料金はかかりませんが，他のサービスは使い方次第で数千円単位の請求が発生します。

## 準備

AWSの新規登録がまだの場合は，まず新規登録と各種初期設定を行って下さい。

## S3バケットの作成

`S3` に画像を保存できるようにするには，まず `バケット` を作成する必要があります。その手順をみていきましょう。

- まず，AWSにサインインし，AWS マネジメントコンソールを開きましょう

- 検索窓に `S3` と入力し， `S3` を選択
  - 検索窓が無い場合は，左上の「AWS」のアイコンをクリックして下さい

- 「バケットの作成」を選択

- 一般的な設定

タイトル | 内容
--- | ---
バケット名 | 任意(世界ですでに存在する名前は付けられません)
リージョン | アジアパシフィック (東京) ap-northeast-1

【注】 バケット名とリージョン`ap-northeast-1`を忘れないようにメモしておいて下さい。

- ブロックパブリックアクセスのバケット設定

下の2つ（ACL以外）のみをチェックし，注意喚起にもチェック

「バケットを作成」をクリック

## アプリ用のIAMユーザーを作成

次に，アプリ側から `S3` にアクセスするための `アクセスキー` などを入手しましょう。

- 検索窓に `IAM` と入力し， `IAM` を選択

- 左のメニューから「ユーザー」を選択

- 青いボタン「ユーザーを追加」をクリック

タイトル | 内容
--- | ---
ユーザ名 | 任意（`アプリ名-user`など）
アクセスの種類 | 「プログラムによるアクセス」にチェック

「次のステップ:アクセス権限」をクリック

- 「既存のポリシーを直接アタッチ」ボタンをクリック

- `AmazonS3FullAccess`をチェックして，「次のステップ: タグ」ボタンをクリック
  - 「参考」のようにより権限を厳しくするとより安全です

- 「次のステップ: 確認」ボタンをクリック

- 「ユーザーの作成」をクリック

「ユーザー名」「アクセスキーID」「シークレットアクセスキー」をメモしておいて下さい。

【注意】「シークレットアクセスキー」は重要情報ですので，他人に見られないように保管して下さい。

---

### 参考: 権限の少ないポリシーを作成

`AmazonS3FullAccess` は `S3` の全ての操作ができる権限ですので，アプリに持たせる権限としては過剰すぎます。

最低限必要な権限をもつポリシーを作成し，これをIAMユーザーにアタッチしておくと，万一の場合の被害を軽減することができます。

`CarrierWave`, `ActiveStorage` 用のポリシーの作成手順を簡単に解説しておきましょう。

[参考: CarrierWave](https://rubydoc.info/gems/carrierwave/frames#using-amazon-s3)

- 検索窓に `IAM` と入力し， `IAM` を選択

- 左のメニューから「ポリシー」を選択

- 「ポリシーの作成」ボタンをクリック

- 「JSON」タブを選択

- 以下に置き換える

```json:IAMポリシー
{
    ""Version"": ""2012-10-17"",
    ""Statement"": [
        {
            ""Sid"": ""VisualEditor0"",
            ""Effect"": ""Allow"",
            ""Action"": [
                ""s3:PutObject"",
                ""s3:GetObject"",
                ""s3:DeleteObject"",
                ""s3:PutObjectAcl"",
                ""s3:ListAllMyBuckets""
            ],
            ""Resource"": ""*""
        }
    ]
}
```

- 「ポリシーの確認」ボタンをクリック

- 名前を任意に設定し，「ポリシーの作成」をクリック
  - 「S3CRUD」など分かりやすいものにしておきましょう

これで権限の少ないポリシーが作成できました。アプリ用のIAMユーザー作成時に，作成したポリシーを選択するようにすればOKです。

さらに安全を求めるならば，次のように操作できるバケットまで制限してもよいでしょう。ただし，画像投稿機能付きのアプリを作成するたびにポリシーも作成しなければなりません。

`<S3のバケット名>`の箇所は，アプリで使用しているバケット名に置き換えて下さい。

```json:IAMポリシー
{
    ""Version"": ""2012-10-17"",
    ""Statement"": [
        {
            ""Sid"": ""VisualEditor0"",
            ""Effect"": ""Allow"",
            ""Action"": [
                ""s3:GetObject"",
                ""s3:PutObject"",
                ""s3:DeleteObject"",
                ""s3:PutObjectAcl""
            ],
            ""Resource"": ""arn:aws:s3:::<S3のバケット名>/*""
        },
        {
            ""Sid"": ""VisualEditor1"",
            ""Effect"": ""Allow"",
            ""Action"": ""s3:ListBucket"",
            ""Resource"": [
                ""arn:aws:s3:::<S3のバケット名>"",
                ""arn:aws:s3:::<S3のバケット名>/*""
            ]
        }
    ]
}
```

---


これ以降は，画像投稿に使用している gem によって作業内容が変わります。`CarrierWave` と `ActiveStorage` の場合は手順をまとめていますので「その2」をご覧下さい。"
Ruby on Rails,Herokuの画像投稿設定（その2・CarrierWave）,"画像投稿に `CarrierWave` を使用している場合の設定方法を解説します。

## S3を使用するための設定

- [CarrierWave 公式ドキュメント](https://rubydoc.info/gems/carrierwave/frames#using-amazon-s3)

まず `fog-aws` をインストールしておきましょう。

```none:Gemfile
# mini_magick より上に配置して下さい
gem 'fog-aws'
```

```zsh:ターミナル
bundle install
```

本番環境のみで `AWS S3` を使用する場合は次のように修正しておきます。

（開発環境でも使用したい場合は，条件分岐せず `storage :fog` のみにして下さい）

```app/uploaders/image_uploader.rb
# 「storage :file」を以下に置き換える
  if Rails.env.production?
    storage :fog
  else
    storage :file
  end
```

## シークレットアクセスキーなどの扱いについて

アプリ側から`S3`にアクセスするには，「アクセスキーID」「シークレットアクセスキー」などが必要となります。

ところが，これらを直接記載してしまうと，GitHubから丸見えになり，アカウントを悪用され，とんでもない金額を請求される恐れが出てしまいます。

重要情報の扱いには注意が必要です。

Herokuにデプロイする場合は，大きく次の2通りの管理方法があります。

- Rails 5.2から追加された `credentials` を利用

- Herokuの環境変数に埋め込む

`いずれか片方` を実行して下さい。

### credentialを利用する場合

ファイル名 | ファイルのイメージ
--- | ---
config/master.key | 鍵
config/credentials.yml.enc | 錠付きファイル


- 本番環境で`master.key`が存在しない場合はエラーが出るように設定
  - `production.rb` の `# config.require_master_key = true`の コメントアウトを解除しましょう

```config/environments/production.rb
# コメントアウトを解除
config.require_master_key = true
```

「シークレットアクセスキー」など，公開してはならないものは`credentials.yml.enc`に入れましょう。

- `credentials.yml.enc`を開くため，次のコマンドを実行

```zsh:ターミナル
EDITOR=vi rails credentials:edit
```

- `vim` エディタで `credentials.yml.enc` が開かれるので，以下の書式でメモしておいた「アクセスキーID」などを入力
  - `yaml`形式なので，インデント幅にはくれぐれも注意して下さい
  - 例えば，`access_key_id:`の後に「半角スペース1個」がないだけでエラーになります
  - `【` や `】` を入力してはいけません

```yml:config/credentials.yml.enc
aws:
  access_key_id: 【IAMユーザーのアクセスキーID】
  secret_access_key: 【IAMユーザーのシークレットアクセスキー】
  region: ap-northeast-1
  bucket: 【S3のバケット名】
```

- `vim` で保存終了するときは，`Escキー`を押した後に`:wq`と入力して`Enter`キーを入力

さらに，「アクセスキーID」などを読み込めるように設定しましょう。

```zsh:ターミナル
touch config/initializers/carrier_wave.rb
```

```config/initializers/carrier_wave.rb
if Rails.env.production?
  CarrierWave.configure do |config|
    config.fog_credentials = {
      provider: 'AWS',
      aws_access_key_id: Rails.application.credentials.dig(:aws, :access_key_id),
      aws_secret_access_key: Rails.application.credentials.dig(:aws, :secret_access_key),
      region: Rails.application.credentials.dig(:aws, :region)
    }
    config.fog_directory = Rails.application.credentials.dig(:aws, :bucket)
  end
end
```

（開発環境でも S3 を使用したい場合は，最初の行 `if Rails.env.production?` と最後の行 `end` を削りましょう）

最後に `master.key`をHerokuの環境変数に入れましょう。

```zsh:ターミナル
heroku config:set RAILS_MASTER_KEY=`cat config/master.key`
```

【注】ステージング環境を用意している場合は，両方のアプリに設定しなければなりません。

これで，コミット・プッシュ・デプロイを行って下さい。

### Herokuの環境変数に埋め込む場合

複数人で開発している場合は，あらかじめ`master.key`を共有しておかないと上記の方法では `credentials` を使用できず，エラーの原因となります。

以下の方法ならばそのような心配はありませんが，複数の環境変数をHerokuに埋め込む必要が出てきます。

- アクセスキーなどはHerokuの環境変数を読み込むように設定

```zsh:ターミナル
touch config/initializers/carrier_wave.rb
```

```config/initializers/carrier_wave.rb
if Rails.env.production?
  CarrierWave.configure do |config|
    config.fog_credentials = {
      provider: 'AWS',
      aws_access_key_id: ENV['S3_ACCESS_KEY'],
      aws_secret_access_key: ENV['S3_SECRET_KEY'],
      region: ENV['S3_REGION']
    }
    config.fog_directory = ENV['S3_BUCKET']
  end
end
```

（開発環境でも S3 を使用したい場合は，最初の行 `if Rails.env.production?` と最後の行 `end` を削りましょう）


- アクセスキーとシークレットアクセスキーをHerokuの環境変数に入れる
  - `【` や `】` を入力してはいけません

```zsh:ターミナル
heroku config:set S3_ACCESS_KEY=【IAMユーザーのアクセスキーID】
heroku config:set S3_SECRET_KEY=【IAMユーザーのシークレットアクセスキー】
heroku config:set S3_REGION=ap-northeast-1
heroku config:set S3_BUCKET=【S3のバケット名】
```

【注】ステージング環境を用意している場合は，両方のアプリに設定しなければなりません。

【参考】この作業はHerokuアプリの`Settings`タブの`Reveal Config Vars`ボタンをクリックして環境変数を直接書き込んでもOKです。"
Ruby on Rails,Herokuの画像投稿設定（その3・CloudFront）,"## CloudFront で高速化

最後に [Amazon CloudFront](https://aws.amazon.com/jp/cloudfront/) を用いて画像の表示を高速化できるようにしましょう。

【注意】独自ドメインの設定は行っていないことを前提としています

- AWSにサインインし，AWS マネジメントコンソールを開きましょう

- 検索窓に `cloudfront` と入力し， `CloudFront` を選択
  - 検索窓が無い場合は，左上の「AWS」のアイコンをクリックして下さい

- 「Create Distribution」ボタンをクリック

- 「Web」の方の「Get Started」を選択

- 最初の「Origin Domain Name」は「使用しているS3のバケット名」を選択し，右下の「Create Distribution」ボタンをクリック

一覧表示に戻りますので，「Domain Name」の欄の値 `***.cloudfront.net` をメモしておいて下さい。

次に，本番環境では `CloudFront` から画像を読み込むようにします。`CarrierWave` を使用している場合は次のように設定を追加しましょう。

```config/initializers/carrier_wave.rb
if Rails.env.production?
  CarrierWave.configure do |config|
    config.fog_credentials = {
    # 略
    }
    config.fog_directory = # 略
    # ***** 次を追加 *****
    config.asset_host = ""https://【Domain Nameの値】""
  end
end
```

（credentials や 環境変数 を利用する形式としてもOKです）

これで準備は完了です。コミットをし，Herokuにデプロイしましょう。

投稿した画像が表示されているページで「ページのソースを表示」して下さい。

画像のURLに `cloudfront.net` が含まれていればOKです。 

## 最後に

AWSは有料です。新規登録後1年間は一定範囲内で無料になりますが，学習後に不要となったものは原則削除するようにしましょう。

今回ならば，使用したS3のバケットと CloudFront は削除しておくことをお勧めします。IAMは料金がかかりませんので，シークレットアクセスキーなどを厳重に保管する前提で削除しなくても問題ありません。"
Ruby on Rails,CSVインポート・エクスポート機能,"CSVファイルのインポート・エクスポート機能は，Webアプリでよく実装される機能ですので，基本パターンは理解しておくとよいでしょう。

## 準備（CSVファイルの生成）

この教材では「氏名（name）」「年齢（age）」「身長（height）」のデータのインポート・エクスポート機能を実装していきましょう。

まず，デスクトップなど選択しやすい場所にCSVファイルを作成して下さい。

```zsh:ターミナル
vi ~/desktop/users.csv
```

```users.csv
name,age,height
村田 奏太,39,172.5
中島 美穂,63,158.8
原 美月,46,164.0
小林 美羽,37,163.1
阿部 結菜,31,150.3
村田 翔,17,173.1
久保 舞,17,150.8
山田 誠,30,171.9
今井 美咲,49,164.8
村上 悠太,38,166.5
```

---

### 参考

上記のようなCSVファイルは，以下のコードで作成できます。

```rb
require ""csv""
require ""faker""
Faker::Config.locale = :ja

CSV.open(""users.csv"", ""wb"") do |csv|
  csv << %w[name age height]
  10.times do
    name = Faker::Name.name
    age = rand(16..80)
    height = rand(150.0..185).floor(1)
    csv << [name, age, height]
  end
end
```

---

## 準備（アプリの作成・一覧表示）

まずはアプリを作成し，モデル・コントローラなどを作成しましょう。

カラムは「氏名（name）」「年齢（age）」「身長（height）」とすることにします。

```zsh:ターミナル
rails new csv_import_export_sample -d postgresql -T
cd csv_import_export_sample
rails db:create
rails g model User name:string age:integer height:float
rails db:migrate
rails g controller users index
```

ひとまず，一覧ページのみ作成し，その上でCSVインポートボタン，CSVエクスポートボタンの順に実装していきましょう。

```config/routes.rb
Rails.application.routes.draw do
  resources :users, only: :index
end
```

```app/controllers/users_controller.rb
class UsersController < ApplicationController
  def index
    @users = User.order(id: :asc)
  end
end
```

```app/views/users/index.html.erb
<h1>ユーザー一覧</h1>
<table>
  <thead>
  <tr>
    <th scope=""col"">氏名</th>
    <th scope=""col"">年齢</th>
    <th scope=""col"">身長</th>
  </tr>
  </thead>
  <tbody>
  <% @users.each.with_index(1) do |user, i| %>
    <tr>
      <td><%= user.name %></td>
      <td><%= user.age %></td>
      <td><%= user.height %></td>
    </tr>
  <% end %>
  </tbody>
</table>
```

`rails s` でサーバーを起動し，[http://localhost:3000/users](http://localhost:3000/users) にアクセスして動作確認をしましょう。

（データをまだ入れていませんので，「氏名」「年齢」などのタイトルが表示されているだけでOKです）

## CSVインポート機能（暫定版）

それではインポート機能からつけていきましょう。まず，分かりやすい形式からスタートしてリファクタリングしていきましょう。

`resources` 以外のルーティングの使用を避けるため，コントローラをネストさせることにします。

```zsh:ターミナル
rails g controller import create
```
 
```config/routes.rb
Rails.application.routes.draw do
  resources :users, only: :index do
    collection { resource :import, only: :create, controller: :import }
  end
end
```

URI に `:user_id` は不要ですので，[コレクションルーティング](https://railsguides.jp/routing.html#restful%E3%81%AA%E3%82%A2%E3%82%AF%E3%82%B7%E3%83%A7%E3%83%B3%E3%82%92%E3%81%95%E3%82%89%E3%81%AB%E8%BF%BD%E5%8A%A0%E3%81%99%E3%82%8B) にしています。

また，URI を `/users/imports` ではなく `/users/import` にするため，コントローラを単数形にし，ルーティングに `controller: :import` を追加しています。

それでは，一覧ページにインポート機能を付けてみましょう。まず，CSVクラスを使用できるようにしておきましょう。

```config/application.rb
# 略
# ***** 以下を追加 *****
require ""csv""
# ***** 以上を追加 *****
Bundler.require(*Rails.groups)
```

そして，インポート用のフォームを設置しましょう。対応するモデルのインスタンスがありませんので，`url` を使用する形式としています。

また，CSVファイル以外を選択できないように `accept` 属性を入れています。

```app/views/users/index.html.erb
<h1>ユーザー一覧</h1>
<!-- ***** 以下を追加 ***** -->
<%= form_with url: import_path do |form| %>
  <%= form.file_field :file, accept: ""text/csv"" %>
  <%= form.submit ""CSVインポート"" %>
<% end %>
<!-- ***** 以上を追加 ***** -->
<table>
<!-- ***** 略 ***** -->
```

まずは理解しやすい形式で処理を書いてみることにしましょう。

```app/controllers/import_controller.rb
class ImportController < ApplicationController
  def create
    #  ユーザーの送信したCSVファイルを変数 file に入れる
    file = params[:file]
    # 1行ずつCSVファイルを読み込み，データベースにデータを投入
    CSV.foreach(file.path, headers: true) do |row|
      User.create!(row.to_h)
    end
    # 一覧ページにリダイレクト
    redirect_to users_path
  end
end
```

これでひとまずインポート機能を実装できました。サーバーを起動し，デスクトップの `users.csv` を洗濯して送信ボタンを押してみましょう。ユーザー一覧に追加されればOKです。

### CSVインポート機能（リファクタリング）

コントローラの記述はなるべく少なくすべきです。

行っている処理は，「CSVインポート」と「リダイレクト」だけですので，「CSVインポート」処理はモデルに移動させることにしましょう。

```app/controllers/import_controller.rb
class ImportController < ApplicationController
  def create
    # クラスメソッド import_csv を呼び出す形式に変更
    User.import_csv(file: params[:file])
    redirect_to users_path
  end
end
```

```app/models/user.rb
class User < ApplicationRecord
  # クラスメソッド import_csv を作成
  def self.import_csv(file:)
    CSV.foreach(file.path, headers: true) do |row|
      # User クラスのクラスメソッド内では User を省略できる
      create!(row.to_h)
    end
  end
end
```

これで，コントローラがスッキリしました！

さて，現状では他にもいくつか問題があります。表示部分を無視する前提で，次の4つの問題があります。

- CSVを選択せずにボタンを押すとエラーログが出る
- CSVインポートの途中でエラーが出た場合，途中までのデータが保存されてしまう
- CSVファイルのカラムに余計なものがついているとエラーが出る
- SQLがデータの件数分発行されている

最後の問題は後で処理することとして，最初の3つを踏まえた修正を行いましょう。

```app/controllers/import_controller.rb
class ImportController < ApplicationController
  def create
    # CSVファイルを選択しているときだけインポートを行うように修正
    User.import_csv(file: params[:file]) if params[:file].present?
    redirect_to users_path
  end
end
```

```app/models/user.rb
class User < ApplicationRecord
  # 受け取るパラメータを指定
  CSV_COLUMNS = %w[name age height].freeze

  def self.import_csv(file:)
    # トランザクション（CSVインポートの途中でエラーが出た場合はロールバック）
    User.transaction do
      CSV.foreach(file.path, headers: true) do |row|
        # インポートするカラムを制限
        create!(row.to_h.slice(*CSV_COLUMNS))
      end
    end
  end
end
```

インポートするカラムを制限するには `row.to_h` を `row.to_h.slice(""name"", ""age"", ""height"")` とすればよいのですが，CSVエクスポートでも利用できるよう，配列 `CSV_COLUMNS` を用意し， `スプラット演算子` を利用しています。

### CSVインポート機能（完成形: `activerecord-import` を利用）

さて，最後の問題に対応する方法をみていきましょう。

- SQLがデータの件数分発行されている

`バルクインサート` （データをまとめて追加），もしくは `バルクアップサート` （データをまとめて更新）するには， [activerecord-import](https://github.com/zdennis/activerecord-import) という gem を使う方法が一般的です。

```Gemfile
# 次を追加
gem 'activerecord-import'
```

```zsh:ターミナル
bundle install
```

`activerecord-import` を導入したことで，モデルに対して `import` クラスメソッドが使用できるようになっています。

`foreach` 内でユーザーデータを作成せず，ハッシュの配列 `list` を作成するだけとし，まとめて `バルクインサート` します。

これで，SQLが件数分発行される問題が解消されます。

```app/models/user.rb
class User < ApplicationRecord
  CSV_COLUMNS = %w[name age height].freeze

  def self.import_csv(file:)
    # ***** 以下を修正 *****
    list = []
    CSV.foreach(file.path, headers: true) do |row|
      list << row.to_h.slice(*CSV_COLUMNS)
    end
    User.import!(list)
    # ***** 以上を修正 *****
  end
end
```

 `import` クラスメソッドには豊富なオプションが用意されています。詳しくは，[本家](https://github.com/zdennis/activerecord-import) サイトを確認してみて下さい。

### 参考: CSVインポート機能（Rails 6 の`insert_all` を利用）

`Rails 6` で新たに `insert_all`, `upsert_all` メソッドが追加されたことで，簡易的ですが，gem を追加せずに `バルクインサート` できるようになりました。

`created_at`, `updated_at` のカラムが自動で入らないので注意しましょう。

```app/models/user.rb
class User < ApplicationRecord
  CSV_COLUMNS = %w[name age height].freeze

  def self.import_csv(file:)
    now = Time.current
    timestamp_attributes = { created_at: now, updated_at: now }

    list = []
    CSV.foreach(file.path, headers: true) do |row|
      list << row.to_h.slice(*CSV_COLUMNS).merge(timestamp_attributes)
    end
    User.insert_all(list)
  end
end
```

## CSVエクスポート機能

次に「CSVエクスポート機能」を実装してみましょう。まずはリンクを付けておきましょう。

```app/views/users/index.html.erb
<h1>ユーザー一覧</h1>
<!-- ***** 次を追加 ***** -->
<%= link_to ""CSVエクスポート"", users_path(format: :csv) %>
<!-- ***** 略 ***** -->
```

（ボタンではなくただのリンクのままですが，スタイルは無視します）

`/users` にアクセスした際は通常の一覧表示とし，先ほど追加したリンクに対応する `/users.csv` にアクセスした際は「CSVのダウンロード」が行われるようにしましょう。

```app/controllers/users_controller.rb
class UsersController < ApplicationController
  def index
    @users = User.order(id: :asc)
    # ***** 以下を追加 *****
    respond_to do |format|
      format.html
      format.csv do
        send_data(@users.generate_csv, filename: ""users.csv"")
      end
    end
    # ***** 以上を追加 *****
  end
end
```

```app/models/user.rb
require ""csv""
CSV_COLUMNS = %w[name age height]

class User < ApplicationRecord
  def self.import_csv(file:)
    list = []
    CSV.foreach(file.path, headers: true) do |row|
      list << row.to_h.slice(*CSV_COLUMNS)
    end
    User.import(list)
  end

  # ***** 以下を追加 *****
  def self.generate_csv
    CSV.generate do |csv|
      csv << CSV_COLUMNS
      all.each do |user|
        csv << CSV_COLUMNS.map { |col| user.send(col) }
      end
    end
  end
  # ***** 以上を追加 *****
end
```

`generate_csv` クラスメソッドにおける `each` 内は `csv << [user.name, user.age, user.height]` と同じ意味です。 

`CSV_COLUMNS` を利用することで修正に強いプログラムにしています。


これでインポート・エクスポート機能の実装は完了です！お疲れ様でした！"
Ruby on Rails,テストコードの実装（RSpec）,"RSpecとは、Ruby on Railsで作ったクラスやメソッドをテストし、品質を担保するためのテストフレームワークです。

このRSpecを使用してテストコードを書くことにより、コードを変更することによる予期せぬ不具合を防ぐことができます。

テストコードを書くのはめんどくさく感じるかもしれませんが、一度きちんとしたテストコードを書けば、自動で正確に早くテストを行うことができるため、簡単にプロダクトの品質を担保することができるようになります。

現場で働く上でも、このRSpecの理解は非常に重要ですので、ぜひご自身でもテストコードを実装できるようにしてください。

# 導入手順
まず、Railsアプリを作成します。

```
rails new rspec_sample
```

作成したアプリのディレクトリに移動します。

```
cd rspec_sample
```

アプリのディレクトリに移動できたら、データベースを作成します。

```
bundle exec rake db:create
```

アプリ作成できたら、テストの対象となるモデルクラスを作成します。以下のコマンドを実行しましょう。

```
rails g model user
```

モデルと同時にマイグレーションファイルが `db/migrate` に作成されるので、そのファイルをテキストエディタで開きましょう。

マイグレーションファイルを開いたら、以下のコードを追加してください。

```ruby
class CreateUsers < ActiveRecord::Migration[5.2]
  def change
    create_table :users do |t|

      # 以下の3行を追加
      t.string :name
      t.integer :age
      t.string :gender

      t.timestamps
    end
  end
end
```

マイグレーションファイルへの記述が終わったら、マイグレーションを実行します。

```
bundle exec rake db:migrate
```

次に、Gemfileを編集します。以下の記述をGemfileに追加しましょう。

```ruby
group :development, :test do
  gem 'rspec-rails'
end
```

Gemfileへの追記が終わったら、gemをインストールします。以下のコマンドを実行しましょう。

```
bundle install
```

gemがインストールできたら、RSpecの必要なファイルをインストールします。

```
bundle exec rails g rspec:install
```

上記のコマンドを実行するとファイルが作成され、ターミナルに以下のような内容が表示されます。

```
create  .rspec
create  spec
create  spec/spec_helper.rb
create  spec/rails_helper.rb
```

ファイルが生成できたら、まずは最初の状態でRSpecがきちんと動作するか確かめましょう。

```
bundle exec rspec
```

以下のような表示がでれば成功です。

```
No examples found.


Finished in 0.00052 seconds (files took 0.33436 seconds to load)
0 examples, 0 failures
```

動作が確認できたら、テスト対象となるモデルのspecを追加します。

```
bundle exec rails generate rspec:model User
```

上記のコマンドを実行すると `spec/models/user_spec.rb` が追加され、ターミナルに以下の内容が表示されます。

```
Running via Spring preloader in process 1706
      create  spec/models/user_spec.rb
```

それでは早速、定義したメソッドをテストしてみましょう。以下のようにテストコードを記述します。 また、最初から記述されている `pending ""add some examples to (or delete) #{__FILE__}""` は削除しても大丈夫です。

```ruby
require 'rails_helper'

RSpec.describe User, type: :model do
  it ""ユーザの名前が取得できること"" do
    user = User.new(name: ""satou"")
    expect(user.disp_name).to eq ""satouさん""
  end
end
```

テストコードが実装できたら、テストを実行してみましょう。

```
bundle exec rspec
```

以下のように最初は失敗するかと思います。

```
Finished in 0.00435 seconds (files took 0.91794 seconds to load)
1 example, 1 failures
```

それでは、テスト対象となる `User` モデルに `disp_name` メソッドを定義しましょう。今回は、こちらのメソッドの動作をテストしていきます。

```ruby
class User < ApplicationRecord

  attr_accessor :name

  def initialize(name:)
    @name = name
  end

  def disp_name
    ""#{@name}さん""
  end

end
```

以下のような記述になれば、テストは成功です。

```
Finished in 0.00435 seconds (files took 0.91794 seconds to load)
1 example, 0 failures
```

それでは次に、年齢によって表示する名前を変えるように、 `disp_name` を改善していきましょう。動きとしては、以下のようになります。

|年齢|表示|
|---|---|
|10歳以下|〜ちゃん|
|19歳以下|〜君|
|それ以外|〜さん|

それではまず、テストコードを実装し、期待値を先に決めましょう。

```ruby
require 'rails_helper'

RSpec.describe User, type: :model do
  describe ""名前の表示"" do
    it ""年齢1：ユーザーの名前が取得できること"" do
      user = User.new(name: ""satou"", age: 1)
      expect(user.disp_name).to eq ""satouちゃん""
    end
    it ""年齢15：ユーザーの名前が取得できること"" do
      user = User.new(name: ""satou"", age: 15)
      expect(user.disp_name).to eq ""satou君""
    end
    it ""年齢20：ユーザーの名前が取得できること"" do
      user = User.new(name: ""satou"", age: 30)
      expect(user.disp_name).to eq ""satouさん""
    end
  end
end
```

そして、そのままでRSpecを実行し、テストがミスすることを確認しましょう。

```
FF.

Failures:

  1) User 名前の表示 年齢1：ユーザーの名前が取得できること
     Failure/Error: expect(user.disp_name).to eq ""satouちゃん""

       expected: ""satouちゃん""
            got: ""satouさん""

       (compared using ==)
     # ./spec/models/user_spec.rb:7:in `block (3 levels) in <top (required)>'

  2) User 名前の表示 年齢15：ユーザーの名前が取得できること
     Failure/Error: expect(user.disp_name).to eq ""satou君""

       expected: ""satou君""
            got: ""satouさん""

       (compared using ==)
     # ./spec/models/user_spec.rb:11:in `block (3 levels) in <top (required)>'

Finished in 0.03215 seconds (files took 2.78 seconds to load)
3 examples, 2 failures

Failed examples:

rspec ./spec/models/user_spec.rb:5 # User 名前の表示 年齢1：ユーザーの名前が取得できること
rspec ./spec/models/user_spec.rb:9 # User 名前の表示 年齢15：ユーザーの名前が取得できること
```

それでは、このテストが全てパスするように `User` モデルの `disp_name` メソッドを定義していきましょう。

```ruby
class User < ApplicationRecord
  attr_accessor :name, :age

  def initialize(name:, age:)
    @name = name
    @age = age
  end

  # 年齢に応じて表示を変えられるように条件分岐を追加
  def disp_name
    if @age > 19
      ""#{@name}さん""
    elsif @age > 10
      ""#{@name}君""
    elsif @age > 0
      ""#{@name}ちゃん""
    else
      ""不正な数値です""
    end
  end
end
```

定義ができたら、テストを実行してみてください。

```
bundle exec rspec
```

以下のような表示になればテストは成功です。

```
...

Finished in 0.00964 seconds (files took 3.99 seconds to load)
3 examples, 0 failures
```

以下のように `let` を使用すると、パラメータの定義をまとめて記述することもできます。

```ruby
require 'rails_helper'

RSpec.describe User, type: :model do
  describe ""名前の表示"" do
    # パラメータをまとめて定義
    let(:params) {{name: ""satou"", age: 1}}
    let(:params2) {{name: ""satou"", age: 15}}
    let(:params3) {{name: ""satou"", age: 30}}

    # パラメータを使用してテスト
    it ""年齢1：ユーザーの名前が取得できること"" do
      user = User.new(params)
      expect(user.disp_name).to eq ""satouちゃん""
    end
    it ""年齢15：ユーザーの名前が取得できること"" do
      user = User.new(params2)
      expect(user.disp_name).to eq ""satou君""
    end
    it ""年齢20：ユーザーの名前が取得できること"" do
      user = User.new(params3)
      expect(user.disp_name).to eq ""satouさん""
    end
  end
end
```

`name` が `satou` というのは共通しているので、その部分のパラメータのみを事前に定義し、 `age` のみを後から追加することもできます。

```ruby
require 'rails_helper'

RSpec.describe User, type: :model do
  describe ""名前の表示"" do
    # 共通するパラメータを定義
    let(:params) {{name: ""satou""}}
    it ""年齢1：ユーザーの名前が取得できること"" do
      # merge!メソッドで後からパラメータを追加
      params.merge!(age: 1)
      user = User.new(params)
      expect(user.disp_name).to eq ""satouちゃん""
    end
    it ""年齢15：ユーザーの名前が取得できること"" do
      # merge!メソッドで後からパラメータを追加
      params.merge!(age: 15)
      user = User.new(params)
      expect(user.disp_name).to eq ""satou君""
    end
    it ""年齢20：ユーザーの名前が取得できること"" do
      # merge!メソッドで後からパラメータを追加
      params.merge!(age: 20)
      user = User.new(params)
      expect(user.disp_name).to eq ""satouさん""
    end
  end
end
```

# まとめ
RSpecの記述は独特であり、混乱することもあるかと思いますが、現場では必ず使用するスキルですので、ぜひ復習して身につけてみてください。

また、今回ご紹介したのはテストコードのほんの一部です。RSpecは色んな書き方がありますので、今後も継続して勉強していきましょう！

お疲れ様でした。"
Ruby on Rails,RailsアプリへのMarkdownの導入,"Ruby on RailsアプリでMarkdownを記述できるようにする方法をご紹介します。

この機能は、ほとんどHTMLを記述せずに画面を実装でき、コードもシンタックスハイライト付きで綺麗に表示できるため、プログラミングの教材作成にぴったりです。

# 導入手順
まずは、アプリを作成します。

```
rails new markdown_sample
```

アプリが作成できたら、 `cd` コマンドでアプリのディレクトリに移動します。

```
cd markdown_sample
```

移動ができたら、アプリに対応するデータベースを作成しましょう。

```
bundle exec rake db:create
```

データベースが作成できたら、以下の `gem` を `Gemfile` に加えます。

```ruby
# markdown
gem 'redcarpet', '~> 2.3.0'
# シンタックスハイライト
gem 'coderay'
```

記述が終わったら`bundle install`を実行します。

Gemのインストールが終わったら、`helpers` の中にある `application_helper.rb` に以下の記述を追記します。

```ruby
module ApplicationHelper
    require ""redcarpet""
    require ""coderay""

    class HTMLwithCoderay < Redcarpet::Render::HTML
        def block_code(code, language)
            language = language.split(':')[0] if language.present?

            case language.to_s
            when 'rb'
                lang = :ruby
            when 'yml'
                lang = :yaml
            when 'css'
                lang = :css
            when 'html'
                lang = :html
            when ''
                lang = :md
            else
                lang = language
            end

            CodeRay.scan(code, lang).div
        end
    end

    def markdown(text)
        html_render = HTMLwithCoderay.new(
          filter_html: true,
          hard_wrap: true,
          link_attributes: { rel: 'nofollow', target: ""_blank"" }
        )
        options = {
            autolink: true,
            space_after_headers: true,
            no_intra_emphasis: true,
            fenced_code_blocks: true,
            tables: true,
            hard_wrap: true,
            xhtml: true,
            lax_html_blocks: true,
            strikethrough: true
        }
        markdown = Redcarpet::Markdown.new(html_render, options)
        markdown.render(text)
    end
end
```

以上でRuby on RailsアプリへのMarkdownの導入が終わりです。これで、Markdownの記述をHTMLのタグに自動変換できるようになりました。

つまり、HTMLを使用せず、MarkdownでWebアプリケーションの画面が作れるようになったということです。

それでは、動作確認をしましょう。

まずは、コントローラとビューを作成します。以下のコマンドで一気に作成しましょう。

```
rails g controller users index
```

コントローラとビューが作成できたら、以下のコードを `/app/views/users/index.html.erb` に記述します。

```
<%
  text =<<~TEXT
    # 大見出し
    ## 中見出し
    ### 小見出し
  TEXT
 %>
<%= markdown(text).html_safe %>
```

記述が終わったら、 ルーティングを設定します。


```ruby
Rails.application.routes.draw do
  root to: 'users#index'
end
```

ルーティングの設定が終わったら、サーバーを起動させます。

```
rails s
```

サーバーが起動したら、以下のURLにアクセスしてください。

```
http://localhost:3000/
```

Markdownで表示されることが確認できたら実装は終了です。

# まとめ
MarkdownをRuby on Railsアプリに導入することで、かなり爆速で画面を作成することができるようになります。

プログラミング関連の教材を販売する際にも、Railsアプリを立ち上げてMarkdownで画面を作成すれば大幅に教材開発の効率を上げることができるので、ぜひ導入してみてください。

お疲れ様でした。"
Ruby on Rails,データをグラフ化してみよう！（Rails 6）,"「データを`グラフ`で表示したい」と思ったことはありませんか?

データを表にまとめる方が便利なこともありますが，グラフを使うことで`データ全体を視覚的に捉える`ことができます。

グラフを扱うための `Javascript` のライブラリを複数存在しますが，ここでは有名な `Chart.js` の場合で解説を行います。

- [公式（英語）](https://www.chartjs.org/docs/latest/)
- [日本語訳（非公式）](https://misc.0o0o.org/chartjs-doc-ja/)
- [サンプル（公式）](https://www.chartjs.org/samples/latest/)
- [サンプルコード（公式）](https://github.com/chartjs/Chart.js/tree/master/samples)

## 0. 準備

### 0.1 注意点

- この記事は `Rails 6` のアプリであることを前提とします。 `Rails 5` の場合は導入方法が異なります。

### 0.2 Chart.js の動作確認

それでは，早速アプリを作成し，Chart.jsをインストールしましょう。

```zsh:ターミナル
rails new chart_app -d postgresql 
cd chart_app
yarn add chart.js
```

`application.js`に次を追加すれば`Chart.js`を導入は完了です。

```app/javascript/packs/application.js
// 次を追加
require('chart.js')
```

動作確認をするため，まずはトップページを作成しましょう。次のコマンドでコントローラを作成しましょう。

```zsh:ターミナル
rails g controller graphs index
```

トップページを設定するため，ルーティングを書き換えます。

```config/routes.rb
Rails.application.routes.draw do
  root to: 'graphs#index'
end
```

次の[公式サイトのサンプル](https://www.chartjs.org/docs/latest/)を貼り付けて動作確認を行ってください


```app/views/graphs/index.html.erb
<canvas id=""myChart"" width=""400"" height=""400""></canvas>
<script>
var ctx = document.getElementById('myChart').getContext('2d');
var myChart = new Chart(ctx, {
    type: 'bar',
    data: {
        labels: ['Red', 'Blue', 'Yellow', 'Green', 'Purple', 'Orange'],
        datasets: [{
            label: '# of Votes',
            data: [12, 19, 3, 5, 2, 3],
            backgroundColor: [
                'rgba(255, 99, 132, 0.2)',
                'rgba(54, 162, 235, 0.2)',
                'rgba(255, 206, 86, 0.2)',
                'rgba(75, 192, 192, 0.2)',
                'rgba(153, 102, 255, 0.2)',
                'rgba(255, 159, 64, 0.2)'
            ],
            borderColor: [
                'rgba(255, 99, 132, 1)',
                'rgba(54, 162, 235, 1)',
                'rgba(255, 206, 86, 1)',
                'rgba(75, 192, 192, 1)',
                'rgba(153, 102, 255, 1)',
                'rgba(255, 159, 64, 1)'
            ],
            borderWidth: 1
        }]
    },
    options: {
        scales: {
            yAxes: [{
                ticks: {
                    beginAtZero: true
                }
            }]
        }
    }
});
</script>
```

`rails s`でサーバーを起動し， [http://localhost:3000](http://localhost:3000) にアクセスしましょう。棒グラフが表示されていればOKです。

（グラフが横幅一杯に表示されている問題は次で解消しましょう）

### 0.3 Javascript のコードを移動

Rails では通常 Javascript のコードをビューのファイルに直接書くことはありません。

`app/javascript` に Javscript のファイルを入れるためのディレクトリが用意されています。

ここに Javascript のファイルを入れることで，「ページのソースを表示」からは見えなくなるメリットもありますので，移動させてみましょう。

まず， `app/javascript/packs/` に `graph.js` を作成してください。コマンドで作成する場合は，ターミナルから次を実行して下さい。

```zsh:ターミナル
touch app/javascript/packs/graph.js
```

この `graph.js` を読み込ませるための設定を追加します。

```app/javascript/packs/application.js
// 次を追加
require('./graph')
```

それでは， Javascript のコードを移動させましょう。

```app/views/graphs/index.html.erb
<canvas id=""myChart"" width=""400"" height=""400""></canvas>
```

```app/javascript/packs/graph.js
// turbolinksの読み込みを待つためのコードを追加しておく必要がある
document.addEventListener('turbolinks:load', () => {
    var ctx = document.getElementById('myChart').getContext('2d');
    var myChart = new Chart(ctx, {
        type: 'bar',
        data: {
            labels: ['Red', 'Blue', 'Yellow', 'Green', 'Purple', 'Orange'],
            datasets: [{
                label: '# of Votes',
                data: [12, 19, 3, 5, 2, 3],
                backgroundColor: [
                    'rgba(255, 99, 132, 0.2)',
                    'rgba(54, 162, 235, 0.2)',
                    'rgba(255, 206, 86, 0.2)',
                    'rgba(75, 192, 192, 0.2)',
                    'rgba(153, 102, 255, 0.2)',
                    'rgba(255, 159, 64, 0.2)'
                ],
                borderColor: [
                    'rgba(255, 99, 132, 1)',
                    'rgba(54, 162, 235, 1)',
                    'rgba(255, 206, 86, 1)',
                    'rgba(75, 192, 192, 1)',
                    'rgba(153, 102, 255, 1)',
                    'rgba(255, 159, 64, 1)'
                ],
                borderWidth: 1
            }]
        },
        options: {
            scales: {
                yAxes: [{
                    ticks: {
                        beginAtZero: true
                    }
                }]
            }
        }
    });
})
```

ブラウザをリロードしても棒グラフが表示されていればOKです。

ここで，重要な注意点があります。

単純に `<script>` タグ内を `graph.js` に移動するだけではエラーが発生します。

ページ遷移の高速化のための `turbolinks` を読み込んだ後に動かすようにするため，原則，次のような形式にして下さい。

```js
document.addEventListener('turbolinks:load', () => {
    // Javascriptのコード
})
```

なお， `html.erb` の `<script>` タグ内に Javascript のコードを入れる場合は不要です。

### 0.4 折れ線グラフ

`Chart.js` は「棒グラフ」だけでなく「折れ線グラフ」「円グラフ」などさまざまなグラフを表示することができます。

試しに「折れ線グラフ」を表示させてみましょう。それぞれのファイルのコードを置き換えて下さい。

```app/views/graphs/index.html.erb
<div class=""base-container"">
  <canvas id=""line-chart"" width=""100%"" height=""100%""></canvas>
</div>
```

```app/javascript/packs/graph.js
document.addEventListener('turbolinks:load', () => {
    // 折れ線グラフのデータ（値を変更するとグラフが変化することを確認してみて下さい）
    const lineLabel = ['1/1', '1/2', '1/4', '1/5', '1/6', '1/7']
    const lineData = [60.3, 61.1, 60.8, null, 60.5, 61.4]

    // 折れ線グラフのオプション

    const lineChartData = {
        labels: lineLabel,
        datasets: [{
            label: '体重(kg)',
            data: lineData,
            // グラフの色はここで変更できます
            backgroundColor: 'rgba(255, 99, 132, 0.2)',
            borderColor: 'rgba(255, 99, 132, 1)',
            borderWidth: 1,
            spanGaps: true
        }]
    }

    const lineChartOption = {
        title: {
            display: true,
            text: 'ここにタイトルを記載できます'
        },
        tooltips: {
            callbacks: {
                // ホバー（スマホならタップ）時のラベル表示を変更
                title: function (tooltipItems) {
                    return tooltipItems[0].xLabel.replace(/^(\d+).(\d+)$/, ' $1 月 $2 日')
                },
                label: function (tooltipItem) {
                    return '体重: ' + tooltipItem.yLabel + 'kg'
                }
            }
        }
    }

    // 折れ線グラフを表示
    const lineChartContext = document.getElementById(""line-chart"").getContext('2d')
    new Chart(lineChartContext, {
        type: 'line',
        data: lineChartData,
        options: lineChartOption
    })
})
```

グラフが横幅一杯に表示されている問題を解消するため，スタイルを追加しましょう。

```app/assets/stylesheets/application.css
/* 次を追加（スタイルはお好みで変更して下さい） */
.base-container {
    margin: 0 auto;
    padding: 1rem;
    max-width: 600px;
}
```

ブラウザをリロードして「ピンク色の折れ線グラフ」が表示されればOKです。数値を変更してグラフが変化することも確かめて下さい。


他にもいろいろなグラフを描くことができます。詳しくは公式のページなどをご覧下さい。

- グラフのサンプル
  - https://www.chartjs.org/samples/latest/
- コード
  - https://github.com/chartjs/Chart.js/tree/master/samples/charts
  - 例えば，「Line charts」の「Basic」に対応するコードは，「line」ディレクトリの `basic.html` です

## 1. データベースのデータをグラフ化

現状では，Javascript のコードに直接書いた値しかグラフ化できません。

そこで，次はデータベースにあるデータを用いて， `Chart.js` で折れ線グラフ化する方法を解説していきましょう。

### 1.1 gon とは

コントローラからビューに変数を渡す場合，`@graph`のように`@`を付けたインスタンス変数を使用しますが，これを `js` ファイルに書いても動作しません。

コントローラから `js` ファイルに変数を渡すには，ビューファイルにデータを書き込み，それを `js` ファイルで読み込むという手順を踏む必要があります。

この操作を簡略化できるのが，`gon` というgemです。この記事ではこの `gon` を使用して話を進めていきます。

- [gonのGitHubリポジトリ](https://github.com/gazay/gon)

```none:Gemfile
# 次を追加
gem 'gon'
```

gemの追加を反映するため，ターミナルから`bundle install`を実行して下さい。

### 1.2 コントローラから js ファイルにデータを渡す

現在，グラフを表示させるためのデータは `graph.js` の次の部分に書かれています。

```app/javascript/packs/graph.js
    // 引用
    const lineLabel = ['1/1', '1/2', '1/4', '1/5', '1/6', '1/7']
    const lineData = [60.3, 61.1, 60.8, null, 60.5, 61.4]
```

この情報をコントローラに移動させてみることにしましょう。

まずは，`gon` を使用するビューファイルに `<%= Gon::Base.render_data %>` を追加します。

```app/views/graphs/index.html.erb
<!-- ***** 以下を追加 ***** -->
<%= Gon::Base.render_data %>
<!-- ***** 以上を追加 ***** -->
<div class=""base-container"">
  <canvas id=""line-chart"" width=""100%"" height=""100%""></canvas>
</div>
```

Javascriptにデータを渡すときは「`gon.`」 を付けた変数名とします。この変数名を付けたデータがHTMLのソースコードに埋め込まれます。

```app/controllers/graphs_controller.rb
class GraphsController < ApplicationController
  def index
    gon.chart_label = ['1/1', '1/2', '1/4', '1/5', '1/6', '1/7']
    # null を nil にしないといけないので注意！
    gon.chart_data = [60.3, 61.1, 60.8, nil, 60.5, 61.4]
  end
end
```

そして，この変数を `js` ファイルに渡すようにします。

```app/javascript/packs/graph.js
    // ***** 以下を削除して *****
    const lineLabel = ['1/1', '1/2', '1/4', '1/5', '1/6', '1/7']
    const lineData = [60.3, 61.1, 60.8, null, 60.5, 61.4]
    // ***** 次に置き換える *****
    const lineLabel = gon.chart_label
    const lineData = gon.chart_data
```

`rails s`でサーバーを再起動してから， [http://localhost:3000](http://localhost:3000) にアクセスしましょう。折れ線グラフが表示されていればOKです。コントローラのデータを書き換えて，グラフが変化することを確認してみて下さい。

Chromeの「ページのソースを表示」を使用してみて下さい。`gon.` を付けた変数名のデータが埋め込まれていることが確認できるでしょう。

### 1.3 データベースのデータをグラフ化

いよいよデータベースのデータをグラフ化していきましょう。

ここからは，ビューファイルにデータを渡す手順とほぼ同じです。

まずは，モデルとテーブルを作成しましょう。最低限必要なカラムは，横軸の「日付(date)」と縦軸の「体重(weight)」です。

```zsh
rails g model Graph date:date weight:float
rails db:migrate
```

```app/controllers/graphs_controller.rb
class GraphsController < ApplicationController
  def index
    gon.chart_label = Graph.pluck(:date)
    gon.chart_data = Graph.pluck(:weight)
  end
end
```

初期データを準備しましょう。ひとまず，今までと同じ例を書き換えたものにしておきます。

```db/seeds.rb
list = [
  { date: Date.new(2020, 1, 1), weight: 60.3 },
  { date: Date.new(2020, 1, 2), weight: 61.1 },
  { date: Date.new(2020, 1, 3), weight: 60.8 },
  { date: Date.new(2020, 1, 4), weight: nil },
  { date: Date.new(2020, 1, 5), weight: 60.5 },
  { date: Date.new(2020, 1, 6), weight: 61.4 },
]

Graph.destroy_all
Graph.create!(list)
puts '体重の初期データ投入に成功しました！'
```

ターミナルから次を実行すれば，`seeds.rb`が実行され，初期データがデータベースに入ります。

```zsh
rails db:seed
```

`rails s`でサーバーを再起動してから， [http://localhost:3000](http://localhost:3000) にアクセスしましょう。折れ線グラフが表示されていればOKです。

この時点では，横軸の値が「`年-月-日`」の表示になっています。先ほどと同じ「`月/日`」表示にしたい場合は，コントローラを修正して下さい。これで，グラフの点をホバーしたときの表示も戻ります。

```app/controllers/graphs_controller.rb
class GraphsController < ApplicationController
  def index
    gon.chart_label = Graph.pluck(:date).map { |date| date.strftime(""%-m/%-d"") }
    gon.chart_data = Graph.pluck(:weight)
  end
end
```

ここでは基本パターンのみを確認しました。`Chart.js` にはいろいろな機能が備わっています。公式ページなどを参考にいろいろ試してみて下さい。余裕があれば，これを応用した「体重管理アプリの実装」の教材にもチャレンジしてみて下さい。"
Ruby on Rails,ActionCableを使用したチャットアプリ,"## 環境
- Ruby 2.6.3
- Rails 5.2.3
- DB SQLite

## 本カリキュラムで作成するアプリ
チャットを投稿したら、そのアプリを使用している全クライアントにリアルタイムで反映されるアプリ。

## 目次
- 初期画面の作成
- チャットメッセージを保存するテーブルの作成
- Roomチャンネルの作成
- フロントエンドとバックエンドのつなぎこみ
- チャット内容をリアルタイムで反映
- 部分テンプレートの使用


## 初期画面の作成
まずはコマンドを実行してアプリを立ち上げます。その際、`coffeescript`のファイルを生成しないようにします。

この設定をしないとチャット機能に関するファイルが`coffeescript`で生成されるのですが、こちらの言語は現在ではほとんど使われていないため、今回は使用しないことにします。

```
$ rails _5.2.3_ new chat-app --skip-coffee
```

アプリが作成できたら、Gemfileに`pry-rails`というデバッグツールを入れましょう。こちらをインストールすることで、`binding.pry`を用いて実行中のコードを途中で止めることができます。

```
gem 'pry-rails'
```

Gemfileに記述したらgemをインストールします。

```
$ bundle install --path vendor/bundle
```

ジェネレータで余計なファイルを生成しないように`config/application.rb`を以下のように設定

```rb
require_relative 'boot'

require 'rails/all'

# Require the gems listed in Gemfile, including any gems
# you've limited to :test, :development, or :production.
Bundler.require(*Rails.groups)

module ChatApp
  class Application < Rails::Application
    # Initialize configuration defaults for originally generated Rails version.
    config.load_defaults 5.2

    # 以下を追加
    # ここから
    config.generators do |g|
      g.stylesheets false
      g.javascripts false
      g.helper false
      g.test_framework false
    end
    # ここまで

  end
end
```

チャットルームを表示するための`rooms`コントローラを作成しましょう。その際、ついでに`show`アクションも追加します。

```
$ rails g controller rooms show
```

`show`アクションが追加できたら、routes.rbにルーティングを追加します。

```rb
Rails.application.routes.draw do
  # 以下を追加
  root to: 'rooms#show'

  # 以下の2行は削除
  # get 'rooms/show'
  # For details on the DSL available within this file, see http://guides.rubyonrails.org/routing.html
end
```

こちらのルーティングにしたがって表示される`views/rooms/show.html.erb`が本アプリのメイン画面になります。

それではここで一度、動作確認をしてみましょう。まずはサーバーを起動します。

```
$ rails s
```

サーバーが起動できたら以下にアクセスします。

http://localhost:3000/

以下のような画面が確認できればOKです。

```
Rooms#show
Find me in app/views/rooms/show.html.erb
```

## チャットメッセージを保存するテーブルの作成
今回は`Message`テーブルにチャットメッセージを保存していきます。

まずは、`Message`テーブルに関連する`Message`モデルを作成しましょう。

```
$ rails g model Message
```

`db/migrate`に生成されたマイグレーションファイルに以下のコードを追記して、`Messages`テーブルと`string`型の`content`カラムを作成しましょう。

```rb
class CreateMessages < ActiveRecord::Migration[5.2]
  def change
    create_table :messages do |t|

      # 以下を追加
      t.string :content

      t.timestamps
    end
  end
end
```

マイグレーションファイルの記述が終わったら、マイグレーションを実行して`Messages`テーブルを作成します。

```
$ bundle exec rake db:migrate
```

テーブルが作成できたら、実際にデータを投入してそれが表示できるか確認してみましょう。

まずはRails環境のコンソールを立ち上げます。

```
$ rails c
```

次に、`Message`テーブルにデータを2つ追加します。

```
[1] pry(main)> Message.create!(content: ""おはようございます！"")
```

以下のような表示になれば成功です。

```
(0.1ms)  begin transaction
Message Create (0.7ms)  INSERT INTO ""messages"" (""content"", ""created_at"", ""updated_at"") VALUES (?, ?, ?)  [[""content"", ""おはようございます！""], [""created_at"", ""2019-09-28 07:34:28.770791""], [""updated_at"", ""2019-09-28 07:34:28.770791""]]
(1.0ms)  commit transaction
=> #<Message:0x00007f8b73a4f5a0
id: 1,
content: ""おはようございます！"",
created_at: Sat, 28 Sep 2019 07:34:28 UTC +00:00,
updated_at: Sat, 28 Sep 2019 07:34:28 UTC +00:00>
```

続いてもう一つデータを追加します。

```
[2] pry(main)> Message.create!(content: ""こんにちは！"")
```

データが追加できたら、コンソールを終了します。

```
[3] pry(main)> exit
```

次に、登録したデータを取得するコードを書きましょう。

`rooms_controller.rb`のshowメソッドに、以下のコードを追記します。

```rb
class RoomsController < ApplicationController
  def show
    # 以下を追記
    @messages = Message.all
  end
end
```

`rooms/show.html.erb`に以下を追記し、messageのcontentに登録したデータを表示してみましょう。

```
<h1>Chat Room</h1>
<div id=""messages"">
  <% @messages.each do |message| %>
    <p><%= message.content %></p>
  <% end %>
</div>
```

それでは、追加したデータが画面に表示されるか確認してみましょう。

以下にアクセスしてみてください。

http://localhost:3000/

Chromeの画面をリロード（command + r）して登録したデータが確認できればOKです。

```
Chat Room
おはようございます！

こんにちは！
```

## Roomチャンネルの作成
次に、チャットをリアルタイムで反映させるためのRoomチャンネルを作成しましょう。以下のコマンドを実行してください。

```
$ rails g channel room speak
```

それではこれから、ビューで投稿したデータをフロントエンド（JS）に渡し、それをバックエンド（Ruby）に渡してリアルタイムでRoomチャンネルに反映（broadcast）させる処理を記述していきます。

まずは、ActionCableを使用するための設定をしましょう。

```rb
Rails.application.routes.draw do
  root to: 'rooms#show'

  # 以下を追記
  mount ActionCable.server => '/cable'
end
```

それでは次に、`app/channels/room_channel.rb`の編集をしていきましょう。

こちらのsubscrivedメソッドは、フロントエンドとバックエンドが繋がった時に実行されます。まずは、`subscribed`メソッドがきちんと実行されるかどうかを確認しましょう。

```rb
class RoomChannel < ApplicationCable::Channel
  def subscribed
    # stream_from ""some_channel""

    # 以下を追加
    binding.pry
  end

  def unsubscribed
    # Any cleanup needed when channel is unsubscribed
  end

  def speak
  end
end
```

以下にアクセスして画面をリロード（command + r）

http://localhost:3000/

ターミナルを確認し、以下のように`binding.pry`が機能すればOKです。

```
From: /Users/kamizatoyoshito/rails/code/chat-app2/app/channels/room_channel.rb @ line 4 RoomChannel#subscribed:

    2: def subscribed
    3:   # stream_from ""some_channel""
 => 4:   binding.pry
    5: end

[1] pry(#<RoomChannel>)> Started GET ""/cable"" for ::1 at 2019-09-28 16:44:36 +0900
Started GET ""/cable/"" [WebSocket] for ::1 at 2019-09-28 16:44:36 +0900
Successfully upgraded to WebSocket (REQUEST_METHOD: GET, HTTP_CONNECTION: Upgrade, HTTP_UPGRADE: websocket)

From: /Users/kamizatoyoshito/rails/code/chat-app2/app/channels/room_channel.rb @ line 4 RoomChannel#subscribed:

    2: def subscribed
    3:   # stream_from ""some_channel""
 => 4:   binding.pry
    5: end

[1] pry(#<RoomChannel>)>
```

確認ができたら、`binding.pry`は削除して下さい。

```rb
class RoomChannel < ApplicationCable::Channel
  def subscribed
    # stream_from ""some_channel""

    # 以下を削除
    # binding.pry
  end

  def unsubscribed
    # Any cleanup needed when channel is unsubscribed
  end

  def speak
  end
end
```

## フロントエンドとバックエンドのつなぎこみ
次に、フロントエンドであるJSからバックエンドであるRubyにデータを渡すことができるか確認していきましょう。

まずは、`RoomChannel`がきちんと機能していることを確認します。

```js
App.room = App.cable.subscriptions.create(""RoomChannel"", {
  connected: function() {
    // Called when the subscription is ready for use on the server
    console.log('connected')
  },

  disconnected: function() {
    // Called when the subscription has been terminated by the server
  },

  received: function(message) {
    // Called when there's incoming data on the websocket for this channel
  },

  speak: function(content) {
    return this.perform('speak');
  }
});
```

ChromeのコンソールからJSのspeakメソッドを実行

- chromeの画面で右クリック
- 「検証」をクリック
- consoleタブをクリック

consoleのタブに`console.log`の内容が表示されていればOKです。

```
connected
```

これで`RoomChannel`がきちんと機能していることが確認できました。

次に、`RoomChannel`のオブジェクトである`App.room`の`speak`メソッドを実行し、バックエンドにデータを渡せるか確認してみましょう。

まずは`app/assets/javascript/channels/room.js`の`speak`メソッドの記述を変更し、バックエンドに渡すデータを作成しましょう。

```js
App.room = App.cable.subscriptions.create(""RoomChannel"", {
  connected: function() {
    // Called when the subscription is ready for use on the server
    console.log('connected')
  },

  disconnected: function() {
    // Called when the subscription has been terminated by the server
  },

  received: function(message) {
    // Called when there's incoming data on the websocket for this channel
  },

  speak: function(content) {
    // 以下のコードにハッシュを追加
    return this.perform('speak', {message: ""ハロー！""});
  }
});
```

`App.room`の`speak`メソッドで定義した`{message: ""ハロー！""}`というデータが、`app/channels/room_channel.rb`にある`RoomChannel`クラスの`speak`メソッドに渡せるか確認してみましょう。

こちらで`{message: ""ハロー！""}`の内容が確認できれば、フロントエンド（JS） -> バックエンド（Ruby）へとデータの受け渡しができたことになります。

```rb
class RoomChannel < ApplicationCable::Channel
  def subscribed
    # stream_from ""some_channel""
  end

  def unsubscribed
    # Any cleanup needed when channel is unsubscribed
  end

  def speak(data)
    # 以下を追記
    binding.pry
  end
end
```

まずは、JSの変更を反映させるため、Chromeをリロードしましょう。

それでは、Chromeの検証からconsoleのタブを開き、以下のコードを実行して`App.room`の`speak`メソッドを呼び出してみてください。

```
> App.room.speak()
```

ターミナルを確認し、binding.pryの箇所で処理が止まっていればOKです。

```
From: /Users/kamizatoyoshito/rails/code/chat-app2/app/channels/room_channel.rb @ line 11 RoomChannel#speak:

    10: def speak(data)
 => 11:   binding.pry
    12: end

[1] pry(#<RoomChannel>)>
```

これにより、JS側で`App.room.speak()`を実行することによって、サーバーサイドである`RoomChannel`の`speak`メソッドを呼び出せたことがわかりました。

それでは、`App.room.speak()`で渡した`{message: ""ハロー！""}`というデータが、`RoomChannel`の`speak`メソッドから確認できるか試してみましょう。

```
[1] pry(#<RoomChannel>)> data
=> {""message""=>""ハロー！"", ""action""=>""speak""}
```

これで、フロントエンドからバックエンドにきちんとデータが渡されていることが確認できました。

## チャット内容をリアルタイムで反映
それではここからチャット内容をリアルタイムで反映させる処理を実装していきましょう。

まずは`App.room.speak()`から`RoomChannel`の`speak`に渡されたデータを`Message`テーブルに保存します。

```rb
class RoomChannel < ApplicationCable::Channel
  def subscribed
  end

  def unsubscribed
    # Any cleanup needed when channel is unsubscribed
  end

  def speak(data)
    # 以下を追加
    Message.create!(content: data['message'])
  end
end
```

そして、この後がチャット機能においてとても重要です。

`Message`テーブルにデータが保存できたら、`ActionCable.server`から`broadcast`を行います。これにより、サーバーへの変更が生じたらそれをクライアント全体に通知してくれます。つまり、他のユーザーが投稿したチャットを全ユーザーが画面を更新せず確認できるようになるのです。

```rb
class RoomChannel < ApplicationCable::Channel
  def subscribed
    # 以下を追加
    stream_from ""room_channel""
  end

  def unsubscribed
    # Any cleanup needed when channel is unsubscribed
  end

  def speak(data)
    Message.create!(content: data['message'])
    # 以下を追加
    ActionCable.server.broadcast 'room_channel', data['message']
  end
end
```

`ActionCable.server`から`broadcast`されたデータは、フロントエンドである`App.room`の`received`から確認できます。

それでは、`received`にて`broadcast`されたデータが受け取れているか`alert`を使って確認してみましょう。

```js
App.room = App.cable.subscriptions.create(""RoomChannel"", {
  connected: function() {
    // Called when the subscription is ready for use on the server
    console.log('connected')
  },

  disconnected: function() {
    // Called when the subscription has been terminated by the server
  },

  received: function(message) {
    // Called when there's incoming data on the websocket for this channel

    // 以下を追加
    alert(message)
  },

  speak: function(content) {
    return this.perform('speak', {message: ""ハロー！""});
  }
});
```

`alert`が追加できたらChromeをリロードし、コンソール画面から`App.room.speak()`を実行して、アラートが表示されるか確認してみましょう。

```
> App.room.speak()
```

ブラウザ上部に「ハロー！」と書かれたアラートが表示されればOKです。

## チャット内容をリアルタイムで反映
`broadcast`ができるようになったら、次はユーザーが投稿したチャットの内容を画面に反映させる処理を実装していきます。

まずは、チャットを投稿できるようにしましょう。

`app/views/rooms/show.html.erb`にチャット投稿用のフォームを作成します。

```
<h1>Chat Room</h1>

<!-- 以下の4行を追加 -->
<form>
  <input type=""text"" id=""chat-input"" class=""form-control"" />
  <button id=""button"">送信</button>
</form>

<div id=""messages"">
  <% @messages.each do |message| %>
    <p><%= message.content %></p>
  <% end %>
</div>
```

それでは次に、送信ボタンを押した後にフォームに入力した値を、`App.room.speak()`に渡す処理を実装していきましょう。

まずは`app/assets/javascripts/channels/room.js`に、ドキュメントを読み込んだ後にJSを実行するコードを追記します。

```js
App.room = App.cable.subscriptions.create(""RoomChannel"", {
  connected: function() {
    console.log('connected')
  },

  disconnected: function() {
    // Called when the subscription has been terminated by the server
  },

  received: function(message) {
    alert(message)
  },

  speak: function(content) {
    return this.perform('speak', {message: {message: ""ハロー！""}});
  }
});

// 以下のJSを追記
document.addEventListener('DOMContentLoaded', function() {

})
```

次に、DOM操作をしてフォームから送信したデータを取得し、`App.room.speak()`に渡す処理を追記します。

```js
App.room = App.cable.subscriptions.create(""RoomChannel"", {
  connected: function() {
    console.log('connected')
  },

  disconnected: function() {
    // Called when the subscription has been terminated by the server
  },

  received: function(message) {
    alert(message)
  },

  speak: function(content) {
    return this.perform('speak', {message: ""ハロー！""});
  }
});

document.addEventListener('DOMContentLoaded', function() {
  // rooms/shou.html.erbのidがchat-inputのオブジェクトを取得
  const input = document.getElementById('chat-input')
  // rooms/shou.html.erbのidがbuttonのオブジェクトを取得
  const button = document.getElementById('button')
  // buttonクリック時の操作を記述
  button.addEventListener('click', function() {
    // inputに入力された値を取得
    const content = input.value
    // App.roomのspeakメソッドを実行
    App.room.speak(content)
    // inputの入力値を空文字にする
    input.value = ''
  })
})
```

これでフォームに入力した値を`App.room.speak`に渡せるようになりました。しかし、現在ではまだ`App.room.speak`メソッドから`RoomChannel`に渡す値は`{message: ""ハロー！""}`のままです。

こちらを`App.room.speak`メソッドの引数で受け取った値に変更しましょう。

```js
App.room = App.cable.subscriptions.create(""RoomChannel"", {
  connected: function() {
    console.log('connected')
  },

  disconnected: function() {
    // Called when the subscription has been terminated by the server
  },

  received: function(message) {
    alert(message)
  },

  speak: function(content) {
    // messageに引数のcontentで受け取った値を渡す
    return this.perform('speak', {message: content});
  }
});

document.addEventListener('DOMContentLoaded', function() {
  const input = document.getElementById('chat-input')
  const button = document.getElementById('button')
  button.addEventListener('click', function() {
    const content = input.value
    App.room.speak(content)
    input.value = ''
  })
})
```

これで、フォームから入力した値を`App.room.speak`メソッドから`RoomChannel`に渡せるようになりました。

ここまでできたら、入力画面から値を入れて送信してみましょう。その内容がアラートに表示されればOKです。

アラートが確認できたら、そのデータをJSを使って画面に反映するコードを書きましょう。

```js
App.room = App.cable.subscriptions.create(""RoomChannel"", {
  connected: function() {
    // Called when the subscription is ready for use on the server
    console.log('connected')
  },

  disconnected: function() {
    // Called when the subscription has been terminated by the server
  },

  received: function(message) {
    // Called when there's incoming data on the websocket for this channel

    // viewのidがmessagesのオブジェクトを取得
    const messages = document.getElementById('messages')
    // オブジェクトのHTMLに以下のデータを追加で挿入
    messages.innerHTML += `<p>${message}</p>`
  },

  speak: function(content) {
    return this.perform('speak', {message: content});
  }
});

document.addEventListener('DOMContentLoaded', function() {
  const input = document.getElementById('chat-input')
  const button = document.getElementById('button')
  button.addEventListener('click', function() {
    const content = input.value
    App.room.speak(content)
    input.value = ''
  })
})
```

それでは、チャット機能に関する最後の確認です。

Chromeの画面を複数開き、送信したチャットがリアルタイムで反映されるか確認してみましょう。

一つの画面からチャットを送信した時、他の画面でリロードをしなくてもチャットがリアルタイムで配信されていることを確認してください。

## 部分テンプレートの使用
チャット機能ができたら、次はこーどの改善を行なっていきます。

現在、`show.html.erb`で`message.content`を表示する際に`each`を使用していますが、こちらを部分テンプレートにし、`view`と`RoomChannel`の両方で使い回せるようにしましょう。

`show.html.erb`を以下のように変更します。

```
<h1>Chat Room</h1>
<form>
  <input type=""text"" id=""chat-input"" class=""form-control"" />
  <button id=""button"">送信</button>
</form>
<div id=""messages"">

  <!-- 以下の記述に変更 -->
  <%= render @messages %>

</div>
```

`<%= rendar @messages %>`の記述により、`views`の`messages`ディレクトリの`_message.html.erb`という部分テンプレートが使えるようになります。

それでは次に、`views/messages/_message.html.erb`を新規作成し、以下のコードを追加しましょう。

```
<p><%= message.content %></p>
```

ここまでできたら、投稿内容がきちんと表示されるか確認してください。

投稿内容が確認できたら、次に`RoomChannel`でもテンプレートを使用して表示をするようにします。

```rb
class RoomChannel < ApplicationCable::Channel
  def subscribed
    stream_from ""room_channel""
  end

  def unsubscribed
    # Any cleanup needed when channel is unsubscribed
  end

  def speak(data)
    # オブジェクトをmessageに格納
    message = Message.create!(content: data['message'])
    # _message.html.erbにデータを渡してHTMLを生成
    template = ApplicationController.renderer.render(partial: 'messages/message', locals: {message: message})
    # 生成されたHTMLを渡してbroadcast
    ActionCable.server.broadcast 'room_channel', template
  end
end
```

こちらできちんとデータが投稿され、その内容が表示されればOKです。

以上で簡単なチャット機能の実装が完了しました。この手順を応用してチャットルームを作成し、その中でチャットをできるようにする、などの機能の実装にも挑戦してみてください。

また、こちらに関しては、今後デザインを整える部分も追加していきます。更新したらまたおしらせしますので、宜しくお願いいたします。お疲れ様でした。"
Ruby on Rails,【作ってみよう！】体重管理アプリの実装,"「データを`グラフ`で表示したい」と思ったことはありませんか?

データを表にまとめる方が便利なこともありますが，グラフを使うことで`データ全体を視覚的に捉える`ことができます。

データをグラフ化するライブラリは複数存在しますが，この記事では `Chart.js` を使用して，データベースにある体重データを任意の期間でグラフ化するアプリについて解説したいと思います。

- 体重管理アプリのサンプルURL
  - [https://weight-management-app.herokuapp.com/](https://weight-management-app.herokuapp.com/)
  - ゲストログイン機能は実装までは解説しておりません

## 0. 準備

### 0.1 注意点

- Railsのバージョンは `Rails 5.2.4` で行います
  - **Rails 6** の環境構築方法は８章をご覧下さい
- テンプレートエンジンは erb形式 を採用します（HTMLに近い書き方）
- Javascript のプログラムもかなり書きます（jQuery は表面上使用しません）
- 見た目を簡単に整えるため，Bootstrap 4 を利用します
- テスト(RSpec)までは解説しません
- Gitの使用方法については解説しません。コミット，ブランチの変更などは各自で対応いただきたいと思います。
- Rails, Javascript の基礎的な部分は解説しておりません。必要に応じて調べて下さい。

### 0.2 作成するアプリの仕様を確認

1.ログイン機能

- `Devise`という Gem を使用することで簡単に実装できます
  - 本題ではないため，簡単に済ませます

2.体重データをグラフ化

- `Chart.js` というライブラリを使用すると，簡単にグラフ化できます
- オプションで豊富で，例えば，体重の記録が無い（データが`null`）日付があった場合もきれいにグラフをつなげられます

3.グラフを指定した期間に変更できる

- 実装方法は大きく２種類あります
  - ボタンをクリックするたびに `Rails` サーバーにリクエストを出し，必要な情報をデータベースから入手して表示
  - 先に全データを取得し， `Javascript` だけでグラフを変更

▼ 前者の特徴

- データが大きすぎる場合にも対応できる
- グラフを切り替える度に読み込みが入るため切り替えが遅い

▼ 後者のメリット

- グラフの切り替えが高速
- データ量が大きすぎるケースには向かない

今回は`速度面を重視`して後者で実装します。体重データ編集モーダルで体重を補完する機能も高速化できます。

【補足】 前者の場合なら [Chartkick](https://chartkick.com/) を使う手もあります。

4.体重データの新規登録・編集・削除機能

- モーダルは`Bootstrap`を使用すると簡単に実装できます
- 新規投稿と，編集・削除の２つのモーダルに分けます
- 編集・削除のフォームでは，日付を指定したとき，体重データが補完されるようにします

### 0.3 ライブラリの解説

- Devise（ログイン機能）
- Bootstrap（見た目を簡単に整えられる）
- Chart.js（グラフ）
- flatpickr（カレンダー）

## 1. 準備＆各種ライブラリの動作確認

【補足】 Rails 6 の環境構築方法は８章をご覧下さい

### 1.1 Rails 5.2.4 のインストール

```bash:ターミナル
# Rails 5.2.4 をインストール
gem install rails:5.2.4
# インストールしたRubyを使用可能な状態にする⇒shimsへの反映
rbenv rehash
```

### 1.2 アプリの作成


```bash:ターミナル
# データベースにPostgreSQLを使用される場合
rails _5.2.4_ new weight_management_app -d postgresql -T --skip-coffee
# データベースにMySQLを使用される場合
rails _5.2.4_ new weight_management_app -d mysql -T --skip-coffee
​
# （各オプションの意味）
# ・rails _5.2.4_ => Railsのバージョンを 5.2.4 に指定
# ・-d postgresql => 「--database=postgresql」の略。
#                    データベースをPostgreSQLに指定。
# ・-T            => 「--skip-test」の略。MiniTest を使用しない
# ・--skip-coffee => CoffeeScript を使用しない
```

```bash:ターミナル
# 「weight_management_app」のディレクトリに移動し忘れないように！
cd weight_management_app
```

```bash:Gemfile
# 中略
gem 'bootsnap', '>= 1.1.0', require: false

# ***** 以下を追加 *****
# ログイン機能
gem 'devise'

# 日本語化
gem 'rails-i18n', '~> 5.1'
gem 'devise-i18n'

# Bootstrap（簡単に見た目を整えられる）
gem 'bootstrap', '~> 4.4.1'
gem 'jquery-rails'
# ログイン関連ページにBootstrapを適用するGem
gem 'devise-bootstrap-views', '~> 1.0'

# Chart.js（グラフ表示）
gem 'chart-js-rails'
# flatpickr（カレンダー）
gem 'flatpickr'
# Gon（コントローラから Javascript に変数を渡せるようにする）
gem 'gon'
# ***** 以上を追加 *****
# 中略

group :development do
  # 中略
  # ***** 以下を追加 *****
  # デバッグで利用
  gem 'pry-byebug'
  # ***** 以上を追加 *****
end
```
​
▼ gem を追加したので`bundle install`を実行した上でデータベースを作成

```bash:ターミナル
bundle install
rails db:create
```
​
▼ 念のためこの時点で，`rails s`でサーバーを起動し，`http://localhost:3000/`に接続して「Yay! You’re on Rails!」が出るか確認して下さい
​
### 1.3 トップページの作成​

```bash:ターミナル
rails g controller graphs index
```

```config/routes.rb
Rails.application.routes.draw do
# get 'graphs/index' は削除
# ***** 以下を追加 *****
  root 'graphs#index'
# ***** 以上を追加 *****
end
```

```erb:app/views/layouts/application.html.erb
<!DOCTYPE html>
<html>
  <head>
  <!-- ***** タイトルを変更 ***** -->
    <title>体重管理アプリ</title>
  <!-- ***** 以上を編集 ***** -->
    <%= csrf_meta_tags %>
    <%= csp_meta_tag %>
​
  <!-- ***** 以下を追加 ***** -->
  <!-- 表示をスマートフォンに対応させる -->
  <meta name=""viewport"" content=""width=device-width,initial-scale=1"">
  <!-- ***** 以上を追加 ***** -->
​
    <%= stylesheet_link_tag    'application', media: 'all', 'data-turbolinks-track': 'reload' %>
    <%= javascript_include_tag 'application', 'data-turbolinks-track': 'reload' %>
  </head>
​
  <body>
  <!-- ***** 本文を編集 ***** -->
  <!-- 本当は必要なページだけをdivで囲むべきですが，本題ではないのでここに追加します -->
  <!-- 全ページの横幅に上限を設ける（cssは後に追加） -->
    <div class=""graph-container"">
    <%= yield %>
    </div>
  <!-- ***** 以上を編集 ***** -->
  </body>
​
</html>
```
​
### 1.4 各種ライブラリの導入
▼【各種GemのGitHubのリンク】

- [Bootstrap（見た目を整える）](https://github.com/twbs/bootstrap-rubygem)
- [Chart.js（グラフ）](https://github.com/coderbydesign/chart-js-rails)
- [flatpickr（カレンダー）](https://github.com/zokioki/flatpickr-rails)
​

【注】 `app/assets/stylesheets/application.css`の拡張子`css`を`scss`に変更

```app/assets/stylesheets/application.scss
/* ...
*= require flatpickr
*= require flatpickr/themes/material_blue
 */

@import ""bootstrap"";

// 全体
.graph-container {
  @extend .container-fluid;
  max-width: 768px;
  padding: 1rem;
}
```

```app/assets/javascripts/application.js
//= require rails-ujs
//= require activestorage
// ***** 以下を追加 *****
//= require Chart.min
//= require flatpickr
//= require flatpickr/l10n/ja
//= require jquery3
//= require popper
//= require bootstrap-sprockets
// ***** 以上を追加( turbolinks より上に追加) *****
//= require turbolinks
//= require_tree .
```
​
### 1.5 各種ライブラリの動作確認

- それぞれ，`中身を置き換えた`後にトップページを確認して下さい
- 公式ページなどを参考に，各ライブラリの基本的な使用方法を確認して下さい

▼ Bootstrapの動作確認

- [公式サイト（英語）](https://getbootstrap.com/docs/4.4/getting-started/introduction/)
- [公式サイト（日本語）](https://getbootstrap.jp/docs/4.4/getting-started/introduction/)

まずは青いボタンを表示させてみましょう！

```html:app/views/graphs/index.html.erb
<p class=""mt-4"">青いボタンが表示されていれば，「Bootstrap」の導入はOKです</p>
<button type=""button"" class=""btn btn-primary btn-block"">ボタン</button>
```

次に，モーダルを表示させてみましょう！

- Bootstrapのモーダル
  - [公式(日本語訳)](https://getbootstrap.jp/docs/4.4/components/modal/)

【注】次を一致させておく必要があります

- button タグの`data-target`(`#`を付けておく)
- モーダルの`id`

```html:app/views/graphs/index.html.erb
<p class=""mt-4"">ボタンを押したときにモーダルが表示されれば，「Bootstrap」の導入はOKです</p>
<button type=""button"" class=""btn btn-primary btn-block"" data-toggle=""modal"" data-target=""#test-modal"">モーダル</button>
<!-- ボタンを押したとき，以下のモーダルが出現 -->
<div class=""modal fade"" id=""test-modal"" data-backdrop=""static"" tabindex=""-1"" role=""dialog"" aria-hidden=""true"">
  <div class=""modal-dialog modal-dialog-centered modal-sm"" role=""document"">
    <div class=""modal-content"">
      <div class=""modal-header"">
        <h5 class=""modal-title"">タイトル</h5>
        <button type=""button"" class=""close"" data-dismiss=""modal"" aria-label=""Close"">
          <span aria-hidden=""true"">&times;</span>
        </button>
      </div>
      <div class=""modal-body"">
        <p>本文はここに書きます</p>
      </div>
      <div class=""modal-footer"">
        <p>フッターはここに書きます</p>
      </div>
    </div>
  </div>
</div>
```

▼ flatpickr（カレンダー）の動作確認

- [公式サイト](https://flatpickr.js.org/)
- [日本語訳（非公式）](https://tr.you84815.space/flatpickr/localization.html)

【注意】次を一致させておく必要があります

- `input`タグ内の`id`
- `flatpickr`の第１引数（`#`を付けておく）

```html:app/views/graphs/index.html.erb
<p class=""my-4"">フォームをクリックしたときに，青色の帯のカレンダーが出れば「flatpickr」の導入はOKです</p>
<input id=""date-form"" type=""text"" placeholder=""日付を設定"" readonly>
​
<script>
    // カレンダーの表示
    flatpickr('#date-form')
</script>
```

- 次はオプションを追加してみましょう！
  - 曜日などが日本語化されていることを確認
  - 選択できる日付に制限が入っていることを確認
  - 日付を変更して仕様を確認

```html:app/views/graphs/index.html.erb
<p class=""my-4"">フォームをクリックしたときに，青色の帯のカレンダーが出れば「flatpickr」の導入はOKです</p>
<input class=""form-control bg-white"" id=""date-form"" type=""text"" placeholder=""日付を設定"" readonly>
​
<script>
    // 本来 Javascript をここに書くべきではありません。プログラムの移動方法は後に解説します

    const TODAY = new Date(new Date().setHours(0, 0, 0, 0))
    const A_MONTH_AGO = new Date(TODAY.getFullYear(), TODAY.getMonth() - 1, TODAY.getDate())

    // 選択できない日付データ（自由に変更していただいてOKです）
    const DISABLE_DATES = ['2019-12-10', '2019-12-20', '2019-12-30', '2020-01-10', '2020-1-20', '2020-01-30']

    // カレンダーの日本語化
    flatpickr.localize(flatpickr.l10ns.ja)

    // カレンダーの表示
    flatpickr('#date-form', {
        // スマートフォンでもカレンダーに「flatpickr」を使用
        disableMobile: true,
        // 1ヶ月前から本日まで選択可
        minDate: A_MONTH_AGO,
        maxDate: TODAY,
        // 選択できない日付
        disable: DISABLE_DATES
    })
</script>
```

【補足】 カレンダーの色はある程度変更できます。

- [公式サイト](https://flatpickr.js.org/themes/)
  - `app/assets/stylesheets/application.scss`にある`*= require flatpickr/themes/material_blue
`を変更して下さい。８通りに変更できます。

- (例)
  - `*= require flatpickr/themes/material_blue`を消す → `白色`
  - `*= require flatpickr/themes/dark` → `ダークモード`

▼ Chart.js の動作確認

- [公式（英語）](https://www.chartjs.org/docs/latest/)
- [日本語訳（非公式）](https://misc.0o0o.org/chartjs-doc-ja/)
- [サンプル（公式）](https://www.chartjs.org/samples/latest/)
- [サンプルコード（公式）](https://github.com/chartjs/Chart.js/tree/master/samples)

【注】次を一致させておく必要があります

-  canvas タグの`id`
- `new Chart()`に渡す引数（第1引数は`document.getElementById(""id名"").getContext('2d')`とします）

まず `棒グラフ` を表示させてみましょう！

```html:app/views/graphs/index.html.erb​
<p class=""mt-4"">棒グラフが表示されていれば，「Chart.js」の導入はOKです</p>
<canvas id=""bar-chart""></canvas>
​
<script>
    // 棒グラフのデータ（値を変更するとグラフが変化することを確認してみて下さい）
    let barLabel = ['1月', '2月', '3月', '4月', '5月', '6月']
    let barData = [5, 4, 2, 6, 5, 8]

    // 棒グラフのオプション

    const barChartData = {
        labels: barLabel,
        datasets: [{
            label: '得点',
            data: barData,
            backgroundColor: 'rgba(54, 162, 235, 0.2)',
            borderColor: 'rgba(54, 162, 235, 1)',
            borderWidth: 1
        }]
    }

    const barChartOption = {
        title: {
            display: true,
            text: '棒グラフ'
        },
        scales: {
            yAxes: [{
                ticks: {
                    // y軸のメモリを 0 からスタートに強制
                    beginAtZero: true
                }
            }]
        }
    }

    // 棒グラフを表示
    const barChartContext = document.getElementById(""bar-chart"").getContext('2d')
    new Chart(barChartContext, {
        type: 'bar',
        data: barChartData,
        options: barChartOption
    })
</script>
```

次に `折れ線グラフ` を表示させてみましょう！

```html:app/views/graphs/index.html.erb​
<p class=""mt-4"">折れ線グラフが表示されていれば，「Chart.js」の導入はOKです</p>
<canvas id=""line-chart""></canvas>
​
<script>
    // 本来 Javascript をここに書くべきではありません。プログラムの移動方法は後に解説します

    // 折れ線グラフのデータ（値を変更するとグラフが変化することを確認してみて下さい）
    let lineLabel = ['1/1', '1/2', '1/4', '1/5', '1/6', '1/7']
    let lineData = [60.3, 61.1, 60.8, null, 60.5, 61.4]

    // 折れ線グラフのオプション

    const lineChartData = {
        labels: lineLabel,
        datasets: [{
            label: '体重(kg)',
            data: lineData,
            backgroundColor: 'rgba(255, 99, 132, 0.2)',
            borderColor: 'rgba(255, 99, 132, 1)',
            borderWidth: 1,
            spanGaps: true
        }]
    }

    const lineChartOption = {
        title: {
            display: true,
            text: '折れ線グラフ'
        },
        tooltips: {
            callbacks: {
                // ホバー（スマホならタップ）時のラベル表示を変更
                title: function (tooltipItems) {
                    return tooltipItems[0].xLabel.replace(/^(\d+).(\d+)$/, ' $1 月 $2 日')
                },
                label: function (tooltipItem) {
                    return '体重: ' + tooltipItem.yLabel + 'kg'
                }
            }
        }
    }

    // 折れ線グラフを表示
    const lineChartContext = document.getElementById(""line-chart"").getContext('2d')
    new Chart(lineChartContext, {
        type: 'line',
        data: lineChartData,
        options: lineChartOption
    })
</script>
```

データの中身を変更するとグラフが変化することも確認しておきましょう

## 2. ログイン機能

### 2.1 ログイン機能の導入​

```bash:ターミナル
rails g devise:install
rails g devise user
rails db:migrate
```

▼ ログイン関連ページを日本語化

```config/application.rb
  # 中略
  class Application < Rails::Application
    config.load_defaults 5.2
​
    # ********** 以下を追加 **********
    # 日本語に変更
    config.i18n.default_locale = :ja
    # タイムゾーンも変更
    config.time_zone = 'Asia/Tokyo'
    # ********** 以上を追加 **********
​
    config.generators.system_tests = nil
  # 中略
```

```app/controllers/application_controller.rb
class ApplicationController < ActionController::Base
  # ********** 以下を追加 **********
  # 全ページをログイン必須とする
  before_action :authenticate_user!
  # ********** 以上を追加 **********
end
```
​
▼ 初期ユーザーを投入

```db/seeds.rb
EMAIL = 'test@example.com'
PASSWORD = 'password'

# テストユーザーが存在しないときだけ作成し，変数名を user とする（後に使用）
user = User.find_or_create_by!(email: EMAIL) do |user|
  user.password = PASSWORD
  puts 'ユーザーの初期データインポートに成功しました。'
end
```

```bash:ターミナル
rails db:seed
```
​
### 2.2 ナビバーとフラッシュ表示部分を作成​

```erb:app/views/layouts/application.html.erb
<!-- 中略 -->
  <body>
    <!-- ********** 「body」タグ内の一番上に，以下を追加 ********** -->
    <!-- 本当は必要なページだけに追加すべきですが，本題ではないのでここに追加します -->
    <!-- 全ページにナビバーを追加 -->
    <%= render 'shared/header' %>
    <!-- ログイン関連ページ以外にフラッシュ表示部分を追加 -->
    <% if controller_name == 'graphs' %>
      <%= render 'shared/flash_messages' %>
    <% end %>
    <!-- ********** 以上を追加 ********** -->
    <div class=""graph-container"">
      <%= yield %>
    </div>
  </body>
<!-- 中略 -->
```
​
▼ `app/views`に`shared`ディレクトリを作成し，ナビバー用の部分テンプレート`_header.html.erb`を作成

```erb:app/views/shared/_header.html.erb
<header class=""sticky-top"">
  <nav class=""navbar navbar-expand-sm navbar-dark bg-dark"">
    <%= link_to ""体重管理アプリ"", root_path, class: 'navbar-brand' %>
    <button type=""button"" class=""navbar-toggler"" data-toggle=""collapse"" data-target=""#navbarNav"" aria-controls=""navbarNav"" aria-expanded=""false"" aria-label=""ナビゲーションの切替"">
      <span class=""navbar-toggler-icon""></span>
    </button>
    <div class=""collapse navbar-collapse"" id=""navbarNav"">
      <ul class=""navbar-nav"">
        <% if user_signed_in? %>
          <li class=""nav-item active"">
            <%= link_to 'アカウント編集', edit_user_registration_path, class: 'nav-link' %>
          </li>
          <li class=""nav-item active"">
            <%= link_to 'ログアウト', destroy_user_session_path, method: :delete, class: 'nav-link' %>
          </li>
        <% else %>
          <li class=""nav-item active"">
            <%= link_to ""アカウント"", new_user_registration_path, class: 'nav-link' %>
          </li>
          <li class=""nav-item active"">
            <%= link_to ""ログイン"", new_user_session_path, class: 'nav-link' %>
          </li>
        <% end %>
      </ul>
    </div>
  </nav>
</header>
```
​
▼ フラッシュ用の部分テンプレート`_flash_messages.html.erb`を作成

```erb:app/views/shared/_flash_messages.html.erb
<% flash.each do |name, msg| %>
  <div class=""alert alert-<%= name %>"" role=""alert"" id=""alert"">
    <a href=""#"" class=""close"" data-dismiss=""alert"">×</a>
    <%= msg %>
  </div>
<% end %>
```
​
▼ フラッシュに色を付ける

```app/assets/stylesheets/application.scss
// ********** 次を追加 **********
// フラッシュ
div.alert-notice {
  @extend .alert-info;
}

div.alert-alert {
  @extend .alert-danger;
}
```
​
サーバーを`再`起動してから，表示内容を確認して下さい。

ログイン関連ページはまだまだ編集すべき点がありますが，本題ではないためここまでとします。以前にQiitaに記事を書きましたので，よろしければ参考にして下さい。

- [Deviseでログイン機能を追加・日本語化・Bootstrap4適用まで](https://qiita.com/take18k_tech/items/a36d77316e32a6696205)

## 3. Rails から Javascript にデータを渡す

### 3.1 準備

`Javascript`のプログラムをあるべき場所に移動

```app/assets/javascripts/graphs.js
document.addEventListener('turbolinks:load', () => {
// ここに， 「app/views/graphs/index.html.erb」の「script」タグ内をここに移動
// <script></script>をいれないこと！
})
```

`document.addEventListener 〜`の中に入れなければ，グラフなどが表示されません。これは読み込み順の問題です。実行するJavascriptは `turbolinks` のロード後に実行させる必要があります

▼ Rails のコントローラから Javascript にデータを渡してみよう

```erb:app/views/graphs/index.html.erb
<!-- 最初に追加 -->
<%= Gon::Base.render_data %>

<!-- 中略 -->

<!-- ********** 以下を全て削除 ********** -->
<script>
  // 中略
```

- Javascriptにデータを渡すときは「`gon.`」 を付けた変数名とする
  - データがHTMLのソースコードに埋め込まれます

```app/controllers/graphs_controller.rb
  def index
    # ********** 以下を追加 **********
    gon.chart_label = ['1/1', '1/2', '1/4', '1/5', '1/6', '1/7']
    # null を nil にしないといけないので注意！
    gon.chart_data = [60.3, 61.1, 60.8, nil, 60.5, 61.4]
    # ********** 以上を追加 **********
  end
```

- `lineLabel` と `lineData` をコントローラから受け取ったデータに変更

```app/assets/javascripts/graphs.js
document.addEventListener('turbolinks:load', () => {
    // ********** 以下を追加 **********
    // 「折れ線」グラフのデータ
    let lineLabel = gon.chart_label
    let lineData = gon.chart_data

    // 次は削除
    // let lineLabel = ['1/1', '1/2', '1/4', '1/5', '1/6', '1/7']
    // let lineData = [60.3, 61.1, 60.8, null, 60.5, 61.4]
    // ********** 以上を追加 **********
    // 中略
```

グラフが表示されることを確認して下さい。

また，Chromeの「ページのソースを表示」を利用して，データが埋め込まれていることも確認して下さい。

### 3.2 Javascriptに渡すデータを作成

【最初の目標】 データベースに入っている体重データをグラフ化する

▼ 体重などを保存するためのテーブルとモデルを作成

```bash:ターミナル
rails g model Graph date:date weight:float user:references
```

▼ バリデーションを入れる

- 各ユーザーが同じ日付のデータを記録できないようにしておく
  - フロント側にもバリデーションを入れますが，複数タブからの投稿などで簡単にすり抜けることができます。サーバー側のバリデーションは必須です。

```db/migrate/日時_create_graphs.rb
class CreateGraphs < ActiveRecord::Migration[5.2]
  def change
    create_table :graphs do |t|
      t.date :date, null: false
      t.float :weight, null: false
      t.references :user, null: false, foreign_key: true

      t.timestamps
    end
    # 一人のユーザーが同じ日付のデータを複数記録できないようにする
    add_index :graphs, [:user_id, :date], unique: true
  end
end
```

```bash:ターミナル
rails db:migrate
```

▼ モデルの関連付けとバリデーション

```app/models/user.rb
  has_many :graphs, dependent: :destroy
```

```app/models/graph.rb
  belongs_to :user
  # 一人のユーザーが同じ日付のデータを複数記録できないようにする
  validates :date, presence: true, uniqueness: { scope: :user_id }
  validates :weight, presence: true
```

▼ 初期データを投入

- **マジックナンバー**はなるべく避けましょう

- `rails db:seed`を何度実行しても動作するように工夫しておくと，将来初期データが増えたときにコメントアウトをする手間が省けます

```db/seeds.rb
# テストユーザー情報
EMAIL = 'test@example.com'
PASSWORD = 'password'

# データの入力範囲
START_DATE = Date.today - 11.months
END_DATE = Date.today + 1.months

# 1/(NO_RECORD_CONSTANT) の確率でデータを記録しない
# （記録が一部欠けていてもグラフが正常に描けるかをチェックするため）
NO_RECORD_CONSTANT = 5

# 記録する体重の範囲（乱数で値を決める都合上，10倍しておく）
MIN_WEIGHT = 600
MAX_WEIGHT = 620
DIV_CONSTANT = 10

user = User.find_or_create_by!(email: EMAIL) do |user|
  user.password = PASSWORD
  puts 'テストユーザーの初期データインポートに成功しました。'
end

user.graphs.destroy_all

graphs = []
(START_DATE..END_DATE).each do |date|
  # 1/(NO_RECORD_CONSTANT) の確率でデータを入れる操作をスキップ
  next if rand(NO_RECORD_CONSTANT).zero?
  graphs << {
    user_id: user.id,
    date: date,
    # to_f を入れておかないと整数になるので注意！
    weight: rand(MIN_WEIGHT..MAX_WEIGHT).to_f / DIV_CONSTANT
  }
end
Graph.create!(graphs)
puts '体重の初期データ投入に成功しました！'
```

```bash:ターミナル
rails db:seed
```

▼ `Gon`を使ってデータベースから`Javascript`にデータを渡してみよう！

- `@weight_records = Graph.all` ではなく `gon.weight_records = Graph.all`のように 「`gon.`」 を付けた変数名とする

```app/controllers/graphs_controller.rb
  def index
    # 例（代入するデータは後に修正します）
    gon.weight_records = Graph.all
  end
```

- ページのソースに，コントローラから受け取ったデータが埋め込まれていることを確認しましょう。

Google Chrome を使用したデータの取り出し方を確認

- 検証ツールから Console を開く。
- `gon.weight_records`で全てのデータが取り出せる
- `gon.weight_records[0]`で最初のデータが取り出せる
- `gon.weight_records[0].date` で最初のデータの日付が取れる

▼ データベースにある体重データを `Javascript` に渡す

```app/controllers/graphs_controller.rb
  def index
    gon.weight_records = Graph.chart_data(current_user)

    # 次は削除
    # gon.chart_label = ['1/1', '1/2', '1/4', '1/5', '1/6', '1/7']
    # gon.chart_data = [60.3, 61.1, 60.8, nil, 60.5, 61.4]
  end
```

--------

【問題】 データベースにある体重データから，必要な配列を作成するクラスメソッドを作成しよう！

- 元データ例

| id | user_id | date       | weight | created_at                 | updated_at                 |
|----|---------|------------|--------|----------------------------|----------------------------|
| 1  | 1       | 2019-02-24 | 60     | 2020-01-24 05:03:08.265719 | 2020-01-24 05:03:08.265719 |
| 2  | 1       | 2019-02-25 | 62     | 2020-01-24 05:03:08.269441 | 2020-01-24 05:03:08.269441 |
| 3  | 1       | 2019-02-26 | 60.5   | 2020-01-24 05:03:08.271798 | 2020-01-24 05:03:08.271798 |
| 4  | 1       | 2019-02-28 | 60.7   | 2020-01-24 05:03:08.274203 | 2020-01-24 05:03:08.274203 |

- `Graph.chart_data(User.first)`で出力される配列（読みやすい形式に修正しております）

```
[
  { date: Sun, 24 Feb 2019, weight: 60.0 },
  { date: Mon, 25 Feb 2019, weight: 62.0 },
  { date: Tue, 26 Feb 2019, weight: 60.5 },
  { date: Wed, 27 Feb 2019, weight: nil },
  { date: Thu, 28 Feb 2019, weight: 60.7 }
]
```

- （参考）Javascriptに渡される配列

```
[
  {date: ""2019-02-24"", weight: 60},
  {date: ""2019-02-25"", weight: 62},
  {date: ""2019-02-26"", weight: 60.5},
  {date: ""2019-02-27"", weight: null},
  {date: ""2019-02-28"", weight: 60.7}
]
```

▼ ポイント

- 日付と体重をハッシュ形式にした配列データを作成する
  - 日付と体重データを最初から分離すると，期間限定ボタンなどを作成する際に不便
- 他人のデータを含まないようにする
- 日付と体重以外のデータを含まないようにする
- 日付の連続したデータとする
  - 必ずしも毎日体重を記録しているとは限らない。データが無い場合の体重は `nil` とする
- 記録が全く存在しないときは，後に`Javascript`側でエラーが出ないように次の形式で出力することとする

```
[
  {date: 本日の日付, weight: nil}
]
```
--------

【解答例】

```app/models/graph.rb
class Graph < ApplicationRecord
  belongs_to :user
  # 一人のユーザーが同じ日付のデータを複数記録できないようにする
  validates :date, presence: true, uniqueness: { scope: :user_id }
  validates :weight, presence: true

  # ********** 以下を追加 **********
  # そのままデータを取り出すと，日付が不連続なデータになるため，日付の連続したデータを作成する。
  def self.chart_data(user)
    graphs = user.graphs.order(date: :asc)
    # 記録が無い場合にエラーが出るのを防止
    return [{ date: Date.today, weight: nil }] if graphs.empty?

    period = graphs[0].date..graphs[-1].date
    # 記録の初日から最終日までの配列データを作成
    index = 0
    period.map do |date|
      if graphs[index].date == date
        weight = graphs[index].weight
        index += 1
      end
      # データが存在しない日付の体重は nil とする。
      { date: date, weight: weight }
    end
  end
  # ********** 以上を追加 **********
end
```

- `map`メソッド内にて`find`メソッドを使いますと可読性は高くなりますが，処理速度が大幅に落ちます

-----------------

● データを渡せているかチェック

- ページのソースを表示（コントローラから受け取ったデータが埋め込まれている）

● Chromeの検証ツールを使用してデータの取り出し方を確認

- `gon.weight_records[0]`で初日のデータが取り出せる
- `gon.weight_records[0].date` で初日の日付が取れる

● Javsacript の日付に関する注意点

- 例えば `new Date('2020-01-01')` で `Javascript` の `1/1` の日付データに変換できる。
  - `時差の影響で時間が９時に！`

- `new Date('2020-01-01').setHours(0, 0, 0, 0)`とすれば，`1/1`の`0時`が経過ミリ秒で取得できる

- `new Date(new Date('2020-01-01').setHours(0, 0, 0, 0))`とすれば，`1/1`の`0時`が取得できる

### 3.3 受け取ったデータをグラフに反映

● グラフを描く上で必要な情報

- 横軸（日付）のラベルが入った配列
- 縦軸（体重）のデータが入った配列

▼ グラフを描く場所を決める

- 余計なものは削除しておきます

```erb:app/views/graphs/index.html.erb
<%= Gon::Base.render_data %>
<canvas id=""chart-weight""></canvas>

<!-- 他は全て削除して下さい -->
```

▼ 期間を指定すればグラフが描ける関数を作成（元の中身は全て削除して下さい）

```app/assets/javascripts/graphs.js
document.addEventListener('turbolinks:load', () => {
    // '2020-01-12'のような文字列から，Javascriptの日付オブジェクトを取得する関数
    // setHoursを使用しないと，時差の影響で0時にならないため注意！
    const convertDate = (date) => new Date(new Date(date).setHours(0, 0, 0, 0))

    const TODAY = convertDate(new Date())
    const A_WEEK_AGO = new Date(TODAY.getFullYear(), TODAY.getMonth(), TODAY.getDate() - 6)
    const TWO_WEEKS_AGO = new Date(TODAY.getFullYear(), TODAY.getMonth(), TODAY.getDate() - 13)
    const A_MONTH_AGO = new Date(TODAY.getFullYear(), TODAY.getMonth() - 1, TODAY.getDate() + 1)
    const THREE_MONTHS_AGO = new Date(TODAY.getFullYear(), TODAY.getMonth() - 3, TODAY.getDate() + 1)

    // グラフを描く場所を取得
    const chartWeightContext = document.getElementById(""chart-weight"").getContext('2d')

    // 期間を指定してグラフを描く
    const drawGraph = (from, to) => {
        // from から to までの期間のデータに絞る
        let records = gon.weight_records.filter((record) => {
            let date = convertDate(record.date)
            return from <= date && date <= to
        })

        // 日付のみのデータを作成
        let dates = records.map((record) => {
            // 横軸のラベル表示は簡潔にしたいので，
            // 日付 2020-01-08 を 1/8 のような形式に変換する
            return record.date.replace(/^\d+-0*(\d+)-0*(\d+)$/, '$1/$2')
        })

        // 体重のみのデータを作成
        let weights = records.map((record) => record.weight)

        let weightData = {
            labels: dates,
            datasets: [{
                label: '体重(kg)',
                data: weights,
                backgroundColor: 'rgba(255, 99, 132, 0.2)',
                borderColor: 'rgba(255, 99, 132, 1)',
                borderWidth: 1,
                spanGaps: true
            }]
        }

        let weightOption = {
            tooltips: {
                callbacks: {
                    // ホバー（スマホならタップ）時のラベル表示を変更
                    title: function (tooltipItems) {
                        return tooltipItems[0].xLabel.replace(/^(\d+).(\d+)$/, ' $1 月 $2 日')
                    },
                    label: function (tooltipItem) {
                        return '体重: ' + tooltipItem.yLabel + 'kg'
                    }
                }
            }
        }

        new Chart(chartWeightContext, {
            type: 'line',
            data: weightData,
            options: weightOption
        })
    }

    // グラフの初期表示
    drawGraph(A_WEEK_AGO, TODAY)
})
```

- これで，過去１週間のグラフが表示されるようになります！
  - `drawGraph(A_WEEK_AGO, TODAY)`の部分を，例えば`drawGraph(TWO_WEEKS_AGO, TODAY)`に変更してリロードしますと，過去2週間のグラフが表示されます

## 4. 期間指定ボタンを作成

### 4.1 drawGraph関数の修正

▼ 現状ではグラフ更新に対応できない

【注】drawGraph関数を呼び出すたびに`new Chart`でグラフオブジェクトを作成すると，表示がおかしくなる！

```app/assets/javascripts/graphs.js
  // 中略
    // グラフを描く場所を取得
    const chartWeightContext = document.getElementById(""chart-weight"").getContext('2d')
    // ********** drawGraph関数より上に，以下を追加 **********
    // 関数内で変数宣言をするとローカル変数となり，関数の外で消えてしまう
    // drawGraph 関数の外で変数宣言をしなければならない!
    let chartWeight
    // ********** 以上を追加 **********

    // 期間を指定してグラフを描く
    const drawGraph = (from, to) => {
        // 中略

        // ********** new Chart() の部分を次に置き換える **********
        // 次の部分は削除
        // new Chart(chartWeightContext, {
        //     type: 'line',
        //     data: weightData,
        //     options: weightOption
        // })

        if (!chartWeight) {
            // グラフが存在しないときは，作成する
            chartWeight = new Chart(chartWeightContext, {
                type: 'line',
                data: weightData,
                options: weightOption
            })
        } else {
            // グラフが存在するときは，更新する
            chartWeight.data = weightData
            chartWeight.options = weightOption
            chartWeight.update()
        }
        // ********** 以上を編集 **********
    }
  // 中略
```

### 4.2 過去◯週間ボタンを作成

- ボタンを横並びさせるため，Bootstrapのグリッドシステムを利用
  - レスポンシブ対応（横幅が短いときはボタンを 2×2 で表示）

▼ Bootstrap のグリッドシステム

- [公式(日本語訳)](https://getbootstrap.jp/docs/4.4/layout/grid/)

▼ ボタンを追加

```erb:app/views/graphs/index.html.erb
<%= Gon::Base.render_data %>
<!-- ********** 以下を追加 ********** -->
<div class=""row"">
  <div class=""col-6 col-sm-3"">
    <input type=""button"" value=""過去１週間"" id=""a-week-button"" class=""btn btn-success btn-block mt-3"">
  </div>
  <div class=""col-6 col-sm-3"">
    <input type=""button"" value=""過去２週間"" id=""two-weeks-button"" class=""btn btn-success btn-block mt-3"">
  </div>
  <div class=""col-6 col-sm-3"">
    <input type=""button"" value=""過去１ヶ月"" id=""a-month-button"" class=""btn btn-success btn-block mt-3"">
  </div>
  <div class=""col-6 col-sm-3"">
    <input type=""button"" value=""過去３ヶ月"" id=""three-months-button"" class=""btn btn-success btn-block mt-3"">
  </div>
</div>
<!-- ********** 以上を追加 ********** -->
<!-- ********** 次にクラスを追加 ********** -->
<canvas id=""chart-weight"" class=""mt-5""></canvas>
```

▼ 日付を選択したときにグラフを変化させる（処理をまとめる関数を作成して共通化）

```app/assets/javascripts/graphs.js
document.addEventListener('turbolinks:load', () => {
    // ********** 一番上の方に，以下を追加 **********
    // 日付の古い方・新しい方を取得する関数
    const minDate = (date1, date2) => (date1 < date2) ? date1 : date2
    const maxDate = (date1, date2) => (date1 > date2) ? date1 : date2

    // データの初日・最終日
    const START_DATE = convertDate(gon.weight_records[0].date)
    const END_DATE = convertDate(gon.weight_records[gon.weight_records.length - 1].date)
    // ********** 以上を追加 **********

    // 略

    // ********** drawGraph関数の下に，以下を追加 **********
    // 引数の日付から今日までのグラフを描く関数
    const drawGraphToToday = (from) => {
        // データが存在する範囲に修正
        from = maxDate(from, START_DATE)
        let to = minDate(TODAY, END_DATE)
        drawGraph(from, to)
    }

    // 過去◯週間のグラフを描くボタン
    document.getElementById('a-week-button').addEventListener('click', () => {
        drawGraphToToday(A_WEEK_AGO)
    })

    document.getElementById('two-weeks-button').addEventListener('click', () => {
        drawGraphToToday(TWO_WEEKS_AGO)
    })

    document.getElementById('a-month-button').addEventListener('click', () => {
        drawGraphToToday(A_MONTH_AGO)
    })

    document.getElementById('three-months-button').addEventListener('click', () => {
        drawGraphToToday(THREE_MONTHS_AGO)
    })
    // ********** 以上を追加 **********

    // グラフの初期表示
    // ********** drawGraph(A_WEEK_AGO, TODAY) を次に置き換える **********
    // drawGraph(A_WEEK_AGO, TODAY) を削除
    drawGraphToToday(A_WEEK_AGO)
    // ********** 以上を編集 **********
```

リロードして確認して下さい。ボタンを押すたびにグラフが変化するようになりました！

### 4.3 期間指定ボタンを作成

▼ Bootstrapのフォーム

- [とほほのBootstrap 4入門（フォーム）](http://www.tohoho-web.com/bootstrap/forms.html)
- フォームの左側にラベルを付ける方法は「インプットグループ」の項目を参照下さい

▼ 開始日・終了日のカレンダーを作成

```erb:app/views/graphs/index.html.erb
<%= Gon::Base.render_data %>
<!-- ********** 以下を追加 ********** -->
<div class=""row no-gutters"">
  <div class=""input-group col-sm-6 pr-sm-3 mt-3"">
    <div class=""input-group-prepend"">
      <span class=""input-group-text"">開始</span>
    </div>
    <input type=""text"" id=""start-calendar"" class=""form-control bg-white text-center"">
  </div>
  <div class=""input-group col-sm-6 pl-sm-3 mt-3"">
    <div class=""input-group-prepend"">
      <span class=""input-group-text"">終了</span>
    </div>
    <input type=""text"" id=""end-calendar"" class=""form-control bg-white text-center"">
  </div>
</div>
<!-- ********** 以上を追加 ********** -->
<!-- 略 -->
```

▼ カレンダーに`flatpickr`を適用

```app/assets/javascripts/graphs.js
document.addEventListener('turbolinks:load', () => {
    // 略
    const END_DATE = convertDate(gon.weight_records[gon.weight_records.length - 1].date)
    // ********** 以下を追加 **********
    // カレンダーの日本語化
    flatpickr.localize(flatpickr.l10ns.ja)

    const periodCalendarOption = {
        // スマートフォンでもカレンダーに「flatpickr」を使用
        disableMobile: true,
        // 選択できる期間を設定
        minDate: START_DATE,
        maxDate: END_DATE,
        // 日付選択後のイベント
        // onChange: （後で記述）
    }

    // カレンダー
    const startCalendarFlatpickr = flatpickr('#start-calendar', periodCalendarOption)
    const endCalendarFlatpickr = flatpickr('#end-calendar', periodCalendarOption)
    // ********** 以上を追加 **********

    // 中略
}
```

▼ 開始日・終了日を変更したとき，グラフが更新されるように設定

```app/assets/javascripts/graphs.js
    // 中略
    // ********** 以下を追加 **********
    const drawGraphForPeriod = () => {
        let from = convertDate(document.getElementById('start-calendar').value)
        let to = convertDate(document.getElementById('end-calendar').value)

        if (from > to) {
            alert('終了日は開始日以降の日付に設定して下さい')
        } else {
            drawGraph(from, to)
        }
    }
    // ********** 以上を追加 **********

    const periodCalendarOption = {
        disableMobile: true,
        minDate: START_DATE,
        maxDate: END_DATE,
        // ********** 以下を編集 **********
        // 日付選択後のイベント
        onChange: drawGraphForPeriod
        // ********** 以上を編集 **********
    }
    // 略
```

▼ 過去◯週間のボタンを押した時に，日付が自動入力されるようにする

```app/assets/javascripts/graphs.js
    // 引数の日付から今日までのグラフを描く関数
    const drawGraphToToday = (from) => {
        // データが存在する範囲に修正
        from = maxDate(from, START_DATE)
        let to = minDate(TODAY, END_DATE)
        drawGraph(from, to)
        // ********** 以下を追加 **********
            // フォームの開始日・終了日を変更する
            startCalendarFlatpickr.setDate(from)
            endCalendarFlatpickr.setDate(to)
        // ********** 以上を追加 **********
    }
```

リロードして確認して下さい。日付を変更するたびにグラフが変化するようになります！

## 5. 新規登録・編集・削除機能

データさえあればグラフを表示できるようになりましたので，最後に体重データを投稿できるようにしましょう。

一般的なCRUDアプリでは，「投稿用のページに移動させて戻ってくる」という手順を踏みますが，この記事では`モーダル`を利用してフォームを表示させることにしましょう。

### 5.1 ルーティング

```config/routes.rb
Rails.application.routes.draw do
  devise_for :users
  root 'graphs#index'
  # ********** 以下を追加 **********
  # resource「s」ではない！（updateに「:id」は不要だから）
  resource :graphs, only: %i[index create update]
  # ********** 以上を追加 **********
end
```

```app/controllers/graphs_controller.rb
class GraphsController < ApplicationController
  def index
    gon.weight_records = Graph.chart_data(current_user)
  end

  def create

  end

  def update

  end

end
```

### 5.2 新規登録モーダルの作成

```erb:app/views/graphs/index.html.erb
<%= Gon::Base.render_data %>
<!-- ********** 以下を追加 ********** -->
<div class=""row"">
  <div class=""col-6"">
    <button type=""button"" class=""btn btn-info btn-block"" data-toggle=""modal"" data-target=""#new-modal"">
      新規登録
    </button>
  </div>
  <div class=""col-6"">
    <button type=""button"" class=""btn btn-info btn-block"" data-toggle=""modal"" data-target=""#edit-modal"">
      記録の修正
    </button>
  </div>
</div>
<!-- ********** 以上を追加 ********** -->

<!-- 中略 -->
<!-- ********** 一番最後に追加 ********** -->
<%= render 'modal', action: 'new', title: '新規登録' %>
```


```erb:app/views/graphs/_modal.html.erb
<div class=""modal fade"" id=""<%= action %>-modal"" data-backdrop=""static"" tabindex=""-1"" role=""dialog"" aria-hidden=""true"">
  <div class=""modal-dialog modal-dialog-centered modal-sm"" role=""document"">
    <div class=""modal-content"">
      <div class=""modal-header"">
        <h5 class=""modal-title""><%= title %></h5>
        <button type=""button"" class=""close"" data-dismiss=""modal"" aria-label=""Close"">
          <span aria-hidden=""true"">&times;</span>
        </button>
      </div>
      <div class=""modal-body"">
        <%= render ""#{action}_modal_content"" %>
      </div>
    </div>
  </div>
</div>
```

▼ 新規登録フォームの部分テンプレートを作成

```erb:app/views/graphs/_new_modal_content.html.erb
<%= form_with model: Graph.new do |form| %>
  <div class=""input-group"">
    <div class=""input-group-prepend"">
      <span class=""input-group-text"">日付</span>
    </div>
    <%= form.text_field :date, class: 'form-control bg-white', id: ""new-calendar"" %>
  </div>
  <small>記録が存在する日付は選択できません</small>
  <div class=""input-group mt-3"">
    <div class=""input-group-prepend"">
      <span class=""input-group-text"">体重</span>
    </div>
    <%= form.number_field :weight, class: 'form-control', id: ""new-weight"", in: 10.0..200.0, step: '0.1', required: true %>
    <div class=""ml-2 my-auto"">kg</div>
  </div>
  <small>小数第1位まで記録できます</small>
  <div class=""form-group mt-3"">
    <%= form.submit '新規登録', class: 'btn btn-primary btn-block', id: 'new-button' %>
  </div>
<% end %>
```

▼ モーダル内のカレンダーで`flatpickr`を使用できるようにする

```app/assets/javascripts/graphs.js
    // ********** 他のカレンダーの下に追加 **********
    // 新規登録用のカレンダー
    flatpickr('#new-calendar', {
        disableMobile: true,
        // 記録のある日付を選択できないようにする
        disable: gon.recorded_dates,
        defaultDate: 'today',
    })
```

▼ データベースに保存できるようにする

```app/controllers/graphs_controller.rb
class GraphsController < ApplicationController
  def index
    gon.weight_records = Graph.chart_data(current_user)
  # ********** 以下を追加 **********
    # 記録済みの日付データ
    gon.recorded_dates = current_user.graphs.map(&:date)
  # ********** 以上を追加 **********
  end

  def create
  # ********** 以下を追加 **********
    @graph = current_user.graphs.build(graph_params)
    date = @graph.date.strftime('%Y/%-m/%-d')
    if @graph.save
      flash[:notice] = ""#{date}の記録を追加しました""
    else
      flash[:alert] = 'エラーが発生しました'
    end
    redirect_to root_path
  # ********** 以上を追加 **********
  end

  def update

  end
  # ********** 以下を追加 **********
  private

  def graph_params
    params.require(:graph).permit(:date, :weight)
  end
  # ********** 以上を追加 **********
end
```

▼ モーダルの×ボタンをクリックした時の青枠を消去

```app/assets/stylesheets/application.scss
// モーダル

button.close {
  overflow : hidden;
  outline : none;
}
```

### 5.3 編集・削除モーダルの作成

▼ 編集フォームの部分テンプレートを作成

```erb:app/views/graphs/index.html.erb
<!-- 略 -->
<%= render 'modal', action: 'new', title: '新規登録' %>
<%= render 'modal', action: 'edit', title: '修正' %>
```

- 「削除」ボタンに `name` 属性を入れておきます

```erb:app/views/graphs/_edit_modal_content.html.erb
<%= form_with model: Graph.new, method: :patch do |form| %>
  <div class=""input-group"">
    <div class=""input-group-prepend"">
      <span class=""input-group-text"">日付</span>
    </div>
    <%= form.text_field :date, class: 'form-control bg-white', id: ""edit-calendar"" %>
  </div>
  <small>記録が存在しない日付は選択できません</small>
  <div class=""input-group mt-3"">
    <div class=""input-group-prepend"">
      <span class=""input-group-text"">体重</span>
    </div>
    <%= form.number_field :weight, class: 'form-control', id: ""edit-weight"", in: 10.0..200.0, step: '0.1', required: true %>
    <div class=""ml-2 my-auto"">kg</div>
  </div>
  <small>小数第1位まで記録できます</small>
  <div class=""form-group mt-3"">
    <%= form.submit '修正', class: 'btn btn-primary btn-block mb-4', id: 'edit-button' %>
    <%= form.submit '削除', name: '_destroy', class: 'btn btn-danger btn-block', id: 'destroy-button', data: { confirm: ""本当に記録を削除しますか？"" } %>
  </div>
<% end %>
```

```app/assets/javascripts/graphs.js

    // 編集モーダルで日付を選択したときに，記録された体重を表示する関数
    const editCalendar = document.getElementById('edit-calendar')
    const editWeight = document.getElementById('edit-weight')
    const inputWeight = () => {
        let record = gon.weight_records.find((record) => record.date === editCalendar.value)
        editWeight.value = record.weight
    }

    // 記録編集用のカレンダー
    flatpickr('#edit-calendar', {
        disableMobile: true,
        // 記録のある日付のみ選択できるようにする
        enable: gon.recorded_dates,
        // 記録が無い場合は日付を選択できないようにする
        noCalendar: gon.recorded_dates.length === 0,
        onChange: inputWeight
    })
```

- 削除ボタンに `name` 属性を入れたので，削除ボタンを押したときだけ `params[:_destroy]` が存在する状態となる
  - これで「修正ボタン」と「削除ボタン」のどちらを押したかが判定できます

```app/controllers/graphs_controller.rb
  def update
    # ********** 以下を追加 **********
    @graph = current_user.graphs.find_by(date: params[:graph][:date])
    date = @graph.date.strftime('%Y/%-m/%-d')
    if @graph.nil?
      flash[:alert] = 'エラーが発生しました'
    elsif params[:_destroy].nil? && @graph.update(graph_params)
      flash[:notice] = ""#{date}の記録を修正しました。""
    elsif params[:_destroy].present? && @graph.destroy
      flash[:alert] = ""#{date}の記録を削除しました。""
    else
      flash[:alert] = 'エラーが発生しました'
    end
    redirect_to root_path
    # ********** 以上を追加 **********
  end
```

- Javascriptが他のページで動作しないようにする（検証ツールでエラーが発生するのを防ぐ）

```app/assets/javascripts/graphs.js
document.addEventListener('turbolinks:load', () => {
    // ********** 以下を追加 **********
    if (document.getElementById('start-calendar')) {
        // 全てを囲む
    }
    // ********** 以上を追加 **********
})
```

## 6. Herokuへデプロイする場合の注意点

▼ Rails5のアプリでES6の構文を使用し，Herokuにデプロイされる場合は次の操作が必要です

```config/environments/production.rb
  # 次の一行を置き換える
  # config.assets.js_compressor = :uglifier
  config.assets.js_compressor = Uglifier.new(harmony: true)
```

## 7. 最後に

機能を追加したり，修正して自分なりのアプリにしてみて下さい！

- データの種類を変更してみる
  - （例）体重ではなく，学習時間にしてみる

- いろいろなグラフ表示に挑戦してみる
  - 棒グラフ
  - 円グラフ
  - レーダーチャート
  - 複数のグラフの掛け合わせ

- 肉付けしてみる
  - 検索機能を追加する
  -  CSVインポート・エクスポート機能を付ける
  - フォーム送信をAjaxで実現（ページを更新せずに体重データを更新）

- 【参考URL】
  - [Chart.js 公式](https://www.chartjs.org/)
  - [Chart.js 日本語化ドキュメント（非公式）](https://misc.0o0o.org/chartjs-doc-ja/)
  - [グラフのサンプル（公式）](https://www.chartjs.org/samples/latest/)
  - [グラフのサンプルコード（公式）](https://github.com/chartjs/Chart.js/tree/master/samples)

## 8. Rails 6の環境構築

`Rails 6` から `Webpacker` が標準導入されたため，`Javascript` 関連の環境構築方法が `Rails 5` と大きく異なります。

また， `Javascript` のディレクトリの場所も異なります。

- 【Rails 5】 app/assets/javascripts
- 【Rails 6】 app/javascript/packs

### 8.1 アプリの作成

```bash:ターミナル
# データベースにPostgreSQLを使用される場合
rails new weight_management_app -d postgresql -T --skip-coffee
# データベースにMySQLを使用される場合
rails new weight_management_app -d mysql -T --skip-coffee
```


```bash:ターミナル
# 「weight_management_app」のディレクトリに移動し忘れないように！
cd weight_management_app
```

```bash:Gemfile
# 中略
gem 'bootsnap', '>= 1.1.0', require: false
​
# ***** 以下を追加 *****
# ログイン機能
gem 'devise'

# 日本語化
gem 'rails-i18n', '~> 6.0'
gem 'devise-i18n'

# ログイン関連ページにBootstrapを適用するGem
gem 'devise-bootstrap-views', '~> 1.0'

# Gon（コントローラから Javascript に変数を渡せるようにする）
gem 'gon'
# ***** 以上を追加 *****
​
# 中略
​
group :development do
  # 中略
  # ***** 以下を追加 *****
  # デバッグで利用
  gem 'pry-byebug'
  # ***** 以上を追加 *****
end
```
​
▼ gem を追加したので`bundle install`を実行した上でデータベースを作成

```bash:ターミナル
bundle install
rails db:create
```
​
▼ 念のためこの時点で，`rails s`でサーバーを起動し，`http://localhost:3000/`に接続して「Yay! You’re on Rails!」が出るか確認して下さい
​
### 8.2 トップページの作成​

```bash:ターミナル
rails g controller graphs index
```

```config/routes.rb
Rails.application.routes.draw do
# get 'graphs/index' は削除
# ***** 以下を追加 *****
  root 'graphs#index'
# ***** 以上を追加 *****
end
```

```erb:app/views/layouts/application.html.erb
<!DOCTYPE html>
<html>
  <head>
  <!-- ***** タイトルを変更 ***** -->
    <title>体重管理アプリ</title>
  <!-- ***** 以上を編集 ***** -->
    <%= csrf_meta_tags %>
    <%= csp_meta_tag %>
​
  <!-- ***** 以下を追加 ***** -->
  <!-- 表示をスマートフォンに対応させる -->
  <meta name=""viewport"" content=""width=device-width,initial-scale=1"">
  <!-- ***** 以上を追加 ***** -->
​
    <%= stylesheet_link_tag    'application', media: 'all', 'data-turbolinks-track': 'reload' %>
    <%= javascript_include_tag 'application', 'data-turbolinks-track': 'reload' %>
  </head>
​
  <body>
  <!-- ***** 本文を編集 ***** -->
  <!-- 全ページの横幅に上限を設ける（cssは後に追加） -->
    <div class=""graph-container"">
    <%= yield %>
    </div>
  <!-- ***** 以上を編集 ***** -->
  </body>
​
</html>
```
​
### 8.3 各種ライブラリの導入

```bash:ターミナル
yarn add bootstrap jquery popper.js flatpickr chart.js
```

- `environment.js`を次に置き換える

```config/webpack/environment.js
const { environment } = require('@rails/webpacker')

const webpack = require('webpack')
environment.plugins.append('Provide', new webpack.ProvidePlugin({
    $: 'jquery',
    jQuery: 'jquery',
    Popper: ['popper.js', 'default']
}))

module.exports = environment
```

- `application.js`の一番下に次を追加

```app/javascript/packs/application.js
// Bootstrap
require(""bootstrap/dist/js/bootstrap"")

// Chart.js
require('chart.js')

// カレンダー
require('flatpickr')
require('flatpickr/dist/l10n/ja')
// カレンダーの色を変更
require(""flatpickr/dist/themes/material_blue.css"")
```

【注】`app/assets/stylesheets/application.css`の拡張子`css`を`scss`に変更

```app/assets/stylesheets/application.scss
/*
 *= require flatpickr
 *= require_tree .
 *= require_self
 */

@import ""bootstrap/scss/bootstrap"";

// 全体
.graph-container {
  @extend .container-fluid;
  max-width: 768px;
  padding: 1rem;
}
```

「1.5 各種ライブラリの動作確認」で動作確認を行って下さい

# 9. 最終的なコード(Rails 5)

## Gemfile

```rb:Gemfile
source 'https://rubygems.org'
git_source(:github) { |repo| ""https://github.com/#{repo}.git"" }

ruby '2.6.5'

gem 'rails', '~> 5.2.4'
gem 'pg', '>= 0.18', '< 2.0'
gem 'puma', '~> 3.11'
gem 'sass-rails', '~> 5.0'
gem 'uglifier', '>= 1.3.0'
gem 'turbolinks', '~> 5'
gem 'jbuilder', '~> 2.5'
gem 'bootsnap', '>= 1.1.0', require: false

# ログイン機能
gem 'devise'

# 日本語化
gem 'rails-i18n', '~> 5.1'
gem 'devise-i18n'

# Bootstrap（簡単に見た目を整えられる）
gem 'bootstrap', '~> 4.4.1'
gem 'jquery-rails'
# ログイン関連ページにBootstrapを適用するGem
gem 'devise-bootstrap-views', '~> 1.0'

# Chart.js（グラフ表示）
gem 'chart-js-rails'
# flatpickr（カレンダー）
gem 'flatpickr'
# Gon（コントローラから Javascript に変数を渡せるようにする）
gem 'gon'

group :development, :test do
  gem 'byebug', platforms: [:mri, :mingw, :x64_mingw]
end

group :development do
  gem 'web-console', '>= 3.3.0'
  gem 'listen', '>= 3.0.5', '< 3.2'
  gem 'spring'
  gem 'spring-watcher-listen', '~> 2.0.0'
  gem 'pry-byebug'
end
```

## Javascript

```app/assets/javascripts/application.js
//= require rails-ujs
//= require activestorage
//= require Chart.min
//= require flatpickr
//= require flatpickr/l10n/ja
//= require jquery3
//= require popper
//= require bootstrap-sprockets
//= require turbolinks
//= require_tree .
```

```app/assets/javascripts/graphs.js
document.addEventListener('turbolinks:load', () => {
    if (document.getElementById('start-calendar')) {
        // '2020-01-12'のような文字列から，Javascriptの日付オブジェクトを取得する関数
        // setHoursを使用しないと，時差の影響で0時にならないため注意！
        const convertDate = (date) => new Date(new Date(date).setHours(0, 0, 0, 0))

        // 日付の古い方・新しい方を取得する関数
        const minDate = (date1, date2) => (date1 < date2) ? date1 : date2
        const maxDate = (date1, date2) => (date1 > date2) ? date1 : date2

        // データの初日・最終日
        const START_DATE = convertDate(gon.weight_records[0].date)
        const END_DATE = convertDate(gon.weight_records[gon.weight_records.length - 1].date)

        // カレンダーの日本語化
        flatpickr.localize(flatpickr.l10ns.ja)

        const drawGraphForPeriod = () => {
            let from = convertDate(document.getElementById('start-calendar').value)
            let to = convertDate(document.getElementById('end-calendar').value)

            if (from > to) {
                alert('終了日は開始日以降の日付に設定して下さい')
            } else {
                drawGraph(from, to)
            }
        }

        const periodCalendarOption = {
            // スマートフォンでもカレンダーに「flatpickr」を使用
            disableMobile: true,
            // 選択できる期間を設定
            minDate: START_DATE,
            maxDate: END_DATE,
            // 日付選択後のイベント
            onChange: drawGraphForPeriod
        }

        // カレンダー
        const startCalendarFlatpickr = flatpickr('#start-calendar', periodCalendarOption)
        const endCalendarFlatpickr = flatpickr('#end-calendar', periodCalendarOption)

        // 新規登録用のカレンダー
        flatpickr('#new-calendar', {
            disableMobile: true,
            // 記録のある日付を選択できないようにする
            disable: gon.recorded_dates,
            defaultDate: 'today',
        })

        // 編集モーダルで日付を選択したときに，記録された体重を表示する関数
        const editCalendar = document.getElementById('edit-calendar')
        const editWeight = document.getElementById('edit-weight')
        const inputWeight = () => {
            let record = gon.weight_records.find((record) => record.date === editCalendar.value)
            editWeight.value = record.weight
        }

        // 記録編集用のカレンダー
        flatpickr('#edit-calendar', {
            disableMobile: true,
            // 記録のある日付のみ選択できるようにする
            enable: gon.recorded_dates,
            // 記録が無い場合は日付を選択できないようにする
            noCalendar: gon.recorded_dates.length === 0,
            onChange: inputWeight
        })

        const TODAY = convertDate(new Date())
        const A_WEEK_AGO = new Date(TODAY.getFullYear(), TODAY.getMonth(), TODAY.getDate() - 6)
        const TWO_WEEKS_AGO = new Date(TODAY.getFullYear(), TODAY.getMonth(), TODAY.getDate() - 13)
        const A_MONTH_AGO = new Date(TODAY.getFullYear(), TODAY.getMonth() - 1, TODAY.getDate() + 1)
        const THREE_MONTHS_AGO = new Date(TODAY.getFullYear(), TODAY.getMonth() - 3, TODAY.getDate() + 1)

        // グラフを描く場所を取得
        const chartWeightContext = document.getElementById(""chart-weight"").getContext('2d')

        // グラフ（ drawGraph 関数の外で変数宣言をしなければならない!）
        let chartWeight

        // 期間を指定してグラフを描く
        const drawGraph = (from, to) => {
            // from から to までの期間のデータに絞る
            let records = gon.weight_records.filter((record) => {
                let date = convertDate(record.date)
                return from <= date && date <= to
            })

            // 日付のみのデータを作成
            let dates = records.map((record) => {
                // 横軸のラベル表示は簡潔にしたいので，
                // 日付 2020-01-08 を 1/8 のような形式に変換する
                return record.date.replace(/^\d+-0*(\d+)-0*(\d+)$/, '$1/$2')
            })

            // 体重のみのデータを作成
            let weights = records.map((record) => record.weight)

            let weightData = {
                labels: dates,
                datasets: [{
                    label: '体重(kg)',
                    data: weights,
                    backgroundColor: 'rgba(255, 99, 132, 0.2)',
                    borderColor: 'rgba(255, 99, 132, 1)',
                    borderWidth: 1,
                    spanGaps: true
                }]
            }

            let weightOption = {
                tooltips: {
                    callbacks: {
                        // ホバー（スマホならタップ）時のラベル表示を変更
                        title: function (tooltipItems) {
                            return tooltipItems[0].xLabel.replace(/^(\d+).(\d+)$/, ' $1 月 $2 日')
                        },
                        label: function (tooltipItem) {
                            return '体重: ' + tooltipItem.yLabel + 'kg'
                        }
                    }
                }
            }

            if (!chartWeight) {
                // グラフが存在しないときは，作成する
                chartWeight = new Chart(chartWeightContext, {
                    type: 'line',
                    data: weightData,
                    options: weightOption
                })
            } else {
                // グラフが存在するときは，更新する
                chartWeight.data = weightData
                chartWeight.options = weightOption
                chartWeight.update()
            }
        }

        // 引数の日付から今日までのグラフを描く関数
        const drawGraphToToday = (from) => {
            // データが存在する範囲に修正
            from = maxDate(from, START_DATE)
            let to = minDate(TODAY, END_DATE)
            drawGraph(from, to)
            // フォームの開始日・終了日を変更する
            startCalendarFlatpickr.setDate(from)
            endCalendarFlatpickr.setDate(to)
        }

        // 過去◯週間のグラフを描くボタン
        document.getElementById('a-week-button').addEventListener('click', () => {
            drawGraphToToday(A_WEEK_AGO)
        })

        document.getElementById('two-weeks-button').addEventListener('click', () => {
            drawGraphToToday(TWO_WEEKS_AGO)
        })

        document.getElementById('a-month-button').addEventListener('click', () => {
            drawGraphToToday(A_MONTH_AGO)
        })

        document.getElementById('three-months-button').addEventListener('click', () => {
            drawGraphToToday(THREE_MONTHS_AGO)
        })

        // グラフの初期表示
        drawGraphToToday(A_WEEK_AGO)
    }
})
```

## SCSS

```app/assets/stylesheets/application.scss
/* ...
*= require flatpickr
*= require flatpickr/themes/material_blue
 */

@import ""bootstrap"";

// 全体
.graph-container {
  @extend .container-fluid;
  max-width: 768px;
  padding: 1rem;
}

// フラッシュ
div.alert-notice {
  @extend .alert-info;
}

div.alert-alert {
  @extend .alert-danger;
}

// モーダル

button.close {
  overflow : hidden;
  outline : none;
}
```

## ルーティング

```config/routes.rb
Rails.application.routes.draw do
  devise_for :users
  root 'graphs#index'
  # resource「s」ではない！（updateに「:id」は不要だから）
  resource :graphs, only: %i[index create update]
end
```

## コントローラ

```app/controllers/application_controller.rb
class ApplicationController < ActionController::Base
  # 全ページをログイン必須とする
  before_action :authenticate_user!
end
```

```app/controllers/graphs_controller.rb
class GraphsController < ApplicationController
  def index
    gon.weight_records = Graph.chart_data(current_user)
    # 記録済みの日付データ
    gon.recorded_dates = current_user.graphs.map(&:date)
  end

  def create
    @graph = current_user.graphs.build(graph_params)
    date = @graph.date.strftime('%Y/%-m/%-d')
    if @graph.save
      flash[:notice] = ""#{date}の記録を追加しました""
    else
      flash[:alert] = 'エラーが発生しました'
    end
    redirect_to root_path
  end

  def update
    @graph = current_user.graphs.find_by(date: params[:graph][:date])
    date = @graph.date.strftime('%Y/%-m/%-d')
    if @graph.nil?
      flash[:alert] = 'エラーが発生しました'
    elsif params[:_destroy].nil? && @graph.update(graph_params)
      flash[:notice] = ""#{date}の記録を修正しました。""
    elsif params[:_destroy].present? && @graph.destroy
      flash[:alert] = ""#{date}の記録を削除しました。""
    else
      flash[:alert] = 'エラーが発生しました'
    end
    redirect_to root_path
  end

  private

  def graph_params
    params.require(:graph).permit(:date, :weight)
  end

end
```

## モデル

```app/models/graph.rb
class Graph < ApplicationRecord
  belongs_to :user
  # 一人のユーザーが同じ日付のデータを複数記録できないようにする
  validates :date, presence: true, uniqueness: { scope: :user_id }
  validates :weight, presence: true

  # そのままデータを取り出すと，日付が不連続なデータになるため，日付の連続したデータを作成する。
  def self.chart_data(user)
    graphs = user.graphs.order(date: :asc)
    # 記録が無い場合にエラーが出るのを防止
    return [{ date: Date.today, weight: nil }] if graphs.empty?

    period = graphs[0].date..graphs[-1].date
    # 記録の初日から最終日までの配列データを作成
    index = 0
    period.map do |date|
      if graphs[index].date == date
        weight = graphs[index].weight
        index += 1
      end
      # データが存在しない日付の体重は nil とする。
      { date: date, weight: weight }
    end
  end
end
```

```app/models/user.rb
class User < ApplicationRecord
  # Include default devise modules. Others available are:
  # :confirmable, :lockable, :timeoutable, :trackable and :omniauthable
  devise :database_authenticatable, :registerable,
         :recoverable, :rememberable, :validatable

  has_many :graphs, dependent: :destroy
end
```

## ビュー

```erb:app/views/layouts/application.html.erb
<!DOCTYPE html>
<html>
  <head>
    <title>体重管理アプリ</title>
    <%= csrf_meta_tags %>
    <%= csp_meta_tag %>
    <meta name=""viewport"" content=""width=device-width,initial-scale=1"">
    <%= stylesheet_link_tag    'application', media: 'all', 'data-turbolinks-track': 'reload' %>
    <%= javascript_include_tag 'application', 'data-turbolinks-track': 'reload' %>
  </head>

  <body>
  <!-- 全ページにナビバーを追加 -->
  <%= render 'shared/header' %>
  <!-- ログイン関連ページ以外にフラッシュ表示部分を追加 -->
  <% if controller_name == 'graphs' %>
    <%= render 'shared/flash_messages' %>
  <% end %>
  <div class=""graph-container"">
    <%= yield %>
  </div>
  </body>
</html>
```

```erb:app/views/shared/_header.html.erb
<header class=""sticky-top"">
  <nav class=""navbar navbar-expand-sm navbar-dark bg-dark"">
    <%= link_to ""体重管理アプリ"", root_path, class: 'navbar-brand' %>
    <button type=""button"" class=""navbar-toggler"" data-toggle=""collapse"" data-target=""#navbarNav"" aria-controls=""navbarNav"" aria-expanded=""false"" aria-label=""ナビゲーションの切替"">
      <span class=""navbar-toggler-icon""></span>
    </button>
    <div class=""collapse navbar-collapse"" id=""navbarNav"">
      <ul class=""navbar-nav"">
        <% if user_signed_in? %>
          <li class=""nav-item active"">
            <%= link_to 'アカウント編集', edit_user_registration_path, class: 'nav-link' %>
          </li>
          <li class=""nav-item active"">
            <%= link_to 'ログアウト', destroy_user_session_path, method: :delete, class: 'nav-link' %>
          </li>
        <% else %>
          <li class=""nav-item active"">
            <%= link_to ""アカウント登録"", new_user_registration_path, class: 'nav-link' %>
          </li>
          <li class=""nav-item active"">
            <%= link_to ""ログイン"", new_user_session_path, class: 'nav-link' %>
          </li>
        <% end %>
      </ul>
    </div>
  </nav>
</header>
```

```erb:app/views/shared/_flash_messages.html.erb
<% flash.each do |name, msg| %>
  <div class=""alert alert-<%= name %>"" role=""alert"" id=""alert"">
    <a href=""#"" class=""close"" data-dismiss=""alert"">×</a>
    <%= msg %>
  </div>
<% end %>
```

```erb:app/views/graphs/_modal.html.erb
<div class=""modal fade"" id=""<%= action %>-modal"" data-backdrop=""static"" tabindex=""-1"" role=""dialog"" aria-hidden=""true"">
  <div class=""modal-dialog modal-dialog-centered modal-sm"" role=""document"">
    <div class=""modal-content"">
      <div class=""modal-header"">
        <h5 class=""modal-title""><%= title %></h5>
        <button type=""button"" class=""close"" data-dismiss=""modal"" aria-label=""Close"">
          <span aria-hidden=""true"">&times;</span>
        </button>
      </div>
      <div class=""modal-body"">
        <%= render ""#{action}_modal_content"" %>
      </div>
    </div>
  </div>
</div>
```

```erb:app/views/graphs/_new_modal_content.html.erb
<%= form_with model: Graph.new do |form| %>
  <div class=""input-group"">
    <div class=""input-group-prepend"">
      <span class=""input-group-text"">日付</span>
    </div>
    <%= form.text_field :date, class: 'form-control bg-white', id: ""new-calendar"" %>
  </div>
  <small>記録が存在する日付は選択できません</small>
  <div class=""input-group mt-3"">
    <div class=""input-group-prepend"">
      <span class=""input-group-text"">体重</span>
    </div>
    <%= form.number_field :weight, class: 'form-control', id: ""new-weight"", in: 10.0..200.0, step: '0.1', required: true %>
    <div class=""ml-2 my-auto"">kg</div>
  </div>
  <small>小数第1位まで記録できます</small>
  <div class=""form-group mt-3"">
    <%= form.submit '新規登録', class: 'btn btn-primary btn-block', id: 'new-button' %>
  </div>
<% end %>
```

```erb:app/views/graphs/_edit_modal_content.html.erb
<%= form_with model: Graph.new, method: :patch do |form| %>
  <div class=""input-group"">
    <div class=""input-group-prepend"">
      <span class=""input-group-text"">日付</span>
    </div>
    <%= form.text_field :date, class: 'form-control bg-white', id: ""edit-calendar"" %>
  </div>
  <small>記録が存在しない日付は選択できません</small>
  <div class=""input-group mt-3"">
    <div class=""input-group-prepend"">
      <span class=""input-group-text"">体重</span>
    </div>
    <%= form.number_field :weight, class: 'form-control', id: ""edit-weight"", in: 10.0..200.0, step: '0.1', required: true %>
    <div class=""ml-2 my-auto"">kg</div>
  </div>
  <small>小数第1位まで記録できます</small>
  <div class=""form-group mt-3"">
    <%= form.submit '修正', class: 'btn btn-primary btn-block mb-4', id: 'edit-button' %>
    <%= form.submit '削除', name: '_destroy', class: 'btn btn-danger btn-block', id: 'destroy-button', data: { confirm: ""本当に記録を削除しますか？"" } %>
  </div>
<% end %>
```

## マイグレーションファイル

```db/migrate/日時_create_graphs.rb
class CreateGraphs < ActiveRecord::Migration[5.2]
  def change
    create_table :graphs do |t|
      t.date :date, null: false
      t.float :weight, null: false
      t.references :user, null: false, foreign_key: true

      t.timestamps
    end
    # 一人のユーザーが同じ日付のデータを複数記録できないようにする
    add_index :graphs, [:user_id, :date], unique: true
  end
end
```

## 他

```config/application.rb
require_relative 'boot'

require ""rails""
# Pick the frameworks you want:
require ""active_model/railtie""
require ""active_job/railtie""
require ""active_record/railtie""
require ""active_storage/engine""
require ""action_controller/railtie""
require ""action_mailer/railtie""
require ""action_view/railtie""
require ""action_cable/engine""
require ""sprockets/railtie""
# require ""rails/test_unit/railtie""

# Require the gems listed in Gemfile, including any gems
# you've limited to :test, :development, or :production.
Bundler.require(*Rails.groups)

module WeightManagementApp
  class Application < Rails::Application
    # Initialize configuration defaults for originally generated Rails version.
    config.load_defaults 5.2

    # 日本語に変更
    config.i18n.default_locale = :ja
    # タイムゾーンも変更
    config.time_zone = 'Asia/Tokyo'

    # Settings in config/environments/* take precedence over those specified here.
    # Application configuration can go into files in config/initializers
    # -- all .rb files in that directory are automatically loaded after loading
    # the framework and any gems in your application.

    # Don't generate system test files.
    config.generators.system_tests = nil
  end
end
```

```db/seeds.rb
# テストユーザー情報
EMAIL = 'test@example.com'
PASSWORD = 'password'

# データの入力範囲
START_DATE = Date.today - 11.months
END_DATE = Date.today + 1.months

# 1/(NO_RECORD_CONSTANT) の確率でデータを記録しない
NO_RECORD_CONSTANT = 5

# 記録する体重の範囲（乱数で値を決める都合上，10倍しておく）
MIN_WEIGHT = 600
MAX_WEIGHT = 620
DIV_CONSTANT = 10

user = User.find_or_create_by!(email: EMAIL) do |user|
  user.password = PASSWORD
  puts 'テストユーザーの初期データインポートに成功しました。'
end

user.graphs.destroy_all

graphs = []
(START_DATE..END_DATE).each do |date|
  # 1/(NO_RECORD_CONSTANT) の確率でデータを入れる操作をスキップ
  next if rand(NO_RECORD_CONSTANT).zero?
  graphs << {
    user_id: user.id,
    date: date,
    # to_f を入れておかないと整数になるので注意！
    weight: rand(MIN_WEIGHT..MAX_WEIGHT).to_f / DIV_CONSTANT
  }
end
Graph.create!(graphs)
puts '体重の初期データ投入に成功しました！'
```"
Other,RailsアプリへのjQueryの導入,"jQueryとは、JavaScriptの記述をより簡潔にするためのライブラリで、これにより動きのあるWebサイトを簡単に作れるようになります。

今回は、そのjQueryをRailsアプリに導入する方法について学んでいきましょう。

# 導入手順
`Gemfile` に以下のjQueryを導入するためのgemを追記します。

```
gem ""jquery-rails""
```

`jQuery` を読み込むため `application.js` に以下の内容を追記します。（上3行はすでに書かれているので追記しないでください）

```js
//= require activestorage
//= require turbolinks
//= require_tree .

// 以下の2行を追加
//= require jquery
//= require jquery_ujs
```

`application.js` を読み込む記述を `/app/views/layouts/application.html.erb` に追記しましょう。

```
<!DOCTYPE html>
<html>
  <head>
    <title>App</title>
    <%= csrf_meta_tags %>
    <%= csp_meta_tag %>

    <meta name=""viewport"" content=""width=device-width, initial-scale=1"">
    <%= stylesheet_link_tag 'application', media: 'all', 'data-turbolinks-track': 'reload' %>

    <!-- 以下を追記 -->
    <%= javascript_include_tag 'application', 'data-turbolinks-track': 'reload' %>
  </head>

  <body>
    <%= yield %>
  </body>
  
</html>
```

HTMLへの追記ができたら、jQueryが導入できているかを確かめましょう。 `id=""hoge""` の `p` タグの文字が赤になっていれば成功です。

```
<h1>Ajax#index</h1>
<p id=""hoge"">赤色になるよ</p>

<script>
  $(""#hoge"").css(""color"",""red"")
</script>
```"
,SQLの基本,"SQLとは、データベースの定義や操作を行うための言語です。
このSQLを使いこなすことによって、データの検索機能を実装できるようになります。

また、データ一覧表示、新規登録、削除、更新などの処理も、このSQLによって行われます。

Ruby on Railsでは、Active Record が自動で最適なSQLを発行してくれるため、特に意識しなくても簡単なアプリなら作成できてしまいます。

しかし、現場ではSQLを直書きすることもあるので、ぜひ、きちんと理解できるようにしておいて下さい。
そうすると、現場での開発もスムーズに進むことが多くなります。

## SQLのダウンロード（Mac）
MySQLは `Homebrew` を使用してダウンロードします。 `Homebrew` をインストールしていない方は、以下のコマンドをターミナルから実行しましょう。

```
/usr/bin/ruby -e ""$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)""
```

`Homebrew` がインストールできたら、 `MySQL` をインストールします。次のコマンドを順番に実行してください。

```
brew update
```

```
brew install mysql
```

処理が終わればMySQLのインストールは完了です。

## MySQLの起動
MySQLは、以下のコマンドを実行して起動しましょう。

```
mysql.server start
```

次に、ログインをします。以下のコマンドを実行しましょう。

```
mysql -u root -p
```

そうするとパスワードの入力が求められますが、MySQLのインストール時にパスワードを設定していない場合は、特に何も入力せず`Enter`を押して大丈夫です。

それでは早速、MySQLを使用してSQLを実行していきましょう。

## テーブルの作成
まずは、練習に使用する`sql_sample`データベースを作成します。

```sql
create database sql_sample;
```

データベースが作成できたら、そのデータベースを選択するために以下のコマンドを実行しましょう。

```sql
use sql_sample;
```

データベースが選択できたら、 `users` テーブルを作成します。

```sql
create table users(id int, name varchar(255));
```

コマンドが実行できたら、きちんと `users` テーブルが作成できているか確認してみましょう。

```sql
show tables;
```

以下のように `users` テーブルが表示されると作成は成功です。

```
+----------------------+
| Tables_in_sql_sample |
+----------------------+
| users                |
+----------------------+
```

テーブルが確認できたら、サンプルデータを作成します。以下のコマンドを実行しましょう。本当は１行ずつ手入力していただきたいのですが、めんどくさい場合は１行目のみ手入力で実行し、２行目以降はコピペで実行してみてください。

```sql
insert into users (id, name) VALUES (1, 'Tanaka');
insert into users (id, name) VALUES (2, 'Takahashi');
insert into users (id, name) VALUES (3, 'Nakamura');
insert into users (id, name) VALUES (4, 'Tanaka');
```

データが作成できたら、様々なコマンドを実行して動作を確認していきましょう。

## select
`select` は、データベースからデータを検索するためのコマンドで、最もよく利用されるものです。

```sql
select * from users;
```

上記のコマンドの中で `*` の部分は、「全てのデータ」という意味になります。そのため、上記のコマンドを実行すると `users` テーブルから全てのデータを検索することになります。

## distinct
`distinct` は重複するデータを除外してデータを検索することができます。

```sql
select distinct name from users;
```

## order by
`order by` はデータを表示する順番を指定することができます。データの表示を昇順にする場合は、 `order by` に合わせて `asc` を使用します。

```sql
select * from users order by id asc;
```

データの表示を昇順にする場合は、 `order by` に合わせて `desc` を使用します。

```sql
select * from users order by id desc;
```

|SQL|順番|
|---|---|
|asc|昇順|
|desc|降順|

## like
`like` は、データをあいまい検索する時に使用します。検索したいデータを `%` で囲むと、その文字を含むデータを検索することができます。そのため、今回のコマンドだと `name` に `m` が含まれるデータを検索します。ちなみに、この `%` のことをワイルドカードと呼びます。

```sql
select * from users where name like '%m%';
```

`id` を指定してデータを検索することもできます。

```sql
select * from users where id = 3;
```

## between
`between` は、範囲指定で条件検索を行う時に使用します。

```sql
select * from users where id between 2 and 4;
```

## and
`and` は複数の条件を満たすデータの検索をする時に使用します。

```sql
select * from users where id = 2 and name = 'Takahashi';
```

## or
`or` はどちらかの条件を満たすデータを検索する時に使用します。

```sql
select * from users where id = 2 or name = 'Tanaka';
```

## as
`as` は列やテーブルに別名をつけます。これを使用することによって、検索結果の表示を変えることができます。

```sql
select id as No, name as 名前 from users;
```

## in/not in
`in/not in` は、複数の値を指定して条件検索を行う時に使用します。

```sql
select * from users where name in ('Takahashi', 'Tanaka');
```

`not in` だと、「指定した条件を含まない」という意味になります。

```sql
select * from users where name not in ('Takahashi', 'Tanaka');
```


## limit
`limit` は検索数を制限する時に使用します。

```sql
select * from users where id = 2 or name = 'Tanaka' limit 2;
```

## update
`update` はデータベースのデータを更新する時に使用します。

```sql
update users set name = 'Tanabe' where name = 'Takahashi';
```

## case
`case`は条件に応じて実行するSQLを指定したい時に使用します。

```sql
select id, name,
    case name when 'Tanaka' then '関係者'
              when 'Takahashi' then '関係者'
              else '部外者'
    end as 分類
from users;
```

## まとめ
初心者の方はあんまりSQLを学ぶことを優先しないのですが、たとえRuby on Railsを使おうと、現場ではSQLを記述することがあります。それに、Ruby on Railsでデータ検索をする際も、裏側ではSQLが発行されています。

そのため、Ruby on Railsの理解を深めるためにも、最低限のSQLを理解できるようにしましょう。スラスラ書けるようになる必要はないので、せめて読めるようにはしてみてください。それだけでも、だいぶRuby on Railsの動きが把握できるようになりますよ。"
Other,React の導入,"`React` とは、画面を構成するパーツ（コンポーネント）を作るためのライブラリです。

このReactを使用することにより、コンポーネント同士のデザインが不必要に影響し合うことなく、不具合の起きにくい画面を作ることができます。（CSSだと書き方によっては他の部分に不必要な影響を与えることがある）

# RailsアプリにReactを導入する
それでは早速、RailsアプリにReactを導入していきましょう。

まずは、Ruby on Railsアプリを作成するためのディレクトリを作成します。

```
mkdir react-sample
```

作成したディレクトリの中に移動します。

```
cd react-sample
```

Gemfileを生成するため、以下のコマンドを実行しましょう。

```
bundle init
```

Gemfileが生成できたら、それをテキストエディタで開き、ファイルに記述されている `gem ""rails""` の先頭の#を消します。

```ruby
# frozen_string_literal: true

source ""https://rubygems.org""

git_source(:github) {|repo_name| ""https://github.com/#{repo_name}"" }

gem ""rails""
```

Gemfileを編集したら、gemをインストールします。

```
bundle install --path vendor/bundle
```

gemのインストールが終わったら、アプリを立ち上げるために以下のコマンドを入力します。途中で上書きするか聞かれるので、その際は `Enter` を押してください。

```
bundle exec rails new . --webpack=react
```

処理が終了したら、Ruby on Railsアプリに必要なファイルやディレクトリが作成されているかを確かめるため、以下のコマンドを入力してください。

```
ls
```

以下のような実行結果になれば成功です。

```
Gemfile      app          db           package.json tmp
Gemfile.lock bin          lib          public       vendor
README.md    config       log          storage      yarn.lock
Rakefile     config.ru    node_modules test
```

次に、以下のコマンドを実行して `webpacker` をインストールします。

```
bundle exec rails webpacker:install
```

webpacker のインストールが完了したら 'react' をインストールします。

```
bundle exec rails webpacker:install:react
```

`bundle exec rails webpacker:install` と `bundle exec rails webpacker:install:react` の２つのコマンドを実行すると、binディレクトリに `webpack` と `webpack-dev-server` が追加されているのがわかるかと思います。そのため、これらのコマンドを利用できるようになります。

```
ls bin/
```

実行結果

```
bundle  rails  rake  setup  update  webpack  webpack-dev-server  yarn
```

それでは、アプリの動作確認をしてみましょう。サーバーを起動させます。

```
rails s
```

動作の確認ができたらRailsサーバーを停止させます。以下のコマンドを実行しましょう。

```
control + c
```

次に、画面を表示する処理を実装していきましょう。

まずは、ルーティングを定義します。

```ruby
Rails.application.routes.draw do
  root to: 'users#index'
end
```

ルーティングが定義できたら、コントローラを作成します。今回は、コントローラの作成と同時に `index` アクションと `views/index.html.erb` が同時に作成できるようにコマンドを実行してみましょう。こういうコントローラやビューの作り方もあるということを認識しておいてください。

```
bundle exec rails g controller users index
```

コントローラとビューが作成されたら、次に `app/views/layouts/application.html.erb` を編集しましょう。

```
<!DOCTYPE html>
<html>
  <head>
    <title>SampleApp</title>
    <%= csrf_meta_tags %>
    <%= csp_meta_tag %>

    <%= stylesheet_link_tag    'application', media: 'all', 'data-turbolinks-track': 'reload' %>
    <!-- javascript_include_tagを以下のように変更 -->
    <%= javascript_pack_tag 'application', 'data-turbolinks-track': 'reload' %>
  </head>

  <body>
    <%= yield %>
  </body>
</html>
```

`application.html.erb` が編集できたら `app/javascript/packs/application.js` を編集しましょう。 `console.log('Hello World from Webpacker')` の下にコードを追記してください。

```js
console.log('Hello World from Webpacker')
// 以下の行を追加
require('./hello_react.jsx')
```

`hello_react.jsx` を変換（コンパイル）してjsファイルを作成します。拡張子である `jsx` は、 `JavaScript` の拡張言語のことで、この言語を使用することによって `JavaScript` 内でHTMLタグを記述することができるようになります。

では、早速 `jsx` を `js` にコンパイルしましょう。以下のコマンドを実行してください。

```
bin/webpack-dev-server
```

コマンドを実行したら、ターミナルの画面はそのままにし、新しくタブを立ち上げてRailsサーバーを起動しましょう。

ターミナルで新しくタブを立ち上げるためには以下のコマンドを実行します。

```
command + t
```

新しくタブが立ち上がったら、サーバーを起動します。

```
rails s
```

以下のURLにアクセスしてみましょう。

```
http://localhost:3000/
```

ブラウザで表示を確認してみましょう。

```
Users#index
Find me in app/views/users/index.html.erb

Hello React!
```

以上のような表示がされて入ればReactの導入は完了です。

# サンプルコード
ただ導入しても全然理解できないので、実際にコードを書いてReactの理解を深めていきましょう。

まず、コードを表示するための `div` タグを `/views/users/index.html.erb` に追記しましょう。その際、すでに記述されているコードは全て削除し、 `id` を `test` に指定します。

```
<!-- 以下のコードを追記 -->
<div id=""test""></div>
```

次に、 `app/javascript/packs/hello_react.jsx` を編集します。 `id` が `test` の要素を指定して、コンポーネントを表示させるように記述します。

```js


import React from 'react'
import ReactDOM from 'react-dom'
import PropTypes from 'prop-types'

const Hello = props => (
  <div>Hello {props.name}!</div>
)

Hello.defaultProps = {
  name: 'David'
}

Hello.propTypes = {
  name: PropTypes.string
}

document.addEventListener('DOMContentLoaded', () => {
  ReactDOM.render(
    <Hello name=""React"" />,
    // 以下のコードを編集
    document.getElementById('test'),
  )
})
```

次に、自分の名前を表示するようにしてみましょう。

```js


import React from 'react'
import ReactDOM from 'react-dom'
import PropTypes from 'prop-types'

const Hello = props => (
  <div>Hello {props.name}!</div>
)

Hello.defaultProps = {
  name: 'David'
}

Hello.propTypes = {
  name: PropTypes.string
}

document.addEventListener('DOMContentLoaded', () => {
  ReactDOM.render(
    // 自分の名前を記述
    <Hello name=""Kamizato"" />,
    document.getElementById('test'),
  )
})
```

ちなみに、上のコードの中で以下の部分は `name` プロパティーの初期値を設定するために使用されます。

```js
Hello.defaultProps = {
  name: 'David'
}
```

試しに、 `<Hello name=""Kamizato"" />` の `name=""Kamizato""` の部分を削除してみましょう。

```js


import React from 'react'
import ReactDOM from 'react-dom'
import PropTypes from 'prop-types'

const Hello = props => (
  <div>Hello {props.name}!</div>
)

Hello.defaultProps = {
  name: 'David'
}

Hello.propTypes = {
  name: PropTypes.string
}

document.addEventListener('DOMContentLoaded', () => {
  ReactDOM.render(
    // name を削除
    <Hello />,
    document.getElementById('test'),
  )
})
```

画面を確認すると、以下のように表示が変わっています。

```
Hello David!
```

# 変数の定義
変数を定義するには、 `const` を利用して以下のように記述します。

```js


import React from 'react'
import ReactDOM from 'react-dom'
import PropTypes from 'prop-types'

// 変数nameを定義
const name = 'Tanaka'

document.addEventListener('DOMContentLoaded', () => {
  ReactDOM.render(
    // 変数nameを使用
    name,
    document.getElementById('test'),
  )
})
```

以下のように表示が変わっていることを確認してみてください。

```
Tanaka
```

# 変数の式展開
Reactでも、Rubyと同様に式展開することができます。

```js


import React from 'react'
import ReactDOM from 'react-dom'
import PropTypes from 'prop-types'

const name = 'Tanaka'
// 変数elementを定義　nameを式展開
const element = <h1>Hello, {name}</h1>;

document.addEventListener('DOMContentLoaded', () => {
  ReactDOM.render(
    // elementを表示
    element,
    document.getElementById('test'),
  )
})
```

以下のように表示されることを確認してみてください。

```
Hello, Tanaka
```

# 連想配列
Reactでは、連想配列を使用して1つの変数に複数のデータを格納することができます。連想配列とは、Rubyでいう[ハッシュ](https://github.com/yoshitokamizato/rails_curriculum/blob/master/ruby/hash.md)のようなものです。

```js


import React from 'react'
import ReactDOM from 'react-dom'
import PropTypes from 'prop-types'

// formatNameメソッドを定義する
function formatName(user) {
  return user.firstName + ' ' + user.lastName;
}

const user = {
  firstName: 'Harper',
  lastName: 'Perez'
};

const element = (
  <h1>
    Hello, {formatName(user)}!
  </h1>
);

ReactDOM.render(
  element,
  document.getElementById('root')
);
```

# 条件分岐
Reactでも、もちろん条件分岐はあります。その際使用するのは、 Rubyと同じ `if` です。

```js


import React from 'react'
import ReactDOM from 'react-dom'
import PropTypes from 'prop-types'


function formatName(user) {
  // 条件分岐 userのデータが存在するとtrue
  if (user) {
    return user.firstName + ' ' + user.lastName
  }
  return 'Stranger'
}

const user = {
  firstName: 'Tanaka',
  lastName: 'Kiyoshi'
};

const element = (
  <h1>
    Hello, {formatName(user)}!
  </h1>
);

document.addEventListener('DOMContentLoaded', () => {
  ReactDOM.render(
    element,
    document.getElementById('test'),
  )
})
```

以下のような表示になるか確認しましょう。

```html
Hello, Tanaka Kiyoshi!
```

上記のコードは、 `user` の中にデータが存在する場合の処理でした。次は、 `user` データが存在しない場合の処理も確かめてみましょう。

```js


import React from 'react'
import ReactDOM from 'react-dom'
import PropTypes from 'prop-types'


function formatName(user) {
  // 条件分岐 userのデータが存在するとtrue
  if (user) {
    return user.firstName + ' ' + user.lastName
  }
  return 'Stranger'
}

const user = {
  firstName: 'Tanaka',
  lastName: 'Kiyoshi'
};

const element = (
  <h1>
    Hello, {formatName(user)}!
  </h1>
);

document.addEventListener('DOMContentLoaded', () => {
  ReactDOM.render(
    element,
    document.getElementById('test'),
  )
})
```

以下のような表示になるか確認しましょう。

```
Hello, Stranger!
```

# 時刻表示
時刻を表示するには以下のように記述します。

```js


import React from 'react'
import ReactDOM from 'react-dom'
import PropTypes from 'prop-types'


function formatName(user) {
  if (user) {
    return user.firstName + ' ' + user.lastName
  }
  return 'Stranger'
}

const user = {
  firstName: 'Tanaka',
  lastName: 'Kiyoshi'
};

const element = (
  <div>
    <h1>Hello, {formatName(user)}!</h1>
    // 日付を表示するDateクラスを使用する
    <h2>It is {new Date().toLocaleTimeString()}.</h2>
  </div>
);

document.addEventListener('DOMContentLoaded', () => {
  ReactDOM.render(
    element,
    document.getElementById('test'),
  )
})
```

上記のコードを記述すると以下のように表示されます。

```
Hello, Tanaka Kiyoshi!
It is 17:39:48.
```

ただし、このままではリアルタイムで時刻表示することができないので以下のように書き換えます。

```js


import React from 'react'
import ReactDOM from 'react-dom'
import PropTypes from 'prop-types'


function formatName(user) {
  if (user) {
    return user.firstName + ' ' + user.lastName
  }
  return 'Stranger'
}

const user = {
  firstName: 'Tanaka',
  lastName: 'Kiyoshi'
};

// 以下のクラスを定義
class Clock extends React.Component {
  constructor(props) {
    super(props);
    this.state = {date: new Date()};
  }

  componentDidMount() {
    this.timerID = setInterval(
      () => this.tick(),
      1000
    );
  }

  componentWillUnmount() {
    clearInterval(this.timerID);
  }

  tick() {
    this.setState({
      date: new Date()
    });
  }

  render() {
    return (
      <div>
        <h1>Hello, {formatName(user)}!</h1>
        <h2>It is {this.state.date.toLocaleTimeString()}.</h2>
      </div>
    );
  }
}


document.addEventListener('DOMContentLoaded', () => {
  ReactDOM.render(
    <Clock />,
    document.getElementById('test'),
  )
})
```

`function` の部分で `Clock` を複数呼び出すことで、簡単にコンポーネントを増やすこともできます。

```js


import React from 'react'
import ReactDOM from 'react-dom'
import PropTypes from 'prop-types'


function formatName(user) {
  if (user) {
    return user.firstName + ' ' + user.lastName
  }
  return 'Stranger'
}

const user = {
  firstName: 'Tanaka',
  lastName: 'Kiyoshi'
};


class Clock extends React.Component {
  constructor(props) {
    super(props);
    this.state = {date: new Date()};
  }

  componentDidMount() {
    this.timerID = setInterval(
      () => this.tick(),
      1000
    );
  }

  componentWillUnmount() {
    clearInterval(this.timerID);
  }

  tick() {
    this.setState({
      date: new Date()
    });
  }

  render() {
    return (
      <div>
        <h1>Hello, {formatName(user)}!</h1>
        <h2>It is {this.state.date.toLocaleTimeString()}.</h2>
      </div>
    );
  }
}

function App() {
  return (
    <div>
      <Clock />
      <Clock />
      <Clock />
    </div>
  );
}

document.addEventListener('DOMContentLoaded', () => {
  ReactDOM.render(
    <App />,
    document.getElementById('test'),
  )
})

```

# リンクを表示
HTMLと同じようにリンクを作ることができます。

```js


import React from 'react'
import ReactDOM from 'react-dom'
import PropTypes from 'prop-types'


function formatName(user) {
  if (user) {
    return user.firstName + ' ' + user.lastName
  }
  return 'Stranger'
}

const user = {
  firstName: 'Tanaka',
  lastName: 'Kiyoshi'
};


class Clock extends React.Component {
  constructor(props) {
    super(props);
    this.state = {date: new Date()};
  }

  componentDidMount() {
    this.timerID = setInterval(
      () => this.tick(),
      1000
    );
  }

  componentWillUnmount() {
    clearInterval(this.timerID);
  }

  tick() {
    this.setState({
      date: new Date()
    });
  }

  render() {
    return (
      <div>
        <h1>Hello, {formatName(user)}!</h1>
        <h2>It is {this.state.date.toLocaleTimeString()}.</h2>
      </div>
    );
  }
}

// ボタンがクリックされた時のイベントを定義
function handleClick(e) {
  e.preventDefault();
  alert('The link was clicked.');
}

function App() {
  return (
    <div>
      <Clock />
      // ボタンを表示する記述
      <a href=""#"" onClick={handleClick}>
        Click me
      </a>
    </div>
  );
}

document.addEventListener('DOMContentLoaded', () => {
  ReactDOM.render(
    <App />,
    document.getElementById('test'),
  )
})
```

# ボタンを表示
ボタンを表示するには以下のコードを追記します。

```js


import React from 'react'
import ReactDOM from 'react-dom'
import PropTypes from 'prop-types'


function formatName(user) {
  if (user) {
    return user.firstName + ' ' + user.lastName
  }
  return 'Stranger'
}

const user = {
  firstName: 'Tanaka',
  lastName: 'Kiyoshi'
};


class Clock extends React.Component {
  constructor(props) {
    super(props);
    this.state = {date: new Date()};
  }

  componentDidMount() {
    this.timerID = setInterval(
      () => this.tick(),
      1000
    );
  }

  componentWillUnmount() {
    clearInterval(this.timerID);
  }

  tick() {
    this.setState({
      date: new Date()
    });
  }

  render() {
    return (
      <div>
        <h1>Hello, {formatName(user)}!</h1>
        <h2>It is {this.state.date.toLocaleTimeString()}.</h2>
      </div>
    );
  }
}

function handleClick(e) {
  e.preventDefault();
  alert('The link was clicked.');
}

// ボタンのコンポーネントを作成
class Button extends React.Component {
  constructor(props) {
    super(props);
    this.state = {isToggleOn: true};
    this.handleClick = this.handleClick.bind(this);
  }

  handleClick() {
    this.setState(state => ({
      isToggleOn: !state.isToggleOn
    }));
  }

  render() {
    return (
      <button onClick={this.handleClick}>
        {this.state.isToggleOn ? 'ON' : 'OFF'}
      </button>
    );
  }
}

function App() {
  return (
    <div>
      <Clock />
      <a href=""#"" onClick={handleClick}>
        Click me
      </a>
      // ボタンを表示
      <Button />
    </div>
  );
}

document.addEventListener('DOMContentLoaded', () => {
  ReactDOM.render(
    <App />,
    document.getElementById('test'),
  )
})
```

# ボタンによって画面の表示を切り変える
ボタンを押すたびに「Please sign up.」と「Welcome back!」の表示が切り替わるように処理を書いて見ましょう。

これまでのコードは消して、新しく以下のようなコードを記述しましょう。

```js
import React from 'react'
import ReactDOM from 'react-dom'
import PropTypes from 'prop-types'

class LoginControl extends React.Component {
  constructor(props) {
    super(props);
    this.handleLoginClick = this.handleLoginClick.bind(this);
    this.handleLogoutClick = this.handleLogoutClick.bind(this);
    this.state = {isLoggedIn: false};
  }

  handleLoginClick() {
    this.setState({isLoggedIn: true});
  }

  handleLogoutClick() {
    this.setState({isLoggedIn: false});
  }

  render() {
    const isLoggedIn = this.state.isLoggedIn;
    let button;

    if (isLoggedIn) {
      button = <LogoutButton onClick={this.handleLogoutClick} />;
    } else {
      button = <LoginButton onClick={this.handleLoginClick} />;
    }

    return (
      <div>
        <Greeting isLoggedIn={isLoggedIn} />
        {button}
      </div>
    );
  }
}

function UserGreeting(props) {
  return <h1>Welcome back!</h1>;
}

function GuestGreeting(props) {
  return <h1>Please sign up.</h1>;
}

function Greeting(props) {
  const isLoggedIn = props.isLoggedIn;
  if (isLoggedIn) {
    return <UserGreeting />;
  }
  return <GuestGreeting />;
}

function LoginButton(props) {
  return (
    <button onClick={props.onClick}>
      Login
    </button>
  );
}

function LogoutButton(props) {
  return (
    <button onClick={props.onClick}>
      Logout
    </button>
  );
}

document.addEventListener('DOMContentLoaded', () => {
  ReactDOM.render(
    <LoginControl />,
    document.getElementById('test'),
  )
})

```

# リストの作成
リストを作成するときには以下のように記述します。

```js
import React from 'react'
import ReactDOM from 'react-dom'
import PropTypes from 'prop-types'

function NumberList(props) {
  const numbers = props.numbers;
  const listItems = numbers.map((number) =>
    <li key={number.toString()}>
      {number}
    </li>
  );
  return (
    <ul>{listItems}</ul>
  );
}

const numbers = [1,2,3,4,5];

document.addEventListener('DOMContentLoaded', () => {
  ReactDOM.render(
    <NumberList numbers={numbers} />,
    document.getElementById('test'),
  )
})
```

# まとめ
Reactは、画面を構築する上ではまさに最前線のスキルになります。フロントエンドのプログラマーになるにあたり、大きな武器となる技術なので、現場に入る前に慣れておくといいでしょう。

RubyやRuby on Railsに慣れたら、ぜひJavaScriptやReactの学習にも挑戦してみてください。

当コンテンツについても今後どんどん追記していきますが、とりあえず今はReactの基礎を押さえておくといいかと思います。

お疲れ様でした！"